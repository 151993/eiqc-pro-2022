<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QSS.eIQC.Api</name>
    </assembly>
    <members>
        <member name="T:QSS.eIQC.Api.Controllers.AdminCertificationController">
            <summary>
            AdminCertification Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.AdminCertificationController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.AdminCertificationController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of AdminCertificationController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationController.Add(QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Add.AddAdminCertificationModel)">
            <summary>
            Async POST Action method to Add new AdminCertification configuration
            </summary>
            <param name="request">Input parameter AddAdminCertificationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Add.AddAdminCertificationModel"/></param>
            <returns>If success should return newly added AdminCertificationModel <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.AdminCertificationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationController.Update(System.Int32,QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Update.UpdateAdminCertificationModel)">
            <summary>
            Async PUT Action method to update AdminCertification configuration
            </summary>
            <param name="id">AdminCertification Id as input in URL</param>
            <param name="request">Input parameter UpdateAdminCertificationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Update.UpdateAdminCertificationModel"/></param>
            <returns>If success should return newly added AdminCertificationModel <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.AdminCertificationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationController.Delete(QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Delete.DeleteAdminCertificationModel)">
            <summary>
            Async DELETE Action method to delete AdminCertification configuration
            </summary>
            <param name="request">Input parameter DeleteAdminCertificationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Delete.DeleteAdminCertificationModel"/></param>
            <returns>If success should return newly added DeleteAdminCertificationResponse <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.Delete.DeleteAdminCertificationResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.AdminCertificationODataController">
            <summary>
            AdminCertification Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a AdminCertification list
            </summary>
            <returns>An queryable object of AdminCertificationModel, <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.AdminCertificationModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.AdminCertificationODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of AdminCertifications that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of AdminCertificationModel,  <see cref="T:QSS.eIQC.Handlers.Commands.AdminCertificationCommand.AdminCertificationModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.BowTwistFormulaController">
            <summary>
            BowTwistFormula Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.BowTwistFormulaController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.BowTwistFormulaController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of BowTwistFormulaController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaController.Add(QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Add.AddBowTwistFormulaModel)">
            <summary>
            Async POST Action method to Add new BowTwistFormula configuration
            </summary>
            <param name="request">Input parameter AddBowTwistFormulaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Add.AddBowTwistFormulaModel"/></param>
            <returns>If success should return newly added BowTwistFormulaModel <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.BowTwistFormulaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaController.Update(System.Int32,QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Update.UpdateBowTwistFormulaModel)">
            <summary>
            Async PUT Action method to update BowTwistFormula configuration
            </summary>
            <param name="id">BowTwistFormula Id as input in URL</param>
            <param name="request">Input parameter UpdateBowTwistFormulaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Update.UpdateBowTwistFormulaModel"/></param>
            <returns>If success should return newly added BowTwistFormulaModel <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.BowTwistFormulaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaController.Delete(QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Delete.DeleteBowTwistFormulaModel)">
            <summary>
            Async DELETE Action method to delete BowTwistFormula configuration
            </summary>
            <param name="request">Input parameter DeleteBowTwistFormulaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Delete.DeleteBowTwistFormulaModel"/></param>
            <returns>If success should return newly added DeleteBowTwistFormulaResponse <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.Delete.DeleteBowTwistFormulaResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.BowTwistFormulaODataController">
            <summary>
            BowTwistFormula Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a BowTwistFormula list
            </summary>
            <returns>An queryable object of BowTwistFormulaModel, <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.BowTwistFormulaModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BowTwistFormulaODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of BowTwistFormulas that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of BowTwistFormulaModel,  <see cref="T:QSS.eIQC.Handlers.Commands.BowTwistFormulaCommand.BowTwistFormulaModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.BuyerController">
            <summary>
            Buyer Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.BuyerController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.BuyerController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of BuyerController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerController.Add(QSS.eIQC.Handlers.Commands.BuyerCommand.Add.AddBuyerModel)">
            <summary>
            Async POST Action method to Add new Buyer configuration
            </summary>
            <param name="request">Input parameter AddBuyerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.Add.AddBuyerModel"/></param>
            <returns>If success should return newly added BuyerModel <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.BuyerModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerController.Update(System.Int32,QSS.eIQC.Handlers.Commands.BuyerCommand.Update.UpdateBuyerModel)">
            <summary>
            Async PUT Action method to update Buyer configuration
            </summary>
            <param name="id">Buyer Id as input in URL</param>
            <param name="request">Input parameter UpdateBuyerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.Update.UpdateBuyerModel"/></param>
            <returns>If success should return newly added BuyerModel <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.BuyerModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerController.Delete(QSS.eIQC.Handlers.Commands.BuyerCommand.Delete.DeleteBuyerModel)">
            <summary>
            Async DELETE Action method to delete Buyer configuration
            </summary>
            <param name="request">Input parameter DeleteBuyerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.Delete.DeleteBuyerModel"/></param>
            <returns>If success should return newly added DeleteBuyerResponse <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.Delete.DeleteBuyerResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.BuyerODataController">
            <summary>
            Buyer Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Buyer list
            </summary>
            <returns>An queryable object of BuyerModel, <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.BuyerModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.BuyerODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Buyers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes input as a FilteringObject</param>
            <returns>An queryable object of BuyerModel,  <see cref="T:QSS.eIQC.Handlers.Commands.BuyerCommand.BuyerModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CertificateTypeController">
            <summary>
            CertificateType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.CertificateTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.CertificateTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CertificateTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeController.Add(QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Add.AddCertificateTypeModel)">
            <summary>
            Async POST Action method to Add new CertificateType configuration
            </summary>
            <param name="request">Input parameter AddCertificateTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Add.AddCertificateTypeModel"/></param>
            <returns>If success should return newly added CertificateTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.CertificateTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Update.UpdateCertificateTypeModel)">
            <summary>
            Async PUT Action method to update CertificateType configuration
            </summary>
            <param name="id">CertificateType Id as input in URL</param>
            <param name="request">Input parameter UpdateCertificateTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Update.UpdateCertificateTypeModel"/></param>
            <returns>If success should return newly added CertificateTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.CertificateTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeController.Delete(QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Delete.DeleteCertificateTypeModel)">
            <summary>
            Async DELETE Action method to delete CertificateType configuration
            </summary>
            <param name="request">Input parameter DeleteCertificateTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Delete.DeleteCertificateTypeModel"/></param>
            <returns>If success should return newly added DeleteCertificateTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.Delete.DeleteCertificateTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CertificateTypeODataController">
            <summary>
            CertificateType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a CertificateType list
            </summary>
            <returns>An queryable object of CertificateTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.CertificateTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CertificateTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of CertificateTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of CertificateTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CertificateTypeCommand.CertificateTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ChartTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ChartTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ChartType Type list
            </summary>
            <returns>An queryable object of ChartTypeTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.ChartTypeCommand.ChartTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ChartTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ChartTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ChartTypeTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ChartTypeCommand.ChartTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CommodityCategoryController">
            <summary>
            CommodityCategory Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.CommodityCategoryController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.CommodityCategoryController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CommodityCategoryController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryController.Add(QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Add.AddCommodityCategoryModel)">
            <summary>
            Async POST Action method to Add new CommodityCategory configuration
            </summary>
            <param name="request">Input parameter AddCommodityCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Add.AddCommodityCategoryModel"/></param>
            <returns>If success should return newly added CommodityCategoryModel <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.CommodityCategoryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Update.UpdateCommodityCategoryModel)">
            <summary>
            Async PUT Action method to update CommodityCategory configuration
            </summary>
            <param name="id">CommodityCategory Id as input in URL</param>
            <param name="request">Input parameter UpdateCommodityCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Update.UpdateCommodityCategoryModel"/></param>
            <returns>If success should return newly added CommodityCategoryModel <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.CommodityCategoryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryController.Delete(QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Delete.DeleteCommodityCategoryModel)">
            <summary>
            Async DELETE Action method to delete CommodityCategory configuration
            </summary>
            <param name="request">Input parameter DeleteCommodityCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Delete.DeleteCommodityCategoryModel"/></param>
            <returns>If success should return newly added DeleteCommodityCategoryResponse <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.Delete.DeleteCommodityCategoryResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CommodityCategoryODataController">
            <summary>
            CommodityCategory Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a CommodityCategory list
            </summary>
            <returns>An queryable object of CommodityCategoryModel, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.CommodityCategoryModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityCategoryODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of CommodityCategorys that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of CommodityCategoryModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCategoryCommand.CommodityCategoryModel"/></returns>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.Commodity.CommodityController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.Commodity.CommodityController},MediatR.IMediator,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of MaterialGroupController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityController.Add(QSS.eIQC.Handlers.Commands.CommodityCommand.Add.AddCommodityModel)">
            <summary>
            Async POST Action method to Add new Material Group configuration
            </summary>
            <param name="request">Input parameter AddMaterialGroupModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Add.AddCommodityModel"/></param>
            <returns>If success should return newly added AddMaterialGroupModel <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Add.AddCommodityModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CommodityCommand.Update.UpdateCommodityModel)">
            <summary>
            Async PUT Action method to update User configuration
            </summary>
            <param name="id">Material Group Id as input in URL</param>
            <param name="request">Input parameter UpdateMaterialGroupModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Update.UpdateCommodityModel"/></param>
            <returns>If success should return newly added UpdateMaterialGroupModel <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Update.UpdateCommodityModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityController.Delete(QSS.eIQC.Handlers.Commands.CommodityCommand.Delete.DeleteCommodityModel)">
            <summary>
            Async DELETE Action method to delete Commodity configuration
            </summary>
            <param name="request">Input parameter DeleteCommodityModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Delete.DeleteCommodityModel"/></param>
            <returns>If success should return newly added DeleteCommodityResponse <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.Delete.DeleteCommodityResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a CommodityModel list
            </summary>
            <returns>An queryable object of CommodityModel, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.CommodityModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of CommodityModel that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            /// <param name="oDataQueryOptions">Takes input id as a key</param>
            <returns>An queryable object of CommodityModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.CommodityModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Commodity.CommodityODataController.GetCommoditiesWithPartAndSite(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a CommodityModel list with Part and Site numbers
            </summary>
            <returns>An queryable object of CommodityModel, <see cref="T:QSS.eIQC.Handlers.Commands.CommodityCommand.CommodityModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CompletedGRSController">
            <summary>
            CompletedGRS Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.CompletedGRSController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.CompletedGRSController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CompletedGRSController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSController.Add(QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Add.AddCompletedGRSModel)">
            <summary>
            Async POST Action method to Add new CompletedGRS configuration
            </summary>
            <param name="request">Input parameter AddCompletedGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Add.AddCompletedGRSModel"/></param>
            <returns>If success should return newly added CompletedGRSModel <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.CompletedGRSModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Update.UpdateCompletedGRSModel)">
            <summary>
            Async PUT Action method to update CompletedGRS configuration
            </summary>
            <param name="id">CompletedGRS Id as input in URL</param>
            <param name="request">Input parameter UpdateCompletedGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Update.UpdateCompletedGRSModel"/></param>
            <returns>If success should return newly added CompletedGRSModel <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.CompletedGRSModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSController.Delete(QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Delete.DeleteCompletedGRSModel)">
            <summary>
            Async DELETE Action method to delete CompletedGRS configuration
            </summary>
            <param name="request">Input parameter DeleteCompletedGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Delete.DeleteCompletedGRSModel"/></param>
            <returns>If success should return newly added DeleteCompletedGRSResponse <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.Delete.DeleteCompletedGRSResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CompletedGRSODataController">
            <summary>
            CompletedGRS Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a CompletedGRS list
            </summary>
            <returns>An queryable object of CompletedGRSModel, <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.CompletedGRSModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CompletedGRSODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of CompletedGRSs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of CompletedGRSModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CompletedGRSCommand.CompletedGRSModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.Country.CountryController">
            <summary>
            Country Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.Country.CountryController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Country.CountryController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.Country.CountryController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CountryController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Country.CountryController.Add(QSS.eIQC.Handlers.Commands.CountryCommand.Add.AddCountryModel)">
            <summary>
            Async POST Action method to Add new Country configuration
            </summary>
            <param name="request">Input parameter AddCountryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.Add.AddCountryModel"/></param>
            <returns>If success should return newly added CountryModel <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.CountryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Country.CountryController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CountryCommand.Update.UpdateCountryModel)">
            <summary>
            Async PUT Action method to update Country configuration
            </summary>
            <param name="id">Country Id as input in URL</param>
            <param name="request">Input parameter UpdateCountryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.Update.UpdateCountryModel"/></param>
            <returns>If success should return newly added CountryModel <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.CountryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Country.CountryController.Delete(QSS.eIQC.Handlers.Commands.CountryCommand.Delete.DeleteCountryModel)">
            <summary>
            Async DELETE Action method to delete Country configuration
            </summary>
            <param name="request">Input parameter DeleteCountryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.Delete.DeleteCountryModel"/></param>
            <returns>If success should return newly added DeleteCountryResponse <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.Delete.DeleteCountryResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CTParameterController">
            <summary>
            CTParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.CTParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.CTParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CTParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterController.Add(QSS.eIQC.Handlers.Commands.CTParameterCommand.Add.AddCTParameterModel)">
            <summary>
            Async POST Action method to Add new CTParameter configuration
            </summary>
            <param name="request">Input parameter AddCTParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.Add.AddCTParameterModel"/></param>
            <returns>If success should return newly added CTParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.CTParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CTParameterCommand.Update.UpdateCTParameterModel)">
            <summary>
            Async PUT Action method to update CTParameter configuration
            </summary>
            <param name="id">CTParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateCTParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.Update.UpdateCTParameterModel"/></param>
            <returns>If success should return newly added CTParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.CTParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterController.Delete(QSS.eIQC.Handlers.Commands.CTParameterCommand.Delete.DeleteCTParameterModel)">
            <summary>
            Async DELETE Action method to delete CTParameter configuration
            </summary>
            <param name="request">Input parameter DeleteCTParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.Delete.DeleteCTParameterModel"/></param>
            <returns>If success should return newly added DeleteCTParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.Delete.DeleteCTParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CTParameterODataController">
            <summary>
            CTParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a CTParameter list
            </summary>
            <returns>An queryable object of CTParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.CTParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CTParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of CTParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of CTParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CTParameterCommand.CTParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CustomerController">
            <summary>
            Customer Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.CustomerController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.CustomerController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of CustomerController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerController.Add(QSS.eIQC.Handlers.Commands.CustomerCommand.Add.AddCustomerModel)">
            <summary>
            Async POST Action method to Add new Customer configuration
            </summary>
            <param name="request">Input parameter AddCustomerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.Add.AddCustomerModel"/></param>
            <returns>If success should return newly added CustomerModel <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.CustomerModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerController.Update(System.Int32,QSS.eIQC.Handlers.Commands.CustomerCommand.Update.UpdateCustomerModel)">
            <summary>
            Async PUT Action method to update Customer configuration
            </summary>
            <param name="id">Customer Id as input in URL</param>
            <param name="request">Input parameter UpdateCustomerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.Update.UpdateCustomerModel"/></param>
            <returns>If success should return newly added CustomerModel <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.CustomerModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerController.Delete(QSS.eIQC.Handlers.Commands.CustomerCommand.Delete.DeleteCustomerModel)">
            <summary>
            Async DELETE Action method to delete Customer configuration
            </summary>
            <param name="request">Input parameter DeleteCustomerModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.Delete.DeleteCustomerModel"/></param>
            <returns>If success should return newly added DeleteCustomerResponse <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.Delete.DeleteCustomerResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.CustomerODataController">
            <summary>
            Customer Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Customer list
            </summary>
            <returns>An queryable object of CustomerModel, <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.CustomerModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CustomerODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Customers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of CustomerModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CustomerCommand.CustomerModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DataTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DataTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DataType Type list
            </summary>
            <returns>An queryable object of DataTypeTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.DataTypeCommand.DataTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DataTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DataTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DataTypeTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DataTypeCommand.DataTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DCCConfigurationController">
            <summary>
            DCCConfiguration Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.DCCConfigurationController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.DCCConfigurationController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DCCConfigurationController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationController.Add(QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Add.AddDCCConfigurationModel)">
            <summary>
            Async POST Action method to Add new DCCConfiguration configuration
            </summary>
            <param name="request">Input parameter AddDCCConfigurationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Add.AddDCCConfigurationModel"/></param>
            <returns>If success should return newly added DCCConfigurationModel <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.DCCConfigurationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationController.Update(System.Int32,QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Update.UpdateDCCConfigurationModel)">
            <summary>
            Async PUT Action method to update DCCConfiguration configuration
            </summary>
            <param name="id">DCCConfiguration Id as input in URL</param>
            <param name="request">Input parameter UpdateDCCConfigurationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Update.UpdateDCCConfigurationModel"/></param>
            <returns>If success should return newly added DCCConfigurationModel <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.DCCConfigurationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationController.Delete(QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Delete.DeleteDCCConfigurationModel)">
            <summary>
            Async DELETE Action method to delete DCCConfiguration configuration
            </summary>
            <param name="request">Input parameter DeleteDCCConfigurationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Delete.DeleteDCCConfigurationModel"/></param>
            <returns>If success should return newly added DeleteDCCConfigurationResponse <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.Delete.DeleteDCCConfigurationResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DCCConfigurationODataController">
            <summary>
            DCCConfiguration Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DCCConfiguration list
            </summary>
            <returns>An queryable object of DCCConfigurationModel, <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.DCCConfigurationModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DCCConfigurationODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DCCConfigurations that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DCCConfigurationModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DCCConfigurationCommand.DCCConfigurationModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DefectManagementController">
            <summary>
            DefectManagement Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.DefectManagementController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.DefectManagementController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DefectManagementController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementController.Add(QSS.eIQC.Handlers.Commands.DefectManagementCommand.Add.AddDefectManagementModel)">
            <summary>
            Async POST Action method to Add new DefectManagement configuration
            </summary>
            <param name="request">Input parameter AddDefectManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.Add.AddDefectManagementModel"/></param>
            <returns>If success should return newly added DefectManagementModel <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.DefectManagementModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementController.Update(System.Int32,QSS.eIQC.Handlers.Commands.DefectManagementCommand.Update.UpdateDefectManagementModel)">
            <summary>
            Async PUT Action method to update DefectManagement configuration
            </summary>
            <param name="id">DefectManagement Id as input in URL</param>
            <param name="request">Input parameter UpdateDefectManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.Update.UpdateDefectManagementModel"/></param>
            <returns>If success should return newly added DefectManagementModel <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.DefectManagementModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementController.Delete(QSS.eIQC.Handlers.Commands.DefectManagementCommand.Delete.DeleteDefectManagementModel)">
            <summary>
            Async DELETE Action method to delete DefectManagement configuration
            </summary>
            <param name="request">Input parameter DeleteDefectManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.Delete.DeleteDefectManagementModel"/></param>
            <returns>If success should return newly added DeleteDefectManagementResponse <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.Delete.DeleteDefectManagementResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DefectManagementODataController">
            <summary>
            DefectManagement Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DefectManagement list
            </summary>
            <returns>An queryable object of DefectManagementModel, <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.DefectManagementModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectManagementODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DefectManagements that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DefectManagementModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DefectManagementCommand.DefectManagementModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DefectSectionODataController">
            <summary>
            DefectSection Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectSectionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectSectionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DefectSection list
            </summary>
            <returns>An queryable object of DefectSectionModel, <see cref="T:QSS.eIQC.Handlers.Commands.DefectSectionCommand.DefectSectionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectSectionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DefectSections that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DefectSectionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DefectSectionCommand.DefectSectionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DefectTypeODataController">
            <summary>
            DefectType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DefectType list
            </summary>
            <returns>An queryable object of DefectTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.DefectTypeCommand.DefectTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DefectTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of DefectTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DefectTypeCommand.DefectTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DefectTypeODataController.GetDefectTypeNameBySection(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DefectTypes that matches with the input
            </summary>
            <param name="defectSectionId"></param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of DefectTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DefectTypeCommand.DefectTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DimensionDefaultODataController">
            <summary>
            DimensionDefault Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DimensionDefaultODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DimensionDefaultODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DimensionDefault list
            </summary>
            <returns>An queryable object of DimensionDefaultModel, <see cref="T:QSS.eIQC.Handlers.Commands.DimensionDefaultCommand.DimensionDefaultModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DimensionDefaultODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DimensionDefaults that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DimensionDefaultModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DimensionDefaultCommand.DimensionDefaultModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DispositionTypeController">
            <summary>
            DispositionType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.DispositionTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.DispositionTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DispositionTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeController.Add(QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Add.AddDispositionTypeModel)">
            <summary>
            Async POST Action method to Add new DispositionType configuration
            </summary>
            <param name="request">Input parameter AddDispositionTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Add.AddDispositionTypeModel"/></param>
            <returns>If success should return newly added DispositionTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.DispositionTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Update.UpdateDispositionTypeModel)">
            <summary>
            Async PUT Action method to update DispositionType configuration
            </summary>
            <param name="id">DispositionType Id as input in URL</param>
            <param name="request">Input parameter UpdateDispositionTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Update.UpdateDispositionTypeModel"/></param>
            <returns>If success should return newly added DispositionTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.DispositionTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeController.Delete(QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Delete.DeleteDispositionTypeModel)">
            <summary>
            Async DELETE Action method to delete DispositionType configuration
            </summary>
            <param name="request">Input parameter DeleteDispositionTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Delete.DeleteDispositionTypeModel"/></param>
            <returns>If success should return newly added DeleteDispositionTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.Delete.DeleteDispositionTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DispositionTypeODataController">
            <summary>
            DispositionType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a DispositionType list
            </summary>
            <returns>An queryable object of DispositionTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.DispositionTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DispositionTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of DispositionTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of DispositionTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DispositionTypeCommand.DispositionTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.Division.DivisionController">
            <summary>
            Division Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.Division.DivisionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Division.DivisionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.Division.DivisionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient,QSS.eIQC.TM1Sync.Interface.ISyncTM1DataHelper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DivisionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
            <param name="syncTM1DataHelper">Sync TM1 Data Helper, <see cref="T:QSS.eIQC.TM1Sync.Interface.ISyncTM1DataHelper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Division.DivisionController.Add(QSS.eIQC.Handlers.Commands.DivisionCommand.Add.AddDivisionModel)">
            <summary>
            Async POST Action method to Add new Division configuration
            </summary>
            <param name="request">Input parameter AddDivisionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.Add.AddDivisionModel"/></param>
            <returns>If success should return newly added DivisionModel <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.DivisionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Division.DivisionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.DivisionCommand.Update.UpdateDivisionModel)">
            <summary>
            Async PUT Action method to update Division configuration
            </summary>
            <param name="id">Division Id as input in URL</param>
            <param name="request">Input parameter UpdateDivisionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.Update.UpdateDivisionModel"/></param>
            <returns>If success should return newly added DivisionModel <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.DivisionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Division.DivisionController.Delete(QSS.eIQC.Handlers.Commands.DivisionCommand.Delete.DeleteDivisionModel)">
            <summary>
            Async DELETE Action method to delete Division configuration
            </summary>
            <param name="request">Input parameter DeleteDivisionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.Delete.DeleteDivisionModel"/></param>
            <returns>If success should return newly added DeleteDivisionResponse <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.Delete.DeleteDivisionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.DivisionODataController">
            <summary>
            Division Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DivisionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DivisionODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DivisionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of _DivisionModel, <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.DivisionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.DivisionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Divisions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _DivisionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DivisionCommand.DivisionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateController">
            <summary>
            EmailTemplate Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateController},MediatR.IMediator,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Contructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of EmailTemplateController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="contextAccessor">Injected instance of IHttpContextAccessor on runtime, <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateController.Update(System.Int32,QSS.eIQC.Handlers.Commands.EmailTemplateCommand.Update.UpdateEmailTemplateModel)">
            <summary>
            Async PUT Action method to update EmailTemplate configuration
            </summary>
            <param name="id">EmailTemplate Id as input in URL</param>
            <param name="request">Input parameter UpdateEmailTemplateModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.EmailTemplateCommand.Update.UpdateEmailTemplateModel"/></param>
            <returns>If success should return newly added EmailTemplateModel <see cref="T:QSS.eIQC.Handlers.Commands.EmailTemplateCommand.EmailTemplateModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController">
            <summary>
            EmailTemplate Configurations OData controller
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController._context">
            <summary>
            Store IApplicationConfigurationContext, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/>
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController._mapper">
            <summary>
            Store IMapper, <see cref="T:AutoMapper.IMapper"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController},QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Contructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of EmailTemplateODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of IApplicationConfigurationContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController.Get">
            <summary>
            OData api to retrieve a EmailTemplate list
            </summary>
            <returns>An queryable object of EmailTemplateModel, <see cref="T:QSS.eIQC.Handlers.Commands.EmailTemplateCommand.EmailTemplateModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.EmailTemplate.EmailTemplateODataController.Get(System.Int32)">
            <summary>
            OData api to return a Depertment matching key 
            </summary>
            <param name="id">Takes input EmailTemplate Id as a key</param>
            <returns>An queryable object of EmailTemplateModel,  <see cref="T:QSS.eIQC.Handlers.Commands.EmailTemplateCommand.EmailTemplateModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormBowTwistActualController">
            <summary>
            FormBowTwistActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormBowTwistActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormBowTwistActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormBowTwistActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualController.Add(QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Add.AddFormBowTwistActualModel)">
            <summary>
            Async POST Action method to Add new FormBowTwistActual configuration
            </summary>
            <param name="request">Input parameter AddFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Add.AddFormBowTwistActualModel"/></param>
            <returns>If success should return newly added FormBowTwistActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.FormBowTwistActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Update.UpdateFormBowTwistActualModel)">
            <summary>
            Async PUT Action method to update FormBowTwistActual configuration
            </summary>
            <param name="id">FormBowTwistActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Update.UpdateFormBowTwistActualModel"/></param>
            <returns>If success should return newly added FormBowTwistActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.FormBowTwistActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualController.Delete(QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Delete.DeleteFormBowTwistActualModel)">
            <summary>
            Async DELETE Action method to delete FormBowTwistActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Delete.DeleteFormBowTwistActualModel"/></param>
            <returns>If success should return newly added DeleteFormBowTwistActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.Delete.DeleteFormBowTwistActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormBowTwistActualODataController">
            <summary>
            FormBowTwistActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormBowTwistActual list
            </summary>
            <returns>An queryable object of FormBowTwistActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.FormBowTwistActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormBowTwistActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormBowTwistActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistActualCommand.FormBowTwistActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormBowTwistParameterController">
            <summary>
            FormBowTwistParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormBowTwistParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormBowTwistParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormBowTwistParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterController.Add(QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Add.AddFormBowTwistParameterModel)">
            <summary>
            Async POST Action method to Add new FormBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter AddFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Add.AddFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added FormBowTwistParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.FormBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Update.UpdateFormBowTwistParameterModel)">
            <summary>
            Async PUT Action method to update FormBowTwistParameter configuration
            </summary>
            <param name="id">FormBowTwistParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Update.UpdateFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added FormBowTwistParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.FormBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterController.Delete(QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Delete.DeleteFormBowTwistParameterModel)">
            <summary>
            Async DELETE Action method to delete FormBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Delete.DeleteFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added DeleteFormBowTwistParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.Delete.DeleteFormBowTwistParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormBowTwistParameterODataController">
            <summary>
            FormBowTwistParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormBowTwistParameter list
            </summary>
            <returns>An queryable object of FormBowTwistParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.FormBowTwistParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormBowTwistParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormBowTwistParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormBowTwistParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormBowTwistParameterCommand.FormBowTwistParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormCountParameterController">
            <summary>
            FormCountParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormCountParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormCountParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormCountParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterController.Add(QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Add.AddFormCountParameterModel)">
            <summary>
            Async POST Action method to Add new FormCountParameter configuration
            </summary>
            <param name="request">Input parameter AddFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Add.AddFormCountParameterModel"/></param>
            <returns>If success should return newly added FormCountParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.FormCountParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Update.UpdateFormCountParameterModel)">
            <summary>
            Async PUT Action method to update FormCountParameter configuration
            </summary>
            <param name="id">FormCountParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Update.UpdateFormCountParameterModel"/></param>
            <returns>If success should return newly added FormCountParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.FormCountParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterController.Delete(QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Delete.DeleteFormCountParameterModel)">
            <summary>
            Async DELETE Action method to delete FormCountParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Delete.DeleteFormCountParameterModel"/></param>
            <returns>If success should return newly added DeleteFormCountParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.Delete.DeleteFormCountParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormCountParameterODataController">
            <summary>
            FormCountParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormCountParameter list
            </summary>
            <returns>An queryable object of FormCountParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.FormCountParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormCountParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormCountParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormCountParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormCountParameterCommand.FormCountParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormFunParaActualController">
            <summary>
            FormFunParaActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormFunParaActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormFunParaActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormFunParaActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualController.Add(QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Add.AddFormFunParaActualModel)">
            <summary>
            Async POST Action method to Add new FormFunParaActual configuration
            </summary>
            <param name="request">Input parameter AddFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Add.AddFormFunParaActualModel"/></param>
            <returns>If success should return newly added FormFunParaActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.FormFunParaActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Update.UpdateFormFunParaActualModel)">
            <summary>
            Async PUT Action method to update FormFunParaActual configuration
            </summary>
            <param name="id">FormFunParaActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Update.UpdateFormFunParaActualModel"/></param>
            <returns>If success should return newly added FormFunParaActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.FormFunParaActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualController.Delete(QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Delete.DeleteFormFunParaActualModel)">
            <summary>
            Async DELETE Action method to delete FormFunParaActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Delete.DeleteFormFunParaActualModel"/></param>
            <returns>If success should return newly added DeleteFormFunParaActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.Delete.DeleteFormFunParaActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormFunParaActualODataController">
            <summary>
            FormFunParaActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormFunParaActual list
            </summary>
            <returns>An queryable object of FormFunParaActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.FormFunParaActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormFunParaActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormFunParaActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaActualCommand.FormFunParaActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormFunParaController">
            <summary>
            FormFunPara Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormFunParaController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormFunParaController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormFunParaController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaController.Add(QSS.eIQC.Handlers.Commands.FormFunParaCommand.Add.AddFormFunParaModel)">
            <summary>
            Async POST Action method to Add new FormFunPara configuration
            </summary>
            <param name="request">Input parameter AddFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.Add.AddFormFunParaModel"/></param>
            <returns>If success should return newly added FormFunParaModel <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.FormFunParaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormFunParaCommand.Update.UpdateFormFunParaModel)">
            <summary>
            Async PUT Action method to update FormFunPara configuration
            </summary>
            <param name="id">FormFunPara Id as input in URL</param>
            <param name="request">Input parameter UpdateFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.Update.UpdateFormFunParaModel"/></param>
            <returns>If success should return newly added FormFunParaModel <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.FormFunParaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaController.Delete(QSS.eIQC.Handlers.Commands.FormFunParaCommand.Delete.DeleteFormFunParaModel)">
            <summary>
            Async DELETE Action method to delete FormFunPara configuration
            </summary>
            <param name="request">Input parameter DeleteFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.Delete.DeleteFormFunParaModel"/></param>
            <returns>If success should return newly added DeleteFormFunParaResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.Delete.DeleteFormFunParaResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormFunParaODataController">
            <summary>
            FormFunPara Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormFunPara list
            </summary>
            <returns>An queryable object of FormFunParaModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.FormFunParaModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormFunParaODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormFunParas that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormFunParaModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormFunParaCommand.FormFunParaModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormLPositionActualController">
            <summary>
            FormLPositionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormLPositionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormLPositionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormLPositionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualController.Add(QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Add.AddFormLPositionActualModel)">
            <summary>
            Async POST Action method to Add new FormLPositionActual configuration
            </summary>
            <param name="request">Input parameter AddFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Add.AddFormLPositionActualModel"/></param>
            <returns>If success should return newly added FormLPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.FormLPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Update.UpdateFormLPositionActualModel)">
            <summary>
            Async PUT Action method to update FormLPositionActual configuration
            </summary>
            <param name="id">FormLPositionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Update.UpdateFormLPositionActualModel"/></param>
            <returns>If success should return newly added FormLPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.FormLPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualController.Delete(QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Delete.DeleteFormLPositionActualModel)">
            <summary>
            Async DELETE Action method to delete FormLPositionActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Delete.DeleteFormLPositionActualModel"/></param>
            <returns>If success should return newly added DeleteFormLPositionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.Delete.DeleteFormLPositionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormLPositionActualODataController">
            <summary>
            FormLPositionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormLPositionActual list
            </summary>
            <returns>An queryable object of FormLPositionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.FormLPositionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormLPositionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormLPositionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionActualCommand.FormLPositionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormLPositionController">
            <summary>
            FormLPosition Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormLPositionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormLPositionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormLPositionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionController.Add(QSS.eIQC.Handlers.Commands.FormLPositionCommand.Add.AddFormLPositionModel)">
            <summary>
            Async POST Action method to Add new FormLPosition configuration
            </summary>
            <param name="request">Input parameter AddFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.Add.AddFormLPositionModel"/></param>
            <returns>If success should return newly added FormLPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.FormLPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormLPositionCommand.Update.UpdateFormLPositionModel)">
            <summary>
            Async PUT Action method to update FormLPosition configuration
            </summary>
            <param name="id">FormLPosition Id as input in URL</param>
            <param name="request">Input parameter UpdateFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.Update.UpdateFormLPositionModel"/></param>
            <returns>If success should return newly added FormLPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.FormLPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionController.Delete(QSS.eIQC.Handlers.Commands.FormLPositionCommand.Delete.DeleteFormLPositionModel)">
            <summary>
            Async DELETE Action method to delete FormLPosition configuration
            </summary>
            <param name="request">Input parameter DeleteFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.Delete.DeleteFormLPositionModel"/></param>
            <returns>If success should return newly added DeleteFormLPositionResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.Delete.DeleteFormLPositionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormLPositionODataController">
            <summary>
            FormLPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormLPosition list
            </summary>
            <returns>An queryable object of FormLPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.FormLPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormLPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormLPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormLPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormLPositionCommand.FormLPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController">
            <summary>
            FormMeasurementParameterActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMeasurementParameterActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController.Add(QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Add.AddFormMeasurementParameterActualModel)">
            <summary>
            Async POST Action method to Add new FormMeasurementParameterActual configuration
            </summary>
            <param name="request">Input parameter AddFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Add.AddFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added FormMeasurementParameterActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.FormMeasurementParameterActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Update.UpdateFormMeasurementParameterActualModel)">
            <summary>
            Async PUT Action method to update FormMeasurementParameterActual configuration
            </summary>
            <param name="id">FormMeasurementParameterActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Update.UpdateFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added FormMeasurementParameterActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.FormMeasurementParameterActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualController.Delete(QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Delete.DeleteFormMeasurementParameterActualModel)">
            <summary>
            Async DELETE Action method to delete FormMeasurementParameterActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Delete.DeleteFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added DeleteFormMeasurementParameterActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.Delete.DeleteFormMeasurementParameterActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualODataController">
            <summary>
            FormMeasurementParameterActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMeasurementParameterActual list
            </summary>
            <returns>An queryable object of FormMeasurementParameterActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.FormMeasurementParameterActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMeasurementParameterActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMeasurementParameterActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterActualCommand.FormMeasurementParameterActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMeasurementParameterController">
            <summary>
            FormMeasurementParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMeasurementParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMeasurementParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMeasurementParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterController.Add(QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Add.AddFormMeasurementParameterModel)">
            <summary>
            Async POST Action method to Add new FormMeasurementParameter configuration
            </summary>
            <param name="request">Input parameter AddFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Add.AddFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added FormMeasurementParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.FormMeasurementParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Update.UpdateFormMeasurementParameterModel)">
            <summary>
            Async PUT Action method to update FormMeasurementParameter configuration
            </summary>
            <param name="id">FormMeasurementParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Update.UpdateFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added FormMeasurementParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.FormMeasurementParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterController.Delete(QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Delete.DeleteFormMeasurementParameterModel)">
            <summary>
            Async DELETE Action method to delete FormMeasurementParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Delete.DeleteFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added DeleteFormMeasurementParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.Delete.DeleteFormMeasurementParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMeasurementParameterODataController">
            <summary>
            FormMeasurementParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMeasurementParameter list
            </summary>
            <returns>An queryable object of FormMeasurementParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.FormMeasurementParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMeasurementParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMeasurementParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMeasurementParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMeasurementParameterCommand.FormMeasurementParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMicroSectionActualController">
            <summary>
            FormMicroSectionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMicroSectionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMicroSectionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMicroSectionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualController.Add(QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Add.AddFormMicroSectionActualModel)">
            <summary>
            Async POST Action method to Add new FormMicroSectionActual configuration
            </summary>
            <param name="request">Input parameter AddFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Add.AddFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added FormMicroSectionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.FormMicroSectionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Update.UpdateFormMicroSectionActualModel)">
            <summary>
            Async PUT Action method to update FormMicroSectionActual configuration
            </summary>
            <param name="id">FormMicroSectionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Update.UpdateFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added FormMicroSectionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.FormMicroSectionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualController.Delete(QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Delete.DeleteFormMicroSectionActualModel)">
            <summary>
            Async DELETE Action method to delete FormMicroSectionActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Delete.DeleteFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added DeleteFormMicroSectionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.Delete.DeleteFormMicroSectionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMicroSectionActualODataController">
            <summary>
            FormMicroSectionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMicroSectionActual list
            </summary>
            <returns>An queryable object of FormMicroSectionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.FormMicroSectionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMicroSectionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMicroSectionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionActualCommand.FormMicroSectionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMicroSectionController">
            <summary>
            FormMicroSection Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMicroSectionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMicroSectionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMicroSectionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionController.Add(QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Add.AddFormMicroSectionModel)">
            <summary>
            Async POST Action method to Add new FormMicroSection configuration
            </summary>
            <param name="request">Input parameter AddFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Add.AddFormMicroSectionModel"/></param>
            <returns>If success should return newly added FormMicroSectionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.FormMicroSectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Update.UpdateFormMicroSectionModel)">
            <summary>
            Async PUT Action method to update FormMicroSection configuration
            </summary>
            <param name="id">FormMicroSection Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Update.UpdateFormMicroSectionModel"/></param>
            <returns>If success should return newly added FormMicroSectionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.FormMicroSectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionController.Delete(QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Delete.DeleteFormMicroSectionModel)">
            <summary>
            Async DELETE Action method to delete FormMicroSection configuration
            </summary>
            <param name="request">Input parameter DeleteFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Delete.DeleteFormMicroSectionModel"/></param>
            <returns>If success should return newly added DeleteFormMicroSectionResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.Delete.DeleteFormMicroSectionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMicroSectionODataController">
            <summary>
            FormMicroSection Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMicroSection list
            </summary>
            <returns>An queryable object of FormMicroSectionModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.FormMicroSectionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMicroSectionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMicroSections that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMicroSectionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMicroSectionCommand.FormMicroSectionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMPositionActualController">
            <summary>
            FormMPositionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMPositionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMPositionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMPositionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualController.Add(QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Add.AddFormMPositionActualModel)">
            <summary>
            Async POST Action method to Add new FormMPositionActual configuration
            </summary>
            <param name="request">Input parameter AddFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Add.AddFormMPositionActualModel"/></param>
            <returns>If success should return newly added FormMPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.FormMPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Update.UpdateFormMPositionActualModel)">
            <summary>
            Async PUT Action method to update FormMPositionActual configuration
            </summary>
            <param name="id">FormMPositionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Update.UpdateFormMPositionActualModel"/></param>
            <returns>If success should return newly added FormMPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.FormMPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualController.Delete(QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Delete.DeleteFormMPositionActualModel)">
            <summary>
            Async DELETE Action method to delete FormMPositionActual configuration
            </summary>
            <param name="request">Input parameter DeleteFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Delete.DeleteFormMPositionActualModel"/></param>
            <returns>If success should return newly added DeleteFormMPositionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.Delete.DeleteFormMPositionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMPositionActualODataController">
            <summary>
            FormMPositionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMPositionActual list
            </summary>
            <returns>An queryable object of FormMPositionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.FormMPositionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMPositionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMPositionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionActualCommand.FormMPositionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMPositionController">
            <summary>
            FormMPosition Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormMPositionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormMPositionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormMPositionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionController.Add(QSS.eIQC.Handlers.Commands.FormMPositionCommand.Add.AddFormMPositionModel)">
            <summary>
            Async POST Action method to Add new FormMPosition configuration
            </summary>
            <param name="request">Input parameter AddFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.Add.AddFormMPositionModel"/></param>
            <returns>If success should return newly added FormMPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.FormMPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormMPositionCommand.Update.UpdateFormMPositionModel)">
            <summary>
            Async PUT Action method to update FormMPosition configuration
            </summary>
            <param name="id">FormMPosition Id as input in URL</param>
            <param name="request">Input parameter UpdateFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.Update.UpdateFormMPositionModel"/></param>
            <returns>If success should return newly added FormMPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.FormMPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionController.Delete(QSS.eIQC.Handlers.Commands.FormMPositionCommand.Delete.DeleteFormMPositionModel)">
            <summary>
            Async DELETE Action method to delete FormMPosition configuration
            </summary>
            <param name="request">Input parameter DeleteFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.Delete.DeleteFormMPositionModel"/></param>
            <returns>If success should return newly added DeleteFormMPositionResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.Delete.DeleteFormMPositionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormMPositionODataController">
            <summary>
            FormMPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormMPosition list
            </summary>
            <returns>An queryable object of FormMPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.FormMPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormMPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormMPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormMPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormMPositionCommand.FormMPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPackagingController">
            <summary>
            FormPackaging Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormPackagingController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormPackagingController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormPackagingController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingController.Add(QSS.eIQC.Handlers.Commands.FormPackagingCommand.Add.AddFormPackagingModel)">
            <summary>
            Async POST Action method to Add new FormPackaging configuration
            </summary>
            <param name="request">Input parameter AddFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.Add.AddFormPackagingModel"/></param>
            <returns>If success should return newly added FormPackagingModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.FormPackagingModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormPackagingCommand.Update.UpdateFormPackagingModel)">
            <summary>
            Async PUT Action method to update FormPackaging configuration
            </summary>
            <param name="id">FormPackaging Id as input in URL</param>
            <param name="request">Input parameter UpdateFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.Update.UpdateFormPackagingModel"/></param>
            <returns>If success should return newly added FormPackagingModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.FormPackagingModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingController.Delete(QSS.eIQC.Handlers.Commands.FormPackagingCommand.Delete.DeleteFormPackagingModel)">
            <summary>
            Async DELETE Action method to delete FormPackaging configuration
            </summary>
            <param name="request">Input parameter DeleteFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.Delete.DeleteFormPackagingModel"/></param>
            <returns>If success should return newly added DeleteFormPackagingResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.Delete.DeleteFormPackagingResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPackagingODataController">
            <summary>
            FormPackaging Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormPackaging list
            </summary>
            <returns>An queryable object of FormPackagingModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.FormPackagingModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPackagingODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormPackagings that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormPackagingModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormPackagingCommand.FormPackagingModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPartDateCodeController">
            <summary>
            FormPartDateCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormPartDateCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormPartDateCodeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormPartDateCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeController.Add(QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Add.AddFormPartDateCodeModel)">
            <summary>
            Async POST Action method to Add new FormPartDateCode configuration
            </summary>
            <param name="request">Input parameter AddFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Add.AddFormPartDateCodeModel"/></param>
            <returns>If success should return newly added FormPartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.FormPartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Update.UpdateFormPartDateCodeModel)">
            <summary>
            Async PUT Action method to update FormPartDateCode configuration
            </summary>
            <param name="id">FormPartDateCode Id as input in URL</param>
            <param name="request">Input parameter UpdateFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Update.UpdateFormPartDateCodeModel"/></param>
            <returns>If success should return newly added FormPartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.FormPartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeController.Delete(QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Delete.DeleteFormPartDateCodeModel)">
            <summary>
            Async DELETE Action method to delete FormPartDateCode configuration
            </summary>
            <param name="request">Input parameter DeleteFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Delete.DeleteFormPartDateCodeModel"/></param>
            <returns>If success should return newly added DeleteFormPartDateCodeResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.Delete.DeleteFormPartDateCodeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPartDateCodeODataController">
            <summary>
            FormPartDateCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormPartDateCode list
            </summary>
            <returns>An queryable object of FormPartDateCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.FormPartDateCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartDateCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormPartDateCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormPartDateCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormPartDateCodeCommand.FormPartDateCodeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController">
            <summary>
            FormPartSAPFailedQty Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormPartSAPFailedQtyController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController.Add(QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Add.AddFormPartSAPFailedQtyModel)">
            <summary>
            Async POST Action method to Add new FormPartSAPFailedQty configuration
            </summary>
            <param name="request">Input parameter AddFormPartSAPFailedQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Add.AddFormPartSAPFailedQtyModel"/></param>
            <returns>If success should return newly added FormPartSAPFailedQtyModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.FormPartSAPFailedQtyModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Update.UpdateFormPartSAPFailedQtyModel)">
            <summary>
            Async PUT Action method to update FormPartSAPFailedQty configuration
            </summary>
            <param name="id">FormPartSAPFailedQty Id as input in URL</param>
            <param name="request">Input parameter UpdateFormPartSAPFailedQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Update.UpdateFormPartSAPFailedQtyModel"/></param>
            <returns>If success should return newly added FormPartSAPFailedQtyModel <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.FormPartSAPFailedQtyModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyController.Delete(QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Delete.DeleteFormPartSAPFailedQtyModel)">
            <summary>
            Async DELETE Action method to delete FormPartSAPFailedQty configuration
            </summary>
            <param name="request">Input parameter DeleteFormPartSAPFailedQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Delete.DeleteFormPartSAPFailedQtyModel"/></param>
            <returns>If success should return newly added DeleteFormPartSAPFailedQtyResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.Delete.DeleteFormPartSAPFailedQtyResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyODataController">
            <summary>
            FormPartSAPFailedQty Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormPartSAPFailedQty list
            </summary>
            <returns>An queryable object of FormPartSAPFailedQtyModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.FormPartSAPFailedQtyModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormPartSAPFailedQtyODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormPartSAPFailedQtys that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormPartSAPFailedQtyModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormPartSAPFailedQtyCommand.FormPartSAPFailedQtyModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController">
            <summary>
            FormResultOrientedParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormResultOrientedParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormResultOrientedParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController.Add(QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Add.AddFormResultOrientedParameterModel)">
            <summary>
            Async POST Action method to Add new FormResultOrientedParameter configuration
            </summary>
            <param name="request">Input parameter AddFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Add.AddFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added FormResultOrientedParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.FormResultOrientedParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Update.UpdateFormResultOrientedParameterModel)">
            <summary>
            Async PUT Action method to update FormResultOrientedParameter configuration
            </summary>
            <param name="id">FormResultOrientedParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Update.UpdateFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added FormResultOrientedParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.FormResultOrientedParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterController.Delete(QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Delete.DeleteFormResultOrientedParameterModel)">
            <summary>
            Async DELETE Action method to delete FormResultOrientedParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Delete.DeleteFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added DeleteFormResultOrientedParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.Delete.DeleteFormResultOrientedParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormResultOrientedParameterODataController">
            <summary>
            FormResultOrientedParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormResultOrientedParameter list
            </summary>
            <returns>An queryable object of FormResultOrientedParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.FormResultOrientedParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormResultOrientedParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormResultOrientedParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormResultOrientedParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormResultOrientedParameterCommand.FormResultOrientedParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormSAPParameterController">
            <summary>
            FormSAPParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormSAPParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormSAPParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormSAPParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterController.Add(QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Add.AddFormSAPParameterModel)">
            <summary>
            Async POST Action method to Add new FormSAPParameter configuration
            </summary>
            <param name="request">Input parameter AddFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Add.AddFormSAPParameterModel"/></param>
            <returns>If success should return newly added FormSAPParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.FormSAPParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Update.UpdateFormSAPParameterModel)">
            <summary>
            Async PUT Action method to update FormSAPParameter configuration
            </summary>
            <param name="id">FormSAPParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Update.UpdateFormSAPParameterModel"/></param>
            <returns>If success should return newly added FormSAPParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.FormSAPParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterController.Delete(QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Delete.DeleteFormSAPParameterModel)">
            <summary>
            Async DELETE Action method to delete FormSAPParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Delete.DeleteFormSAPParameterModel"/></param>
            <returns>If success should return newly added DeleteFormSAPParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.Delete.DeleteFormSAPParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormSAPParameterODataController">
            <summary>
            FormSAPParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormSAPParameter list
            </summary>
            <returns>An queryable object of FormSAPParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.FormSAPParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSAPParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormSAPParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormSAPParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormSAPParameterCommand.FormSAPParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormSpecialParameterController">
            <summary>
            FormSpecialParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormSpecialParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormSpecialParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormSpecialParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterController.Add(QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Add.AddFormSpecialParameterModel)">
            <summary>
            Async POST Action method to Add new FormSpecialParameter configuration
            </summary>
            <param name="request">Input parameter AddFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Add.AddFormSpecialParameterModel"/></param>
            <returns>If success should return newly added FormSpecialParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.FormSpecialParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Update.UpdateFormSpecialParameterModel)">
            <summary>
            Async PUT Action method to update FormSpecialParameter configuration
            </summary>
            <param name="id">FormSpecialParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Update.UpdateFormSpecialParameterModel"/></param>
            <returns>If success should return newly added FormSpecialParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.FormSpecialParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterController.Delete(QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Delete.DeleteFormSpecialParameterModel)">
            <summary>
            Async DELETE Action method to delete FormSpecialParameter configuration
            </summary>
            <param name="request">Input parameter DeleteFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Delete.DeleteFormSpecialParameterModel"/></param>
            <returns>If success should return newly added DeleteFormSpecialParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.Delete.DeleteFormSpecialParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormSpecialParameterODataController">
            <summary>
            FormSpecialParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormSpecialParameter list
            </summary>
            <returns>An queryable object of FormSpecialParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.FormSpecialParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormSpecialParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormSpecialParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormSpecialParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormSpecialParameterCommand.FormSpecialParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormStatusController">
            <summary>
            FormStatus Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormStatusController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormStatusController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormStatusController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusController.Add(QSS.eIQC.Handlers.Commands.FormStatusCommand.Add.AddFormStatusModel)">
            <summary>
            Async POST Action method to Add new FormStatus configuration
            </summary>
            <param name="request">Input parameter AddFormStatusModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.Add.AddFormStatusModel"/></param>
            <returns>If success should return newly added FormStatusModel <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.FormStatusModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormStatusCommand.Update.UpdateFormStatusModel)">
            <summary>
            Async PUT Action method to update FormStatus configuration
            </summary>
            <param name="id">FormStatus Id as input in URL</param>
            <param name="request">Input parameter UpdateFormStatusModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.Update.UpdateFormStatusModel"/></param>
            <returns>If success should return newly added FormStatusModel <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.FormStatusModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusController.Delete(QSS.eIQC.Handlers.Commands.FormStatusCommand.Delete.DeleteFormStatusModel)">
            <summary>
            Async DELETE Action method to delete FormStatus configuration
            </summary>
            <param name="request">Input parameter DeleteFormStatusModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.Delete.DeleteFormStatusModel"/></param>
            <returns>If success should return newly added DeleteFormStatusResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.Delete.DeleteFormStatusResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormStatusODataController">
            <summary>
            FormStatus Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormStatus list
            </summary>
            <returns>An queryable object of FormStatusModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.FormStatusModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormStatusODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormStatuss that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormStatusModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormStatusCommand.FormStatusModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormTestReportController">
            <summary>
            FormTestReport Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormTestReportController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormTestReportController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormTestReportController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportController.Add(QSS.eIQC.Handlers.Commands.FormTestReportCommand.Add.AddFormTestReportModel)">
            <summary>
            Async POST Action method to Add new FormTestReport configuration
            </summary>
            <param name="request">Input parameter AddFormTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.Add.AddFormTestReportModel"/></param>
            <returns>If success should return newly added FormTestReportModel <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.FormTestReportModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormTestReportCommand.Update.UpdateFormTestReportModel)">
            <summary>
            Async PUT Action method to update FormTestReport configuration
            </summary>
            <param name="id">FormTestReport Id as input in URL</param>
            <param name="request">Input parameter UpdateFormTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.Update.UpdateFormTestReportModel"/></param>
            <returns>If success should return newly added FormTestReportModel <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.FormTestReportModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportController.Delete(QSS.eIQC.Handlers.Commands.FormTestReportCommand.Delete.DeleteFormTestReportModel)">
            <summary>
            Async DELETE Action method to delete FormTestReport configuration
            </summary>
            <param name="request">Input parameter DeleteFormTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.Delete.DeleteFormTestReportModel"/></param>
            <returns>If success should return newly added DeleteFormTestReportResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.Delete.DeleteFormTestReportResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormTestReportODataController">
            <summary>
            FormTestReport Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormTestReport list
            </summary>
            <returns>An queryable object of FormTestReportModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.FormTestReportModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTestReportODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormTestReports that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormTestReportModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormTestReportCommand.FormTestReportModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormTypeController">
            <summary>
            FormType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeController.Add(QSS.eIQC.Handlers.Commands.FormTypeCommand.Add.AddFormTypeModel)">
            <summary>
            Async POST Action method to Add new FormType configuration
            </summary>
            <param name="request">Input parameter AddFormTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.Add.AddFormTypeModel"/></param>
            <returns>If success should return newly added FormTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.FormTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormTypeCommand.Update.UpdateFormTypeModel)">
            <summary>
            Async PUT Action method to update FormType configuration
            </summary>
            <param name="id">FormType Id as input in URL</param>
            <param name="request">Input parameter UpdateFormTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.Update.UpdateFormTypeModel"/></param>
            <returns>If success should return newly added FormTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.FormTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeController.Delete(QSS.eIQC.Handlers.Commands.FormTypeCommand.Delete.DeleteFormTypeModel)">
            <summary>
            Async DELETE Action method to delete FormType configuration
            </summary>
            <param name="request">Input parameter DeleteFormTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.Delete.DeleteFormTypeModel"/></param>
            <returns>If success should return newly added DeleteFormTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.Delete.DeleteFormTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormTypeODataController">
            <summary>
            FormType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormType list
            </summary>
            <returns>An queryable object of FormTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.FormTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormTypeCommand.FormTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormVISController">
            <summary>
            FormVIS Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormVISController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormVISController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormVISController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISController.Add(QSS.eIQC.Handlers.Commands.FormVISCommand.Add.AddFormVISModel)">
            <summary>
            Async POST Action method to Add new FormVIS configuration
            </summary>
            <param name="request">Input parameter AddFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.Add.AddFormVISModel"/></param>
            <returns>If success should return newly added FormVISModel <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.FormVISModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormVISCommand.Update.UpdateFormVISModel)">
            <summary>
            Async PUT Action method to update FormVIS configuration
            </summary>
            <param name="id">FormVIS Id as input in URL</param>
            <param name="request">Input parameter UpdateFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.Update.UpdateFormVISModel"/></param>
            <returns>If success should return newly added FormVISModel <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.FormVISModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISController.Delete(QSS.eIQC.Handlers.Commands.FormVISCommand.Delete.DeleteFormVISModel)">
            <summary>
            Async DELETE Action method to delete FormVIS configuration
            </summary>
            <param name="request">Input parameter DeleteFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.Delete.DeleteFormVISModel"/></param>
            <returns>If success should return newly added DeleteFormVISResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.Delete.DeleteFormVISResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormVISODataController">
            <summary>
            FormVIS Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a FormVIS list
            </summary>
            <returns>An queryable object of FormVISModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.FormVISModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormVISODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of FormVISs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormVISModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormVISCommand.FormVISModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormController">
            <summary>
            Form Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.FormController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.FormController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of FormController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormController.Add(QSS.eIQC.Handlers.Commands.FormCommand.Add.AddFormModel)">
            <summary>
            Async POST Action method to Add new Form configuration
            </summary>
            <param name="request">Input parameter AddFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.Add.AddFormModel"/></param>
            <returns>If success should return newly added FormModel <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.FormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormController.Update(System.Int32,QSS.eIQC.Handlers.Commands.FormCommand.Update.UpdateFormModel)">
            <summary>
            Async PUT Action method to update Form configuration
            </summary>
            <param name="id">Form Id as input in URL</param>
            <param name="request">Input parameter UpdateFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.Update.UpdateFormModel"/></param>
            <returns>If success should return newly added FormModel <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.FormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormController.Delete(QSS.eIQC.Handlers.Commands.FormCommand.Delete.DeleteFormModel)">
            <summary>
            Async DELETE Action method to delete Form configuration
            </summary>
            <param name="request">Input parameter DeleteFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.Delete.DeleteFormModel"/></param>
            <returns>If success should return newly added DeleteFormResponse <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.Delete.DeleteFormResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.FormODataController">
            <summary>
            Form Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Form list
            </summary>
            <returns>An queryable object of FormModel, <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.FormModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FormODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Form that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of FormModel,  <see cref="T:QSS.eIQC.Handlers.Commands.FormCommand.FormModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GoodsReceiveUserController">
            <summary>
            GoodsReceiveUser Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.GoodsReceiveUserController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.GoodsReceiveUserController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of GoodsReceiveUserController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserController.Add(QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Add.AddGoodsReceiveUserModel)">
            <summary>
            Async POST Action method to Add new GoodsReceiveUser configuration
            </summary>
            <param name="request">Input parameter AddGoodsReceiveUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Add.AddGoodsReceiveUserModel"/></param>
            <returns>If success should return newly added GoodsReceiveUserModel <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.GoodsReceiveUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserController.Update(System.Int32,QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Update.UpdateGoodsReceiveUserModel)">
            <summary>
            Async PUT Action method to update GoodsReceiveUser configuration
            </summary>
            <param name="id">GoodsReceiveUser Id as input in URL</param>
            <param name="request">Input parameter UpdateGoodsReceiveUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Update.UpdateGoodsReceiveUserModel"/></param>
            <returns>If success should return newly added GoodsReceiveUserModel <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.GoodsReceiveUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserController.Delete(QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Delete.DeleteGoodsReceiveUserModel)">
            <summary>
            Async DELETE Action method to delete GoodsReceiveUser configuration
            </summary>
            <param name="request">Input parameter DeleteGoodsReceiveUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Delete.DeleteGoodsReceiveUserModel"/></param>
            <returns>If success should return newly added DeleteGoodsReceiveUserResponse <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.Delete.DeleteGoodsReceiveUserResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GoodsReceiveUserODataController">
            <summary>
            GoodsReceiveUser Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a GoodsReceiveUser list
            </summary>
            <returns>An queryable object of GoodsReceiveUserModel, <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.GoodsReceiveUserModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GoodsReceiveUserODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of GoodsReceiveUsers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of GoodsReceiveUserModel,  <see cref="T:QSS.eIQC.Handlers.Commands.GoodsReceiveUserCommand.GoodsReceiveUserModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GroupController">
            <summary>
            Group Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.GroupController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.GroupController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of GroupController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupController.Add(QSS.eIQC.Handlers.Commands.GroupCommand.Add.AddGroupModel)">
            <summary>
            Async POST Action method to Add new Group configuration
            </summary>
            <param name="request">Input parameter AddGroupModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.Add.AddGroupModel"/></param>
            <returns>If success should return newly added GroupModel <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.GroupModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupController.Update(System.Int32,QSS.eIQC.Handlers.Commands.GroupCommand.Update.UpdateGroupModel)">
            <summary>
            Async PUT Action method to update Group configuration
            </summary>
            <param name="id">Group Id as input in URL</param>
            <param name="request">Input parameter UpdateGroupModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.Update.UpdateGroupModel"/></param>
            <returns>If success should return newly added GroupModel <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.GroupModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupController.Delete(QSS.eIQC.Handlers.Commands.GroupCommand.Delete.DeleteGroupModel)">
            <summary>
            Async DELETE Action method to delete Group configuration
            </summary>
            <param name="request">Input parameter DeleteGroupModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.Delete.DeleteGroupModel"/></param>
            <returns>If success should return newly added DeleteGroupResponse <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.Delete.DeleteGroupResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GroupODataController">
            <summary>
            Group Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Group list
            </summary>
            <returns>An queryable object of GroupModel, <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.GroupModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GroupODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Groups that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of GroupModel,  <see cref="T:QSS.eIQC.Handlers.Commands.GroupCommand.GroupModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSSAPResultController">
            <summary>
            GRSSAPResult Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.GRSSAPResultController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.GRSSAPResultController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of GRSSAPResultController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultController.Add(QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Add.AddGRSSAPResultModel)">
            <summary>
            Async POST Action method to Add new GRSSAPResult configuration
            </summary>
            <param name="request">Input parameter AddGRSSAPResultModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Add.AddGRSSAPResultModel"/></param>
            <returns>If success should return newly added GRSSAPResultModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.GRSSAPResultModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultController.Update(System.Int32,QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Update.UpdateGRSSAPResultModel)">
            <summary>
            Async PUT Action method to update GRSSAPResult configuration
            </summary>
            <param name="id">GRSSAPResult Id as input in URL</param>
            <param name="request">Input parameter UpdateGRSSAPResultModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Update.UpdateGRSSAPResultModel"/></param>
            <returns>If success should return newly added GRSSAPResultModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.GRSSAPResultModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultController.Delete(QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Delete.DeleteGRSSAPResultModel)">
            <summary>
            Async DELETE Action method to delete GRSSAPResult configuration
            </summary>
            <param name="request">Input parameter DeleteGRSSAPResultModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Delete.DeleteGRSSAPResultModel"/></param>
            <returns>If success should return newly added DeleteGRSSAPResultResponse <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.Delete.DeleteGRSSAPResultResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSSAPResultODataController">
            <summary>
            GRSSAPResult Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a GRSSAPResult list
            </summary>
            <returns>An queryable object of GRSSAPResultModel, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.GRSSAPResultModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSAPResultODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of GRSSAPResults that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of GRSSAPResultModel,  <see cref="T:QSS.eIQC.Handlers.Commands.GRSSAPResultCommand.GRSSAPResultModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSSupplierFormController">
            <summary>
            GRSSupplierForm Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.GRSSupplierFormController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.GRSSupplierFormController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of GRSSupplierFormController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormController.Add(QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Add.AddGRSSupplierFormModel)">
            <summary>
            Async POST Action method to Add new GRSSupplierForm configuration
            </summary>
            <param name="request">Input parameter AddGRSSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Add.AddGRSSupplierFormModel"/></param>
            <returns>If success should return newly added GRSSupplierFormModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.GRSSupplierFormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormController.Update(System.Int32,QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Update.UpdateGRSSupplierFormModel)">
            <summary>
            Async PUT Action method to update GRSSupplierForm configuration
            </summary>
            <param name="id">GRSSupplierForm Id as input in URL</param>
            <param name="request">Input parameter UpdateGRSSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Update.UpdateGRSSupplierFormModel"/></param>
            <returns>If success should return newly added GRSSupplierFormModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.GRSSupplierFormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormController.Delete(QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Delete.DeleteGRSSupplierFormModel)">
            <summary>
            Async DELETE Action method to delete GRSSupplierForm configuration
            </summary>
            <param name="request">Input parameter DeleteGRSSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Delete.DeleteGRSSupplierFormModel"/></param>
            <returns>If success should return newly added DeleteGRSSupplierFormResponse <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.Delete.DeleteGRSSupplierFormResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSSupplierFormODataController">
            <summary>
            GRSSupplierForm Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a GRSSupplierForm list
            </summary>
            <returns>An queryable object of GRSSupplierFormModel, <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.GRSSupplierFormModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSSupplierFormODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of GRSSupplierForm that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of GRSSupplierFormModel,  <see cref="T:QSS.eIQC.Handlers.Commands.GRSSupplierFormCommand.GRSSupplierFormModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSController">
            <summary>
            GRS Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.GRSController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.GRSController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of GRSController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSController.Add(QSS.eIQC.Handlers.Commands.GRSCommand.Add.AddGRSModel)">
            <summary>
            Async POST Action method to Add new GRS configuration
            </summary>
            <param name="request">Input parameter AddGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.Add.AddGRSModel"/></param>
            <returns>If success should return newly added GRSModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.GRSModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSController.Update(System.Int32,QSS.eIQC.Handlers.Commands.GRSCommand.Update.UpdateGRSModel)">
            <summary>
            Async PUT Action method to update GRS configuration
            </summary>
            <param name="id">GRS Id as input in URL</param>
            <param name="request">Input parameter UpdateGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.Update.UpdateGRSModel"/></param>
            <returns>If success should return newly added GRSModel <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.GRSModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSController.Delete(QSS.eIQC.Handlers.Commands.GRSCommand.Delete.DeleteGRSModel)">
            <summary>
            Async DELETE Action method to delete GRS configuration
            </summary>
            <param name="request">Input parameter DeleteGRSModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.Delete.DeleteGRSModel"/></param>
            <returns>If success should return newly added DeleteGRSResponse <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.Delete.DeleteGRSResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.GRSODataController">
            <summary>
            GRS Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a GRS list
            </summary>
            <returns>An queryable object of GRSModel, <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.GRSModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.GRSODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of GRSs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of GRSModel,  <see cref="T:QSS.eIQC.Handlers.Commands.GRSCommand.GRSModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionToolsTypeController">
            <summary>
            InspectionToolsType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.InspectionToolsTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.InspectionToolsTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of InspectionToolsTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeController.Add(QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Add.AddInspectionToolsTypeModel)">
            <summary>
            Async POST Action method to Add new InspectionToolsType configuration
            </summary>
            <param name="request">Input parameter AddInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Add.AddInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added InspectionToolsTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.InspectionToolsTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Update.UpdateInspectionToolsTypeModel)">
            <summary>
            Async PUT Action method to update InspectionToolsType configuration
            </summary>
            <param name="id">InspectionToolsType Id as input in URL</param>
            <param name="request">Input parameter UpdateInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Update.UpdateInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added InspectionToolsTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.InspectionToolsTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeController.Delete(QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Delete.DeleteInspectionToolsTypeModel)">
            <summary>
            Async DELETE Action method to delete InspectionToolsType configuration
            </summary>
            <param name="request">Input parameter DeleteInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Delete.DeleteInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added DeleteInspectionToolsTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.Delete.DeleteInspectionToolsTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionToolsTypeODataController">
            <summary>
            InspectionToolsType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a InspectionToolsType list
            </summary>
            <returns>An queryable object of InspectionToolsTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.InspectionToolsTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of InspectionToolsTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of InspectionToolsTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsTypeCommand.InspectionToolsTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionToolsController">
            <summary>
            InspectionTools Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.InspectionToolsController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.InspectionToolsController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of InspectionToolsController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsController.Add(QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Add.AddInspectionToolsModel)">
            <summary>
            Async POST Action method to Add new InspectionTools configuration
            </summary>
            <param name="request">Input parameter AddInspectionToolsModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Add.AddInspectionToolsModel"/></param>
            <returns>If success should return newly added InspectionToolsModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.InspectionToolsModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsController.Update(System.Int32,QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Update.UpdateInspectionToolsModel)">
            <summary>
            Async PUT Action method to update InspectionTools configuration
            </summary>
            <param name="id">InspectionTools Id as input in URL</param>
            <param name="request">Input parameter UpdateInspectionToolsModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Update.UpdateInspectionToolsModel"/></param>
            <returns>If success should return newly added InspectionToolsModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.InspectionToolsModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsController.Delete(QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Delete.DeleteInspectionToolsModel)">
            <summary>
            Async DELETE Action method to delete InspectionTools configuration
            </summary>
            <param name="request">Input parameter DeleteInspectionToolsModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Delete.DeleteInspectionToolsModel"/></param>
            <returns>If success should return newly added DeleteInspectionToolsResponse <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.Delete.DeleteInspectionToolsResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionToolsODataController">
            <summary>
            InspectionTools Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a InspectionTools list
            </summary>
            <returns>An queryable object of InspectionToolsModel, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.InspectionToolsModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of InspectionToolss that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of InspectionToolsModel,  <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.InspectionToolsModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionToolsODataController.GetActiveData(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a InspectionTools list
            </summary>
            <returns>An queryable object of InspectionToolsModel, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionToolsCommand.InspectionToolsModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionController">
            <summary>
            Inspection Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.InspectionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.InspectionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of InspectionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionController.Add(QSS.eIQC.Handlers.Commands.InspectionCommand.Add.AddInspectionModel)">
            <summary>
            Async POST Action method to Add new Inspection configuration
            </summary>
            <param name="request">Input parameter AddInspectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.Add.AddInspectionModel"/></param>
            <returns>If success should return newly added InspectionModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.InspectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.InspectionCommand.Update.UpdateInspectionModel)">
            <summary>
            Async PUT Action method to update Inspection configuration
            </summary>
            <param name="id">Inspection Id as input in URL</param>
            <param name="request">Input parameter UpdateInspectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.Update.UpdateInspectionModel"/></param>
            <returns>If success should return newly added InspectionModel <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.InspectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionController.Delete(QSS.eIQC.Handlers.Commands.InspectionCommand.Delete.DeleteInspectionModel)">
            <summary>
            Async DELETE Action method to delete Inspection configuration
            </summary>
            <param name="request">Input parameter DeleteInspectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.Delete.DeleteInspectionModel"/></param>
            <returns>If success should return newly added DeleteInspectionResponse <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.Delete.DeleteInspectionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InspectionODataController">
            <summary>
            Inspection Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Inspection list
            </summary>
            <returns>An queryable object of InspectionModel, <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.InspectionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Inspections that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of InspectionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.InspectionCommand.InspectionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InstrumentTypeController">
            <summary>
            InstrumentType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.InstrumentTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.InstrumentTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of InstrumentTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeController.Add(QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Add.AddInstrumentTypeModel)">
            <summary>
            Async POST Action method to Add new InstrumentType configuration
            </summary>
            <param name="request">Input parameter AddInstrumentTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Add.AddInstrumentTypeModel"/></param>
            <returns>If success should return newly added InstrumentTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.InstrumentTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Update.UpdateInstrumentTypeModel)">
            <summary>
            Async PUT Action method to update InstrumentType configuration
            </summary>
            <param name="id">InstrumentType Id as input in URL</param>
            <param name="request">Input parameter UpdateInstrumentTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Update.UpdateInstrumentTypeModel"/></param>
            <returns>If success should return newly added InstrumentTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.InstrumentTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeController.Delete(QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Delete.DeleteInstrumentTypeModel)">
            <summary>
            Async DELETE Action method to delete InstrumentType configuration
            </summary>
            <param name="request">Input parameter DeleteInstrumentTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Delete.DeleteInstrumentTypeModel"/></param>
            <returns>If success should return newly added DeleteInstrumentTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.Delete.DeleteInstrumentTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InstrumentTypeODataController">
            <summary>
            InstrumentType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a InstrumentType list
            </summary>
            <returns>An queryable object of InstrumentTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.InstrumentTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of InstrumentTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of InstrumentTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentTypeCommand.InstrumentTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InstrumentController">
            <summary>
            Instrument Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.InstrumentController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.InstrumentController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of InstrumentController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentController.Add(QSS.eIQC.Handlers.Commands.InstrumentCommand.Add.AddInstrumentModel)">
            <summary>
            Async POST Action method to Add new Instrument configuration
            </summary>
            <param name="request">Input parameter AddInstrumentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.Add.AddInstrumentModel"/></param>
            <returns>If success should return newly added InstrumentModel <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.InstrumentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentController.Update(System.Int32,QSS.eIQC.Handlers.Commands.InstrumentCommand.Update.UpdateInstrumentModel)">
            <summary>
            Async PUT Action method to update Instrument configuration
            </summary>
            <param name="id">Instrument Id as input in URL</param>
            <param name="request">Input parameter UpdateInstrumentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.Update.UpdateInstrumentModel"/></param>
            <returns>If success should return newly added InstrumentModel <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.InstrumentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentController.Delete(QSS.eIQC.Handlers.Commands.InstrumentCommand.Delete.DeleteInstrumentModel)">
            <summary>
            Async DELETE Action method to delete Instrument configuration
            </summary>
            <param name="request">Input parameter DeleteInstrumentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.Delete.DeleteInstrumentModel"/></param>
            <returns>If success should return newly added DeleteInstrumentResponse <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.Delete.DeleteInstrumentResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.InstrumentODataController">
            <summary>
            Instrument Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Instrument list
            </summary>
            <returns>An queryable object of InstrumentModel, <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.InstrumentModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InstrumentODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Instruments that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of InstrumentModel,  <see cref="T:QSS.eIQC.Handlers.Commands.InstrumentCommand.InstrumentModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.Location.LocationController">
            <summary>
            Location Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.Location.LocationController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Location.LocationController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.Location.LocationController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of LocationController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Location.LocationController.Add(QSS.eIQC.Handlers.Commands.LocationCommand.Add.AddLocationModel)">
            <summary>
            Async POST Action method to Add new Location configuration
            </summary>
            <param name="request">Input parameter AddLocationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.Add.AddLocationModel"/></param>
            <returns>If success should return newly added LocationModel <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.LocationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Location.LocationController.Update(System.Int32,QSS.eIQC.Handlers.Commands.LocationCommand.Update.UpdateLocationModel)">
            <summary>
            Async PUT Action method to update Location configuration
            </summary>
            <param name="id">Location Id as input in URL</param>
            <param name="request">Input parameter UpdateLocationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.Update.UpdateLocationModel"/></param>
            <returns>If success should return newly added LocationModel <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.LocationModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Location.LocationController.Delete(QSS.eIQC.Handlers.Commands.LocationCommand.Delete.DeleteLocationModel)">
            <summary>
            Async DELETE Action method to delete Location configuration
            </summary>
            <param name="request">Input parameter DeleteLocationModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.Delete.DeleteLocationModel"/></param>
            <returns>If success should return newly added DeleteLocationResponse <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.Delete.DeleteLocationResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.LocationODataController">
            <summary>
            Location Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LocationODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LocationODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a Location list
            </summary>
            <returns>An queryable object of _LocationModel, <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.LocationModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LocationODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Locations that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _LocationModel,  <see cref="T:QSS.eIQC.Handlers.Commands.LocationCommand.LocationModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.LotInspectionQtyController">
            <summary>
            LotInspectionQty Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.LotInspectionQtyController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.LotInspectionQtyController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of LotInspectionQtyController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyController.Add(QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Add.AddLotInspectionQtyModel)">
            <summary>
            Async POST Action method to Add new LotInspectionQty configuration
            </summary>
            <param name="request">Input parameter AddLotInspectionQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Add.AddLotInspectionQtyModel"/></param>
            <returns>If success should return newly added LotInspectionQtyModel <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.LotInspectionQtyModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyController.Update(System.Int32,QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Update.UpdateLotInspectionQtyModel)">
            <summary>
            Async PUT Action method to update LotInspectionQty configuration
            </summary>
            <param name="id">LotInspectionQty Id as input in URL</param>
            <param name="request">Input parameter UpdateLotInspectionQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Update.UpdateLotInspectionQtyModel"/></param>
            <returns>If success should return newly added LotInspectionQtyModel <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.LotInspectionQtyModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyController.Delete(QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Delete.DeleteLotInspectionQtyModel)">
            <summary>
            Async DELETE Action method to delete LotInspectionQty configuration
            </summary>
            <param name="request">Input parameter DeleteLotInspectionQtyModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Delete.DeleteLotInspectionQtyModel"/></param>
            <returns>If success should return newly added DeleteLotInspectionQtyResponse <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.Delete.DeleteLotInspectionQtyResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.LotInspectionQtyODataController">
            <summary>
            LotInspectionQty Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a LotInspectionQty list
            </summary>
            <returns>An queryable object of LotInspectionQtyModel, <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.LotInspectionQtyModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.LotInspectionQtyODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of LotInspectionQtys that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of LotInspectionQtyModel,  <see cref="T:QSS.eIQC.Handlers.Commands.LotInspectionQtyCommand.LotInspectionQtyModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.MaterialGroup.MaterialGroupController">
            <summary>
            MaterialGroup Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.MaterialGroup.MaterialGroupController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.MaterialGroup.MaterialGroupController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.MaterialGroup.MaterialGroupController},MediatR.IMediator,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of MaterialGroupController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="syncSAPDataHelper">Sync SAP Data Helper, <see cref="T:QSS.eIQC.TM1Sync.Interface.ISyncTM1DataHelper"/></param>
            <param name="sapHanaClient">Sync SAP Data Helper, <see cref="T:QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.MaterialGroupODataController">
            <summary>
            MaterialGroup Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.MaterialGroupODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.MaterialGroupODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of MaterialGroupModel, <see cref="T:QSS.eIQC.Handlers.Commands.MaterialGroupCommand.MaterialGroupModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.MaterialGroupODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of MaterialGroup that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of MaterialGroupModel,  <see cref="T:QSS.eIQC.Handlers.Commands.MaterialGroupCommand.MaterialGroupModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterCategoryController">
            <summary>
            ParameterCategory Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ParameterCategoryController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ParameterCategoryController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ParameterCategoryController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryController.Add(QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Add.AddParameterCategoryModel)">
            <summary>
            Async POST Action method to Add new ParameterCategory configuration
            </summary>
            <param name="request">Input parameter AddParameterCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Add.AddParameterCategoryModel"/></param>
            <returns>If success should return newly added ParameterCategoryModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.ParameterCategoryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Update.UpdateParameterCategoryModel)">
            <summary>
            Async PUT Action method to update ParameterCategory configuration
            </summary>
            <param name="id">ParameterCategory Id as input in URL</param>
            <param name="request">Input parameter UpdateParameterCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Update.UpdateParameterCategoryModel"/></param>
            <returns>If success should return newly added ParameterCategoryModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.ParameterCategoryModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryController.Delete(QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Delete.DeleteParameterCategoryModel)">
            <summary>
            Async DELETE Action method to delete ParameterCategory configuration
            </summary>
            <param name="request">Input parameter DeleteParameterCategoryModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Delete.DeleteParameterCategoryModel"/></param>
            <returns>If success should return newly added DeleteParameterCategoryResponse <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.Delete.DeleteParameterCategoryResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterCategoryODataController">
            <summary>
            ParameterCategory Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ParameterCategory list
            </summary>
            <returns>An queryable object of ParameterCategoryModel, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.ParameterCategoryModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterCategoryODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterCategorys that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ParameterCategoryModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterCategoryCommand.ParameterCategoryModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ParameterManagement Type list
            </summary>
            <returns>An queryable object of ParameterManagementTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementTypeCommand.ParameterManagementTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterManagements that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ParameterManagementTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementTypeCommand.ParameterManagementTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterManagementController">
            <summary>
            ParameterManagement Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ParameterManagementController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ParameterManagementController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ParameterManagementController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="!:IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementController.Add(QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Add.AddParameterManagementModel)">
            <summary>
            Async POST Action method to Add new ParameterManagement configuration
            </summary>
            <param name="request">Input parameter AddParameterManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Add.AddParameterManagementModel"/></param>
            <returns>If success should return newly added ParameterManagementModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.ParameterManagementModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Update.UpdateParameterManagementModel)">
            <summary>
            Async PUT Action method to update ParameterManagement configuration
            </summary>
            <param name="id">ParameterManagement Id as input in URL</param>
            <param name="request">Input parameter UpdateParameterManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Update.UpdateParameterManagementModel"/></param>
            <returns>If success should return newly added ParameterManagementModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.ParameterManagementModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementController.Delete(QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Delete.DeleteParameterManagementModel)">
            <summary>
            Async DELETE Action method to delete ParameterManagement configuration
            </summary>
            <param name="request">Input parameter DeleteParameterManagementModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Delete.DeleteParameterManagementModel"/></param>
            <returns>If success should return newly added DeleteParameterManagementResponse <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.Delete.DeleteParameterManagementResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterManagementODataController">
            <summary>
            ParameterManagement Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ParameterManagement list
            </summary>
            <returns>An queryable object of ParameterManagementModel, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.ParameterManagementModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterManagements that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ParameterManagementModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.ParameterManagementModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterManagementODataController.GetParameterManagementDataByCommodityId(System.Int32,System.String,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterManagements that matches with the input
            </summary>
            <param name="commodityId">Takes input commodityId as a key</param>
            <param name="pcNames"></param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ParameterManagementModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterManagementCommand.ParameterManagementModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterTypeCodeController">
            <summary>
            ParameterTypeCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ParameterTypeCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ParameterTypeCodeController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ParameterTypeCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeController.Add(QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Add.AddParameterTypeCodeModel)">
            <summary>
            Async POST Action method to Add new ParameterTypeCode configuration
            </summary>
            <param name="request">Input parameter AddParameterTypeCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Add.AddParameterTypeCodeModel"/></param>
            <returns>If success should return newly added ParameterTypeCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.ParameterTypeCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Update.UpdateParameterTypeCodeModel)">
            <summary>
            Async PUT Action method to update ParameterTypeCode configuration
            </summary>
            <param name="id">ParameterTypeCode Id as input in URL</param>
            <param name="request">Input parameter UpdateParameterTypeCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Update.UpdateParameterTypeCodeModel"/></param>
            <returns>If success should return newly added ParameterTypeCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.ParameterTypeCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeController.Delete(QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Delete.DeleteParameterTypeCodeModel)">
            <summary>
            Async DELETE Action method to delete ParameterTypeCode configuration
            </summary>
            <param name="request">Input parameter DeleteParameterTypeCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Delete.DeleteParameterTypeCodeModel"/></param>
            <returns>If success should return newly added DeleteParameterTypeCodeResponse <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.Delete.DeleteParameterTypeCodeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterTypeCodeODataController">
            <summary>
            ParameterTypeCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ParameterTypeCode list
            </summary>
            <returns>An queryable object of ParameterTypeCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.ParameterTypeCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterTypeCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ParameterTypeCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCodeCommand.ParameterTypeCodeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterTypeController">
            <summary>
            ParameterType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ParameterTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ParameterTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ParameterTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeController.Add(QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Add.AddParameterTypeModel)">
            <summary>
            Async POST Action method to Add new ParameterType configuration
            </summary>
            <param name="request">Input parameter AddParameterTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Add.AddParameterTypeModel"/></param>
            <returns>If success should return newly added ParameterTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.ParameterTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Update.UpdateParameterTypeModel)">
            <summary>
            Async PUT Action method to update ParameterType configuration
            </summary>
            <param name="id">ParameterType Id as input in URL</param>
            <param name="request">Input parameter UpdateParameterTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Update.UpdateParameterTypeModel"/></param>
            <returns>If success should return newly added ParameterTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.ParameterTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeController.Delete(QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Delete.DeleteParameterTypeModel)">
            <summary>
            Async DELETE Action method to delete ParameterType configuration
            </summary>
            <param name="request">Input parameter DeleteParameterTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Delete.DeleteParameterTypeModel"/></param>
            <returns>If success should return newly added DeleteParameterTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.Delete.DeleteParameterTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ParameterTypeODataController">
            <summary>
            ParameterType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ParameterType list
            </summary>
            <returns>An queryable object of ParameterTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.ParameterTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ParameterTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ParameterTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of ParameterTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ParameterTypeCommand.ParameterTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartBowTwistParameterController">
            <summary>
            PartBowTwistParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PartBowTwistParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PartBowTwistParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PartBowTwistParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterController.Add(QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Add.AddPartInspectionBowTwistParameterModel)">
            <summary>
            Async POST Action method to Add new PartBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter AddPartBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Add.AddPartInspectionBowTwistParameterModel"/></param>
            <returns>If success should return newly added PartBowTwistParameterModel <see cref="!:PartBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Update.UpdatePartInspectionBowTwistParameterModel)">
            <summary>
            Async PUT Action method to update PartBowTwistParameter configuration
            </summary>
            <param name="id">PartBowTwistParameter Id as input in URL</param>
            <param name="request">Input parameter UpdatePartBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Update.UpdatePartInspectionBowTwistParameterModel"/></param>
            <returns>If success should return newly added PartBowTwistParameterModel <see cref="!:PartBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterController.Delete(QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Delete.DeletePartInspectionBowTwistParameterModel)">
            <summary>
            Async DELETE Action method to delete PartBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter DeletePartBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Delete.DeletePartInspectionBowTwistParameterModel"/></param>
            <returns>If success should return newly added DeletePartBowTwistParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.Delete.DeletePartInspectionBowTwistParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartBowTwistParameterODataController">
            <summary>
            PartBowTwistParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartBowTwistParameter list
            </summary>
            <returns>An queryable object of PartBowTwistParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.PartInspectionBowTwistParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartBowTwistParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartBowTwistParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartBowTwistParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartBowTwistParameterCommand.PartInspectionBowTwistParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartCAFController">
            <summary>
            PartCAF Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PartCAFController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PartCAFController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PartCAFController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFController.Add(QSS.eIQC.Handlers.Commands.PartCAFCommand.Add.AddPartCAFModel)">
            <summary>
            Async POST Action method to Add new PartCAF configuration
            </summary>
            <param name="request">Input parameter AddPartCAFModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.Add.AddPartCAFModel"/></param>
            <returns>If success should return newly added PartCAFModel <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.PartCAFModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PartCAFCommand.Update.UpdatePartCAFModel)">
            <summary>
            Async PUT Action method to update PartCAF configuration
            </summary>
            <param name="id">PartCAF Id as input in URL</param>
            <param name="request">Input parameter UpdatePartCAFModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.Update.UpdatePartCAFModel"/></param>
            <returns>If success should return newly added PartCAFModel <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.PartCAFModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFController.Delete(QSS.eIQC.Handlers.Commands.PartCAFCommand.Delete.DeletePartCAFModel)">
            <summary>
            Async DELETE Action method to delete PartCAF configuration
            </summary>
            <param name="request">Input parameter DeletePartCAFModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.Delete.DeletePartCAFModel"/></param>
            <returns>If success should return newly added DeletePartCAFResponse <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.Delete.DeletePartCAFResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartCAFODataController">
            <summary>
            PartCAF Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartCAF list
            </summary>
            <returns>An queryable object of PartCAFModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.PartCAFModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCAFODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartCAFs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            /// <param name="oDataQueryOptions"></param>
            <returns>An queryable object of PartCAFModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartCAFCommand.PartCAFModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartCountParameterODataController">
            <summary>
            PartCountParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCountParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCountParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartCountParameter list
            </summary>
            <returns>An queryable object of PartCountParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartCountParameterCommand.PartCountParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartCountParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartCountParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartCountParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartCountParameterCommand.PartCountParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartDateCodeController">
            <summary>
            PartDateCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PartDateCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PartDateCodeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PartDateCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeController.Add(QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Add.AddPartDateCodeModel)">
            <summary>
            Async POST Action method to Add new PartDateCode configuration
            </summary>
            <param name="request">Input parameter AddPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Add.AddPartDateCodeModel"/></param>
            <returns>If success should return newly added PartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.PartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Update.UpdatePartDateCodeModel)">
            <summary>
            Async PUT Action method to update PartDateCode configuration
            </summary>
            <param name="id">PartDateCode Id as input in URL</param>
            <param name="request">Input parameter UpdatePartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Update.UpdatePartDateCodeModel"/></param>
            <returns>If success should return newly added PartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.PartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeController.Delete(QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Delete.DeletePartDateCodeModel)">
            <summary>
            Async DELETE Action method to delete PartDateCode configuration
            </summary>
            <param name="request">Input parameter DeletePartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Delete.DeletePartDateCodeModel"/></param>
            <returns>If success should return newly added DeletePartDateCodeResponse <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.Delete.DeletePartDateCodeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartDateCodeODataController">
            <summary>
            PartDateCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartDateCode list
            </summary>
            <returns>An queryable object of PartDateCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.PartDateCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDateCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartDateCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartDateCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartDateCodeCommand.PartDateCodeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartDimensionController">
            <summary>
            PartDimension Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PartDimensionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PartDimensionController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PartDimensionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionController.Add(QSS.eIQC.Handlers.Commands.PartDimensionCommand.Add.AddPartDimensionModel)">
            <summary>
            Async POST Action method to Add new PartDimension configuration
            </summary>
            <param name="request">Input parameter AddPartDimensionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.Add.AddPartDimensionModel"/></param>
            <returns>If success should return newly added PartDimensionModel <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.PartDimensionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PartDimensionCommand.Update.UpdatePartDimensionModel)">
            <summary>
            Async PUT Action method to update PartDimension configuration
            </summary>
            <param name="id">PartDimension Id as input in URL</param>
            <param name="request">Input parameter UpdatePartDimensionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.Update.UpdatePartDimensionModel"/></param>
            <returns>If success should return newly added PartDimensionModel <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.PartDimensionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionController.Delete(QSS.eIQC.Handlers.Commands.PartDimensionCommand.Delete.DeletePartDimensionModel)">
            <summary>
            Async DELETE Action method to delete PartDimension configuration
            </summary>
            <param name="request">Input parameter DeletePartDimensionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.Delete.DeletePartDimensionModel"/></param>
            <returns>If success should return newly added DeletePartDimensionResponse <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.Delete.DeletePartDimensionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartDimensionODataController">
            <summary>
            PartDimension Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartDimension list
            </summary>
            <returns>An queryable object of PartDimensionModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.PartDimensionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartDimensionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartDimensions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartDimensionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartDimensionCommand.PartDimensionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartInspectionDrawingODataController">
            <summary>
            PartInspectionDrawing Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionDrawingODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionDrawingODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartInspectionDrawing list
            </summary>
            <returns>An queryable object of PartInspectionDrawingModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartInspectionDrawingCommand.PartInspectionDrawingModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionDrawingODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartInspectionDrawings that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartInspectionDrawingModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartInspectionDrawingCommand.PartInspectionDrawingModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartInspectionSpecificationODataController">
            <summary>
            PartInspectionSpecification Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionSpecificationODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionSpecificationODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartInspectionSpecification list
            </summary>
            <returns>An queryable object of PartInspectionSpecificationModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartInspectionSpecificationCommand.PartInspectionSpecificationModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartInspectionSpecificationODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartInspectionSpecifications that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartInspectionSpecificationModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartInspectionSpecificationCommand.PartInspectionSpecificationModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartTestReportParameterODataController">
            <summary>
            PartTestReportParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartTestReportParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartTestReportParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PartTestReportParameter list
            </summary>
            <returns>An queryable object of PartTestReportParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartTestReportParameterCommand.PartTestReportParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartTestReportParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PartTestReportParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartTestReportParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartTestReportParameterCommand.PartTestReportParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartController">
            <summary>
            Part Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PartController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PartController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient,QSS.eIQC.DataAccess.Repositories.IPartRepository)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PartController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartController.Add(QSS.eIQC.Handlers.Commands.PartCommand.Add.AddPartModel)">
            <summary>
            Async POST Action method to Add new Part configuration
            </summary>
            <param name="request">Input parameter AddPartModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.Add.AddPartModel"/></param>
            <returns>If success should return newly added PartModel <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.PartModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PartCommand.Update.UpdatePartModel)">
            <summary>
            Async PUT Action method to update Part configuration
            </summary>
            <param name="id">Part Id as input in URL</param>
            <param name="request">Input parameter UpdatePartModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.Update.UpdatePartModel"/></param>
            <returns>If success should return newly added PartModel <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.PartModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartMockSAPODataController">
            <summary>
            Part Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartMockSAPODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartMockSAPODataController.GetPartData(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of PartModel, <see cref="T:QSS.eIQC.SAPHana.Services.Models.SAPMockPartModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartODataController">
            <summary>
            Part Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of PartModel, <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.PartModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Parts that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PartModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PartCommand.PartModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PartSAPODataController">
            <summary>
            Part Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartSAPODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapHanaClient"></param>
            <param name="sapeHanaClient"></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PartSAPODataController.GetPartDataAsync(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of PartModel, <see cref="T:QSS.eIQC.SAPHana.Services.Models.SAPPartModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController">
            <summary>
            PCCodeInspectionToolsType Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PCCodeInspectionToolsTypeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController.Add(QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Add.AddPCCodeInspectionToolsTypeModel)">
            <summary>
            Async POST Action method to Add new PCCodeInspectionToolsType configuration
            </summary>
            <param name="request">Input parameter AddPCCodeInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Add.AddPCCodeInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added PCCodeInspectionToolsTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.PCCodeInspectionToolsTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Update.UpdatePCCodeInspectionToolsTypeModel)">
            <summary>
            Async PUT Action method to update PCCodeInspectionToolsType configuration
            </summary>
            <param name="id">PCCodeInspectionToolsType Id as input in URL</param>
            <param name="request">Input parameter UpdatePCCodeInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Update.UpdatePCCodeInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added PCCodeInspectionToolsTypeModel <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.PCCodeInspectionToolsTypeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeController.Delete(QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Delete.DeletePCCodeInspectionToolsTypeModel)">
            <summary>
            Async DELETE Action method to delete PCCodeInspectionToolsType configuration
            </summary>
            <param name="request">Input parameter DeletePCCodeInspectionToolsTypeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Delete.DeletePCCodeInspectionToolsTypeModel"/></param>
            <returns>If success should return newly added DeletePCCodeInspectionToolsTypeResponse <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.Delete.DeletePCCodeInspectionToolsTypeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeODataController">
            <summary>
            PCCodeInspectionToolsType Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PCCodeInspectionToolsType list
            </summary>
            <returns>An queryable object of PCCodeInspectionToolsTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.PCCodeInspectionToolsTypeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeInspectionToolsTypeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PCCodeInspectionToolsTypes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of PCCodeInspectionToolsTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeInspectionToolsTypeCommand.PCCodeInspectionToolsTypeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PCCodeController">
            <summary>
            PCCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PCCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PCCodeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of PCCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeController.Add(QSS.eIQC.Handlers.Commands.PCCodeCommand.Add.AddPCCodeModel)">
            <summary>
            Async POST Action method to Add new PCCode configuration
            </summary>
            <param name="request">Input parameter AddPCCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.Add.AddPCCodeModel"/></param>
            <returns>If success should return newly added PCCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.PCCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.PCCodeCommand.Update.UpdatePCCodeModel)">
            <summary>
            Async PUT Action method to update PCCode configuration
            </summary>
            <param name="id">PCCode Id as input in URL</param>
            <param name="request">Input parameter UpdatePCCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.Update.UpdatePCCodeModel"/></param>
            <returns>If success should return newly added PCCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.PCCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeController.Delete(QSS.eIQC.Handlers.Commands.PCCodeCommand.Delete.DeletePCCodeModel)">
            <summary>
            Async DELETE Action method to delete PCCode configuration
            </summary>
            <param name="request">Input parameter DeletePCCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.Delete.DeletePCCodeModel"/></param>
            <returns>If success should return newly added DeletePCCodeResponse <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.Delete.DeletePCCodeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.PCCodeODataController">
            <summary>
            PCCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a PCCode list
            </summary>
            <returns>An queryable object of PCCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.PCCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PCCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of PCCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of PCCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PCCodeCommand.PCCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ProductLifeCycleStageODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ProductLifeCycleStageODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ProductLifeCycleStage Type list
            </summary>
            <returns>An queryable object of ProductLifeCycleStageTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.ProductLifeCycleStageCommand.ProductLifeCycleStageModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ProductLifeCycleStageODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ProductLifeCycleStages that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of ProductLifeCycleStageTypeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ProductLifeCycleStageCommand.ProductLifeCycleStageModel"/></returns>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.PurchaseOrderController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.PurchaseOrderController},AutoMapper.IMapper,MediatR.IMediator,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of MaterialGroupController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapeHanaClient">Injected instance of ISAPPartService on runtime</param>
            <param name="syncSAPDataHelper">Injected instance of ISyncSAPDataHelper on runtime </param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a Country list
            </summary>
            <returns>An queryable object of PurchaseOrderModel, <see cref="T:QSS.eIQC.Handlers.Commands.PurchaseOrderCommand.PurchaseOrderModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Suppliers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _SupplierModel,  <see cref="T:QSS.eIQC.Handlers.Commands.PurchaseOrderCommand.PurchaseOrderModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderODataController.SyncPurchaseOrderFromSAP(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to query data from Commodity
            </summary>
            <returns></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.PurchaseOrderODataController.CheckPartNumberExistsInPurchaseOrderModule(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            checking whether approved inspection plan part number exists in the purchase order module.
            </summary>
            <param name="oDataQueryOptions"></param>
            <returns></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController">
            <summary>
            ReceiveGoodsInfoManual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ReceiveGoodsInfoManualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController.Add(QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Add.AddReceiveGoodsInfoManualModel)">
            <summary>
            Async POST Action method to Add new ReceiveGoodsInfoManual configuration
            </summary>
            <param name="request">Input parameter AddReceiveGoodsInfoManualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Add.AddReceiveGoodsInfoManualModel"/></param>
            <returns>If success should return newly added ReceiveGoodsInfoManualModel <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.ReceiveGoodsInfoManualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Update.UpdateReceiveGoodsInfoManualModel)">
            <summary>
            Async PUT Action method to update ReceiveGoodsInfoManual configuration
            </summary>
            <param name="id">ReceiveGoodsInfoManual Id as input in URL</param>
            <param name="request">Input parameter UpdateReceiveGoodsInfoManualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Update.UpdateReceiveGoodsInfoManualModel"/></param>
            <returns>If success should return newly added ReceiveGoodsInfoManualModel <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.ReceiveGoodsInfoManualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualController.Delete(QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Delete.DeleteReceiveGoodsInfoManualModel)">
            <summary>
            Async DELETE Action method to delete ReceiveGoodsInfoManual configuration
            </summary>
            <param name="request">Input parameter DeleteReceiveGoodsInfoManualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Delete.DeleteReceiveGoodsInfoManualModel"/></param>
            <returns>If success should return newly added DeleteReceiveGoodsInfoManualResponse <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.Delete.DeleteReceiveGoodsInfoManualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualODataController">
            <summary>
            ReceiveGoodsInfoManual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ReceiveGoodsInfoManual list
            </summary>
            <returns>An queryable object of ReceiveGoodsInfoManualModel, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.ReceiveGoodsInfoManualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoManualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ReceiveGoodsInfoManuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of ReceiveGoodsInfoManualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoManualCommand.ReceiveGoodsInfoManualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController">
            <summary>
            ReceiveGoodsInfo Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of ReceiveGoodsInfoController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController.Add(QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Add.AddReceiveGoodsInfoModel)">
            <summary>
            Async POST Action method to Add new ReceiveGoodsInfo configuration
            </summary>
            <param name="request">Input parameter AddReceiveGoodsInfoModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Add.AddReceiveGoodsInfoModel"/></param>
            <returns>If success should return newly added ReceiveGoodsInfoModel <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.ReceiveGoodsInfoModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController.Update(System.Int32,QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Update.UpdateReceiveGoodsInfoModel)">
            <summary>
            Async PUT Action method to update ReceiveGoodsInfo configuration
            </summary>
            <param name="id">ReceiveGoodsInfo Id as input in URL</param>
            <param name="request">Input parameter UpdateReceiveGoodsInfoModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Update.UpdateReceiveGoodsInfoModel"/></param>
            <returns>If success should return newly added ReceiveGoodsInfoModel <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.ReceiveGoodsInfoModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoController.Delete(QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Delete.DeleteReceiveGoodsInfoModel)">
            <summary>
            Async DELETE Action method to delete ReceiveGoodsInfo configuration
            </summary>
            <param name="request">Input parameter DeleteReceiveGoodsInfoModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Delete.DeleteReceiveGoodsInfoModel"/></param>
            <returns>If success should return newly added DeleteReceiveGoodsInfoResponse <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.Delete.DeleteReceiveGoodsInfoResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoODataController">
            <summary>
            ReceiveGoodsInfo Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a ReceiveGoodsInfo list
            </summary>
            <returns>An queryable object of ReceiveGoodsInfoModel, <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.ReceiveGoodsInfoModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.ReceiveGoodsInfoODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of ReceiveGoodsInfos that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions"></param>
            <returns>An queryable object of ReceiveGoodsInfoModel,  <see cref="T:QSS.eIQC.Handlers.Commands.ReceiveGoodsInfoCommand.ReceiveGoodsInfoModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.RegionODataController">
            <summary>
            Region Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RegionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of RegionODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RegionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of _RegionModel, <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.RegionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RegionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Regions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _RegionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.RegionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.RoleEnumODataController">
            <summary>
            RoleEnum Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RoleEnumODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RoleEnumODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a RoleEnum list
            </summary>
            <returns>An queryable object of RoleEnumModel, <see cref="T:QSS.eIQC.Handlers.Commands.RoleEnumCommand.RoleEnumModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RoleEnumODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of RoleEnums that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of RoleEnumModel,  <see cref="T:QSS.eIQC.Handlers.Commands.RoleEnumCommand.RoleEnumModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.RosettaController">
            <summary>
            Rosetta Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.RosettaController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.RosettaController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of RosettaController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaController.Add(QSS.eIQC.Handlers.Commands.RosettaCommand.Add.AddRosettaModel)">
            <summary>
            Async POST Action method to Add new Rosetta configuration
            </summary>
            <param name="request">Input parameter AddRosettaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.Add.AddRosettaModel"/></param>
            <returns>If success should return newly added RosettaModel <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.RosettaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaController.Update(System.Int32,QSS.eIQC.Handlers.Commands.RosettaCommand.Update.UpdateRosettaModel)">
            <summary>
            Async PUT Action method to update Rosetta configuration
            </summary>
            <param name="id">Rosetta Id as input in URL</param>
            <param name="request">Input parameter UpdateRosettaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.Update.UpdateRosettaModel"/></param>
            <returns>If success should return newly added RosettaModel <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.RosettaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaController.Delete(QSS.eIQC.Handlers.Commands.RosettaCommand.Delete.DeleteRosettaModel)">
            <summary>
            Async DELETE Action method to delete Rosetta configuration
            </summary>
            <param name="request">Input parameter DeleteRosettaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.Delete.DeleteRosettaModel"/></param>
            <returns>If success should return newly added DeleteRosettaResponse <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.Delete.DeleteRosettaResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.RosettaODataController">
            <summary>
            Rosetta Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Rosetta list
            </summary>
            <returns>An queryable object of RosettaModel, <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.RosettaModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.RosettaODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Rosettas that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of RosettaModel,  <see cref="T:QSS.eIQC.Handlers.Commands.RosettaCommand.RosettaModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SampleSizeODataController">
            <summary>
            Part Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SampleSizeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SampleSizeODataController})">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapeHanaClient"></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SampleSizeODataController.GetPartDataAsync(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of PartModel, <see cref="T:QSS.eIQC.SAPHana.Services.Models.SAPSampleSizeCalcModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SampleSizeODataController.CheckPartNumberExistsInSampleSizeCalculationModule(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            checking whether approved inspection plan part number exists in the purchase order module.
            </summary>
            <param name="oDataQueryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityClassificationODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapeHanaClient">Injected instance of ISAPPartService on runtime</param>
            <param name="syncSAPDataHelper">Injected instance of ISyncSAPDataHelper on runtime </param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityClassificationODataController.GetAsync(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to query data from Commodity
            </summary>
            <returns></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityNameODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapHanaClient">Injected instance of ISAPPartService on runtime</param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.CommodityNameODataController.GetCommodityNames(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Commodity Names list
            </summary>
            <returns>An queryable object of CommodityNames, <see cref="T:QSS.eIQC.SAPHana.Services.SAPModels.CommodityNames"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FunctionTestItemsODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapHanaClient">Injected instance of ISAPPartService on runtime</param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.FunctionTestItemsODataController.GetFunctionTestItems(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Function Test Items list
            </summary>
            <returns>An queryable object of FunctionTestItems, <see cref="T:QSS.eIQC.SAPHana.Services.SAPModels.FunctionTestItems"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionItemODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapHanaClient">Injected instance of ISAPPartService on runtime</param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.InspectionItemODataController.GetAppearanceInspectionItem(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of Appearance Inspection Item(, <see cref="T:QSS.eIQC.SAPHana.Services.SAPModels.AppearanceInspectionItem"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SamplingPlanSAPODataController">
            <summary>
            Part Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SamplingPlanSAPODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPHanaClient,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
            <param name="sapHanaClient"></param>
            <param name="sapeHanaClient"></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SamplingPlanSAPODataController.GetSamplingPlanDataAsync(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Part list
            </summary>
            <returns>An queryable object of PartModel, <see cref="T:QSS.eIQC.SAPHana.Services.Models.SAPSamplingPlanModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SamplingPlanSAPODataController.CheckPartNumberExistsInSamplingModule(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            checking whether approved inspection plan part number exists in the sampling plan module.
            </summary>
            <param name="oDataQueryOptions"></param>
            <returns></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanCommentODataController">
            <summary>
            SAPPartInspectionPlanComments Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanCommentODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanCommentODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SAPPartInspectionPlanComments list
            </summary>
            <returns>An queryable object of SAPPartInspectionPlanCommentsModel, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommentCommand.SAPPartInspectionPlanCommentModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanCommentODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SAPPartInspectionPlanCommentss that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SAPPartInspectionPlanCommentsModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommentCommand.SAPPartInspectionPlanCommentModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController">
            <summary>
            SAPPartInspectionPlan Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SAPPartInspectionPlanController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.Add(QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Add.AddSAPPartInspectionPlanModel)">
            <summary>
            Async POST Action method to Add new SAPPartInspectionPlan configuration
            </summary>
            <param name="request">Input parameter AddSAPPartInspectionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Add.AddSAPPartInspectionPlanModel"/></param>
            <returns>If success should return newly added SAPPartInspectionPlanModel <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Update.UpdateSAPPartInspectionPlanModel)">
            <summary>
            Async PUT Action method to update SAPPartInspectionPlan configuration
            </summary>
            <param name="id">SAPPartInspectionPlan Id as input in URL</param>
            <param name="request">Input parameter UpdateSAPPartInspectionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Update.UpdateSAPPartInspectionPlanModel"/></param>
            <returns>If success should return newly added SAPPartInspectionPlanModel <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.Delete(QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Delete.DeleteSAPPartInspectionPlanModel)">
            <summary>
            Async DELETE Action method to delete SAPPartInspectionPlan configuration
            </summary>
            <param name="request">Input parameter DeleteSAPPartInspectionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Delete.DeleteSAPPartInspectionPlanModel"/></param>
            <returns>If success should return newly added DeleteSAPPartInspectionPlanResponse <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.Delete.DeleteSAPPartInspectionPlanResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.ApproveReject(System.Int32,QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.ApproveReject.ApproveRejectSAPPartInspectionPlanModel)">
            <summary>
            Async PUT Action method to update SAPPartInspectionPlan configuration
            </summary>
            <param name="id">SAPPartInspectionPlan Id as input in URL</param>
            <param name="request">Input parameter ApproveRejectSAPPartInspectionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.ApproveReject.ApproveRejectSAPPartInspectionPlanModel"/></param>
            <returns>If success should return newly added SAPPartInspectionPlanModel <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanController.AssignReassign(System.Int32,QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.ApproveReject.AssignReassignSAPPartInspectionPlanToUserModel)">
            <summary>
            Async PUT Action method to update SAPPartInspectionPlan configuration assigned user
            </summary>
            <param name="id">SAPPartInspectionPlan Id as input in URL</param>
            <param name="request">Input parameter AssignReassignToUserSAPPartInspectionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.ApproveReject.AssignReassignSAPPartInspectionPlanToUserModel"/></param>
            <returns>If success should return newly added SAPPartInspectionPlanModel <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanODataController">
            <summary>
            SAPPartInspectionPlan Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SAPPartInspectionPlan list
            </summary>
            <returns>An queryable object of SAPPartInspectionPlanModel, <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SAPPartInspectionPlanODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SAPPartInspectionPlans that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SAPPartInspectionPlanModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SAPPartInspectionPlanCommand.SAPPartInspectionPlanModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SiteODataController">
            <summary>
            Site Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SiteODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SiteODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Site list
            </summary>
            <returns>An queryable object of SiteModel, <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.SiteModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SiteODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of Sites that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of SiteModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.SiteModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierAttachmentController">
            <summary>
            SupplierAttachment Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierAttachmentController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierAttachmentController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierAttachmentController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentController.Add(QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Add.AddSupplierAttachmentModel)">
            <summary>
            Async POST Action method to Add new SupplierAttachment configuration
            </summary>
            <param name="request">Input parameter AddSupplierAttachmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Add.AddSupplierAttachmentModel"/></param>
            <returns>If success should return newly added SupplierAttachmentModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.SupplierAttachmentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Update.UpdateSupplierAttachmentModel)">
            <summary>
            Async PUT Action method to update SupplierAttachment configuration
            </summary>
            <param name="id">SupplierAttachment Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierAttachmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Update.UpdateSupplierAttachmentModel"/></param>
            <returns>If success should return newly added SupplierAttachmentModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.SupplierAttachmentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentController.Delete(QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Delete.DeleteSupplierAttachmentModel)">
            <summary>
            Async DELETE Action method to delete SupplierAttachment configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierAttachmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Delete.DeleteSupplierAttachmentModel"/></param>
            <returns>If success should return newly added DeleteSupplierAttachmentResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.Delete.DeleteSupplierAttachmentResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierAttachmentODataController">
            <summary>
            SupplierAttachment Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierAttachment list
            </summary>
            <returns>An queryable object of SupplierAttachmentModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.SupplierAttachmentModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierAttachmentODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierAttachments that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierAttachmentModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierAttachmentCommand.SupplierAttachmentModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierDateCodeController">
            <summary>
            SupplierDateCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierDateCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierDateCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierDateCodeController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierDateCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierDateCodeODataController">
            <summary>
            SupplierDateCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierDateCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierDateCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierDateCode list
            </summary>
            <returns>An queryable object of SupplierDateCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierDateCodeCommand.SupplierDateCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierDateCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierDateCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierDateCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierDateCodeCommand.SupplierDateCodeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFailedQuantityODataController">
            <summary>
            SAPPartInspectionPlan Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFailedQuantityODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController">
            <summary>
            SupplierFormBowTwistActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormBowTwistActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Add.AddSupplierFormBowTwistActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormBowTwistActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Add.AddSupplierFormBowTwistActualModel"/></param>
            <returns>If success should return newly added SupplierFormBowTwistActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.SupplierFormBowTwistActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Update.UpdateSupplierFormBowTwistActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormBowTwistActual configuration
            </summary>
            <param name="id">SupplierFormBowTwistActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Update.UpdateSupplierFormBowTwistActualModel"/></param>
            <returns>If success should return newly added SupplierFormBowTwistActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.SupplierFormBowTwistActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Delete.DeleteSupplierFormBowTwistActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormBowTwistActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormBowTwistActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Delete.DeleteSupplierFormBowTwistActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormBowTwistActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.Delete.DeleteSupplierFormBowTwistActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualODataController">
            <summary>
            SupplierFormBowTwistActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormBowTwistActual list
            </summary>
            <returns>An queryable object of SupplierFormBowTwistActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.SupplierFormBowTwistActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormBowTwistActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormBowTwistActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistActualCommand.SupplierFormBowTwistActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController">
            <summary>
            SupplierFormBowTwistParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormBowTwistParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Add.AddSupplierFormBowTwistParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Add.AddSupplierFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added SupplierFormBowTwistParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.SupplierFormBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Update.UpdateSupplierFormBowTwistParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormBowTwistParameter configuration
            </summary>
            <param name="id">SupplierFormBowTwistParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Update.UpdateSupplierFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added SupplierFormBowTwistParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.SupplierFormBowTwistParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Delete.DeleteSupplierFormBowTwistParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormBowTwistParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormBowTwistParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Delete.DeleteSupplierFormBowTwistParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormBowTwistParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.Delete.DeleteSupplierFormBowTwistParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterODataController">
            <summary>
            SupplierFormBowTwistParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormBowTwistParameter list
            </summary>
            <returns>An queryable object of SupplierFormBowTwistParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.SupplierFormBowTwistParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormBowTwistParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormBowTwistParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormBowTwistParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormBowTwistParameterCommand.SupplierFormBowTwistParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController">
            <summary>
            SupplierFormCountParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormCountParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormCountParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Add.AddSupplierFormCountParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormCountParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Add.AddSupplierFormCountParameterModel"/></param>
            <returns>If success should return newly added SupplierFormCountParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.SupplierFormCountParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Update.UpdateSupplierFormCountParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormCountParameter configuration
            </summary>
            <param name="id">SupplierFormCountParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Update.UpdateSupplierFormCountParameterModel"/></param>
            <returns>If success should return newly added SupplierFormCountParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.SupplierFormCountParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Delete.DeleteSupplierFormCountParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormCountParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormCountParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Delete.DeleteSupplierFormCountParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormCountParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.Delete.DeleteSupplierFormCountParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormCountParameterODataController">
            <summary>
            SupplierFormCountParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormCountParameter list
            </summary>
            <returns>An queryable object of SupplierFormCountParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.SupplierFormCountParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormCountParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormCountParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormCountParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCountParameterCommand.SupplierFormCountParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController">
            <summary>
            SupplierFormFunParaActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormFunParaActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Add.AddSupplierFormFunParaActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormFunParaActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Add.AddSupplierFormFunParaActualModel"/></param>
            <returns>If success should return newly added SupplierFormFunParaActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.SupplierFormFunParaActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Update.UpdateSupplierFormFunParaActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormFunParaActual configuration
            </summary>
            <param name="id">SupplierFormFunParaActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Update.UpdateSupplierFormFunParaActualModel"/></param>
            <returns>If success should return newly added SupplierFormFunParaActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.SupplierFormFunParaActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Delete.DeleteSupplierFormFunParaActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormFunParaActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormFunParaActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Delete.DeleteSupplierFormFunParaActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormFunParaActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.Delete.DeleteSupplierFormFunParaActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualODataController">
            <summary>
            SupplierFormFunParaActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormFunParaActual list
            </summary>
            <returns>An queryable object of SupplierFormFunParaActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.SupplierFormFunParaActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormFunParaActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormFunParaActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaActualCommand.SupplierFormFunParaActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormFunParaController">
            <summary>
            SupplierFormFunPara Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormFunParaController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormFunParaController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormFunParaController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaController.Add(QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Add.AddSupplierFormFunParaModel)">
            <summary>
            Async POST Action method to Add new SupplierFormFunPara configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Add.AddSupplierFormFunParaModel"/></param>
            <returns>If success should return newly added SupplierFormFunParaModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.SupplierFormFunParaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Update.UpdateSupplierFormFunParaModel)">
            <summary>
            Async PUT Action method to update SupplierFormFunPara configuration
            </summary>
            <param name="id">SupplierFormFunPara Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Update.UpdateSupplierFormFunParaModel"/></param>
            <returns>If success should return newly added SupplierFormFunParaModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.SupplierFormFunParaModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Delete.DeleteSupplierFormFunParaModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormFunPara configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormFunParaModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Delete.DeleteSupplierFormFunParaModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormFunParaResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.Delete.DeleteSupplierFormFunParaResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormFunParaODataController">
            <summary>
            SupplierFormFunPara Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormFunPara list
            </summary>
            <returns>An queryable object of SupplierFormFunParaModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.SupplierFormFunParaModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormFunParaODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormFunParas that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormFunParaModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormFunParaCommand.SupplierFormFunParaModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController">
            <summary>
            SupplierFormLPositionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormLPositionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Add.AddSupplierFormLPositionActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormLPositionActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Add.AddSupplierFormLPositionActualModel"/></param>
            <returns>If success should return newly added SupplierFormLPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.SupplierFormLPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Update.UpdateSupplierFormLPositionActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormLPositionActual configuration
            </summary>
            <param name="id">SupplierFormLPositionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Update.UpdateSupplierFormLPositionActualModel"/></param>
            <returns>If success should return newly added SupplierFormLPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.SupplierFormLPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Delete.DeleteSupplierFormLPositionActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormLPositionActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormLPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Delete.DeleteSupplierFormLPositionActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormLPositionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.Delete.DeleteSupplierFormLPositionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualODataController">
            <summary>
            SupplierFormLPositionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormLPositionActual list
            </summary>
            <returns>An queryable object of SupplierFormLPositionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.SupplierFormLPositionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormLPositionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormLPositionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionActualCommand.SupplierFormLPositionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormLPositionController">
            <summary>
            SupplierFormLPosition Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormLPositionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormLPositionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormLPositionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionController.Add(QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Add.AddSupplierFormLPositionModel)">
            <summary>
            Async POST Action method to Add new SupplierFormLPosition configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Add.AddSupplierFormLPositionModel"/></param>
            <returns>If success should return newly added SupplierFormLPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.SupplierFormLPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Update.UpdateSupplierFormLPositionModel)">
            <summary>
            Async PUT Action method to update SupplierFormLPosition configuration
            </summary>
            <param name="id">SupplierFormLPosition Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Update.UpdateSupplierFormLPositionModel"/></param>
            <returns>If success should return newly added SupplierFormLPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.SupplierFormLPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Delete.DeleteSupplierFormLPositionModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormLPosition configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormLPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Delete.DeleteSupplierFormLPositionModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormLPositionResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.Delete.DeleteSupplierFormLPositionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormLPositionODataController">
            <summary>
            SupplierFormLPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormLPosition list
            </summary>
            <returns>An queryable object of SupplierFormLPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.SupplierFormLPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormLPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormLPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormLPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormLPositionCommand.SupplierFormLPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController">
            <summary>
            SupplierFormMeasurementParameterActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMeasurementParameterActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Add.AddSupplierFormMeasurementParameterActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMeasurementParameterActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Add.AddSupplierFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added SupplierFormMeasurementParameterActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.SupplierFormMeasurementParameterActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Update.UpdateSupplierFormMeasurementParameterActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormMeasurementParameterActual configuration
            </summary>
            <param name="id">SupplierFormMeasurementParameterActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Update.UpdateSupplierFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added SupplierFormMeasurementParameterActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.SupplierFormMeasurementParameterActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Delete.DeleteSupplierFormMeasurementParameterActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMeasurementParameterActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMeasurementParameterActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Delete.DeleteSupplierFormMeasurementParameterActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMeasurementParameterActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.Delete.DeleteSupplierFormMeasurementParameterActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualODataController">
            <summary>
            SupplierFormMeasurementParameterActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMeasurementParameterActual list
            </summary>
            <returns>An queryable object of SupplierFormMeasurementParameterActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.SupplierFormMeasurementParameterActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMeasurementParameterActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMeasurementParameterActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterActualCommand.SupplierFormMeasurementParameterActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController">
            <summary>
            SupplierFormMeasurementParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMeasurementParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Add.AddSupplierFormMeasurementParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMeasurementParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Add.AddSupplierFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added SupplierFormMeasurementParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.SupplierFormMeasurementParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Update.UpdateSupplierFormMeasurementParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormMeasurementParameter configuration
            </summary>
            <param name="id">SupplierFormMeasurementParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Update.UpdateSupplierFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added SupplierFormMeasurementParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.SupplierFormMeasurementParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Delete.DeleteSupplierFormMeasurementParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMeasurementParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMeasurementParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Delete.DeleteSupplierFormMeasurementParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMeasurementParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.Delete.DeleteSupplierFormMeasurementParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterODataController">
            <summary>
            SupplierFormMeasurementParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMeasurementParameter list
            </summary>
            <returns>An queryable object of SupplierFormMeasurementParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.SupplierFormMeasurementParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMeasurementParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMeasurementParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMeasurementParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMeasurementParameterCommand.SupplierFormMeasurementParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController">
            <summary>
            SupplierFormMicroSectionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMicroSectionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Add.AddSupplierFormMicroSectionActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMicroSectionActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Add.AddSupplierFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added SupplierFormMicroSectionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.SupplierFormMicroSectionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Update.UpdateSupplierFormMicroSectionActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormMicroSectionActual configuration
            </summary>
            <param name="id">SupplierFormMicroSectionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Update.UpdateSupplierFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added SupplierFormMicroSectionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.SupplierFormMicroSectionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Delete.DeleteSupplierFormMicroSectionActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMicroSectionActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMicroSectionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Delete.DeleteSupplierFormMicroSectionActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMicroSectionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.Delete.DeleteSupplierFormMicroSectionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualODataController">
            <summary>
            SupplierFormMicroSectionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMicroSectionActual list
            </summary>
            <returns>An queryable object of SupplierFormMicroSectionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.SupplierFormMicroSectionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMicroSectionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMicroSectionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionActualCommand.SupplierFormMicroSectionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController">
            <summary>
            SupplierFormMicroSection Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMicroSectionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Add.AddSupplierFormMicroSectionModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMicroSection configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Add.AddSupplierFormMicroSectionModel"/></param>
            <returns>If success should return newly added SupplierFormMicroSectionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.SupplierFormMicroSectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Update.UpdateSupplierFormMicroSectionModel)">
            <summary>
            Async PUT Action method to update SupplierFormMicroSection configuration
            </summary>
            <param name="id">SupplierFormMicroSection Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Update.UpdateSupplierFormMicroSectionModel"/></param>
            <returns>If success should return newly added SupplierFormMicroSectionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.SupplierFormMicroSectionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Delete.DeleteSupplierFormMicroSectionModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMicroSection configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMicroSectionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Delete.DeleteSupplierFormMicroSectionModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMicroSectionResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.Delete.DeleteSupplierFormMicroSectionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionODataController">
            <summary>
            SupplierFormMicroSection Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMicroSection list
            </summary>
            <returns>An queryable object of SupplierFormMicroSectionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.SupplierFormMicroSectionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMicroSectionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMicroSections that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMicroSectionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMicroSectionCommand.SupplierFormMicroSectionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController">
            <summary>
            SupplierFormMPositionActual Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMPositionActualController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Add.AddSupplierFormMPositionActualModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMPositionActual configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Add.AddSupplierFormMPositionActualModel"/></param>
            <returns>If success should return newly added SupplierFormMPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.SupplierFormMPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Update.UpdateSupplierFormMPositionActualModel)">
            <summary>
            Async PUT Action method to update SupplierFormMPositionActual configuration
            </summary>
            <param name="id">SupplierFormMPositionActual Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Update.UpdateSupplierFormMPositionActualModel"/></param>
            <returns>If success should return newly added SupplierFormMPositionActualModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.SupplierFormMPositionActualModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Delete.DeleteSupplierFormMPositionActualModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMPositionActual configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMPositionActualModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Delete.DeleteSupplierFormMPositionActualModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMPositionActualResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.Delete.DeleteSupplierFormMPositionActualResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualODataController">
            <summary>
            SupplierFormMPositionActual Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMPositionActual list
            </summary>
            <returns>An queryable object of SupplierFormMPositionActualModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.SupplierFormMPositionActualModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionActualODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMPositionActuals that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMPositionActualModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionActualCommand.SupplierFormMPositionActualModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMPositionController">
            <summary>
            SupplierFormMPosition Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormMPositionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormMPositionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormMPositionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionController.Add(QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Add.AddSupplierFormMPositionModel)">
            <summary>
            Async POST Action method to Add new SupplierFormMPosition configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Add.AddSupplierFormMPositionModel"/></param>
            <returns>If success should return newly added SupplierFormMPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.SupplierFormMPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Update.UpdateSupplierFormMPositionModel)">
            <summary>
            Async PUT Action method to update SupplierFormMPosition configuration
            </summary>
            <param name="id">SupplierFormMPosition Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Update.UpdateSupplierFormMPositionModel"/></param>
            <returns>If success should return newly added SupplierFormMPositionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.SupplierFormMPositionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Delete.DeleteSupplierFormMPositionModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormMPosition configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormMPositionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Delete.DeleteSupplierFormMPositionModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormMPositionResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.Delete.DeleteSupplierFormMPositionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormMPositionODataController">
            <summary>
            SupplierFormMPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormMPosition list
            </summary>
            <returns>An queryable object of SupplierFormMPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.SupplierFormMPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormMPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormMPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormMPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormMPositionCommand.SupplierFormMPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormPackagingController">
            <summary>
            SupplierFormPackaging Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormPackagingController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormPackagingController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormPackagingController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingController.Add(QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Add.AddSupplierFormPackagingModel)">
            <summary>
            Async POST Action method to Add new SupplierFormPackaging configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Add.AddSupplierFormPackagingModel"/></param>
            <returns>If success should return newly added SupplierFormPackagingModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.SupplierFormPackagingModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Update.UpdateSupplierFormPackagingModel)">
            <summary>
            Async PUT Action method to update SupplierFormPackaging configuration
            </summary>
            <param name="id">SupplierFormPackaging Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Update.UpdateSupplierFormPackagingModel"/></param>
            <returns>If success should return newly added SupplierFormPackagingModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.SupplierFormPackagingModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Delete.DeleteSupplierFormPackagingModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormPackaging configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormPackagingModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Delete.DeleteSupplierFormPackagingModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormPackagingResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.Delete.DeleteSupplierFormPackagingResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormPackagingODataController">
            <summary>
            SupplierFormPackaging Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormPackaging list
            </summary>
            <returns>An queryable object of SupplierFormPackagingModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.SupplierFormPackagingModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPackagingODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormPackagings that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormPackagingModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPackagingCommand.SupplierFormPackagingModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController">
            <summary>
            SupplierFormPartDateCode Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormPartDateCodeController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController.Add(QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Add.AddSupplierFormPartDateCodeModel)">
            <summary>
            Async POST Action method to Add new SupplierFormPartDateCode configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Add.AddSupplierFormPartDateCodeModel"/></param>
            <returns>If success should return newly added SupplierFormPartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.SupplierFormPartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Update.UpdateSupplierFormPartDateCodeModel)">
            <summary>
            Async PUT Action method to update SupplierFormPartDateCode configuration
            </summary>
            <param name="id">SupplierFormPartDateCode Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Update.UpdateSupplierFormPartDateCodeModel"/></param>
            <returns>If success should return newly added SupplierFormPartDateCodeModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.SupplierFormPartDateCodeModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Delete.DeleteSupplierFormPartDateCodeModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormPartDateCode configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormPartDateCodeModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Delete.DeleteSupplierFormPartDateCodeModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormPartDateCodeResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.Delete.DeleteSupplierFormPartDateCodeResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeODataController">
            <summary>
            SupplierFormPartDateCode Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormPartDateCode list
            </summary>
            <returns>An queryable object of SupplierFormPartDateCodeModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.SupplierFormPartDateCodeModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormPartDateCodeODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormPartDateCodes that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormPartDateCodeModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormPartDateCodeCommand.SupplierFormPartDateCodeModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController">
            <summary>
            SupplierFormResultOrientedParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormResultOrientedParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Add.AddSupplierFormResultOrientedParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormResultOrientedParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Add.AddSupplierFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added SupplierFormResultOrientedParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.SupplierFormResultOrientedParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Update.UpdateSupplierFormResultOrientedParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormResultOrientedParameter configuration
            </summary>
            <param name="id">SupplierFormResultOrientedParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Update.UpdateSupplierFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added SupplierFormResultOrientedParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.SupplierFormResultOrientedParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Delete.DeleteSupplierFormResultOrientedParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormResultOrientedParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormResultOrientedParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Delete.DeleteSupplierFormResultOrientedParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormResultOrientedParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.Delete.DeleteSupplierFormResultOrientedParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterODataController">
            <summary>
            SupplierFormResultOrientedParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormResultOrientedParameter list
            </summary>
            <returns>An queryable object of SupplierFormResultOrientedParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.SupplierFormResultOrientedParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormResultOrientedParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormResultOrientedParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormResultOrientedParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormResultOrientedParameterCommand.SupplierFormResultOrientedParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController">
            <summary>
            SupplierFormSAPParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormSAPParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Add.AddSupplierFormSAPParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormSAPParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Add.AddSupplierFormSAPParameterModel"/></param>
            <returns>If success should return newly added SupplierFormSAPParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.SupplierFormSAPParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Update.UpdateSupplierFormSAPParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormSAPParameter configuration
            </summary>
            <param name="id">SupplierFormSAPParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Update.UpdateSupplierFormSAPParameterModel"/></param>
            <returns>If success should return newly added SupplierFormSAPParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.SupplierFormSAPParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Delete.DeleteSupplierFormSAPParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormSAPParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormSAPParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Delete.DeleteSupplierFormSAPParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormSAPParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.Delete.DeleteSupplierFormSAPParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterODataController">
            <summary>
            SupplierFormSAPParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormSAPParameter list
            </summary>
            <returns>An queryable object of SupplierFormSAPParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.SupplierFormSAPParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSAPParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormSAPParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormSAPParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSAPParameterCommand.SupplierFormSAPParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController">
            <summary>
            SupplierFormSpecialParameter Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormSpecialParameterController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController.Add(QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Add.AddSupplierFormSpecialParameterModel)">
            <summary>
            Async POST Action method to Add new SupplierFormSpecialParameter configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Add.AddSupplierFormSpecialParameterModel"/></param>
            <returns>If success should return newly added SupplierFormSpecialParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.SupplierFormSpecialParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Update.UpdateSupplierFormSpecialParameterModel)">
            <summary>
            Async PUT Action method to update SupplierFormSpecialParameter configuration
            </summary>
            <param name="id">SupplierFormSpecialParameter Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Update.UpdateSupplierFormSpecialParameterModel"/></param>
            <returns>If success should return newly added SupplierFormSpecialParameterModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.SupplierFormSpecialParameterModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Delete.DeleteSupplierFormSpecialParameterModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormSpecialParameter configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormSpecialParameterModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Delete.DeleteSupplierFormSpecialParameterModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormSpecialParameterResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.Delete.DeleteSupplierFormSpecialParameterResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterODataController">
            <summary>
            SupplierFormSpecialParameter Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormSpecialParameter list
            </summary>
            <returns>An queryable object of SupplierFormSpecialParameterModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.SupplierFormSpecialParameterModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormSpecialParameterODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormSpecialParameters that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormSpecialParameterModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormSpecialParameterCommand.SupplierFormSpecialParameterModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormVISController">
            <summary>
            SupplierFormVIS Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormVISController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormVISController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormVISController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISController.Add(QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Add.AddSupplierFormVISModel)">
            <summary>
            Async POST Action method to Add new SupplierFormVIS configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Add.AddSupplierFormVISModel"/></param>
            <returns>If success should return newly added SupplierFormVISModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.SupplierFormVISModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Update.UpdateSupplierFormVISModel)">
            <summary>
            Async PUT Action method to update SupplierFormVIS configuration
            </summary>
            <param name="id">SupplierFormVIS Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Update.UpdateSupplierFormVISModel"/></param>
            <returns>If success should return newly added SupplierFormVISModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.SupplierFormVISModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Delete.DeleteSupplierFormVISModel)">
            <summary>
            Async DELETE Action method to delete SupplierFormVIS configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormVISModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Delete.DeleteSupplierFormVISModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormVISResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.Delete.DeleteSupplierFormVISResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormVISODataController">
            <summary>
            SupplierFormVIS Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierFormVIS list
            </summary>
            <returns>An queryable object of SupplierFormVISModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.SupplierFormVISModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormVISODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierFormVISs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormVISModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormVISCommand.SupplierFormVISModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormController">
            <summary>
            SupplierForm Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierFormController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierFormController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierFormController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormController.Add(QSS.eIQC.Handlers.Commands.SupplierFormCommand.Add.AddSupplierFormModel)">
            <summary>
            Async POST Action method to Add new SupplierForm configuration
            </summary>
            <param name="request">Input parameter AddSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.Add.AddSupplierFormModel"/></param>
            <returns>If success should return newly added SupplierFormModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.SupplierFormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierFormCommand.Update.UpdateSupplierFormModel)">
            <summary>
            Async PUT Action method to update SupplierForm configuration
            </summary>
            <param name="id">SupplierForm Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.Update.UpdateSupplierFormModel"/></param>
            <returns>If success should return newly added SupplierFormModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.SupplierFormModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormController.Delete(QSS.eIQC.Handlers.Commands.SupplierFormCommand.Delete.DeleteSupplierFormModel)">
            <summary>
            Async DELETE Action method to delete SupplierForm configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierFormModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.Delete.DeleteSupplierFormModel"/></param>
            <returns>If success should return newly added DeleteSupplierFormResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.Delete.DeleteSupplierFormResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierFormODataController">
            <summary>
            SupplierForm Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierForm list
            </summary>
            <returns>An queryable object of SupplierFormModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.SupplierFormModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierFormODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierForms that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierFormModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierFormCommand.SupplierFormModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierLPositionODataController">
            <summary>
            SupplierLPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierLPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierLPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierLPosition list
            </summary>
            <returns>An queryable object of SupplierLPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierLPositionCommand.SupplierLPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierLPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierLPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierLPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierLPositionCommand.SupplierLPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController">
            <summary>
            SupplierMeasurementSubmission Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient,QSS.eIQC.DataAccess.DataContext.IQSSContext)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SupplierMeasurementSubmissionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
            <param name="context"></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController.Add(QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Add.AddSupplierMeasurementSubmissionModel)">
            <summary>
            Async POST Action method to Add new SupplierMeasurementSubmission configuration
            </summary>
            <param name="request">Input parameter AddSupplierMeasurementSubmissionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Add.AddSupplierMeasurementSubmissionModel"/></param>
            <returns>If success should return newly added SupplierMeasurementSubmissionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.SupplierMeasurementSubmissionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Update.UpdateSupplierMeasurementSubmissionModel)">
            <summary>
            Async PUT Action method to update SupplierMeasurementSubmission configuration
            </summary>
            <param name="id">SupplierMeasurementSubmission Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierMeasurementSubmissionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Update.UpdateSupplierMeasurementSubmissionModel"/></param>
            <returns>If success should return newly added SupplierMeasurementSubmissionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.SupplierMeasurementSubmissionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController.Delete(QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Delete.DeleteSupplierMeasurementSubmissionModel)">
            <summary>
            Async DELETE Action method to delete SupplierMeasurementSubmission configuration
            </summary>
            <param name="request">Input parameter DeleteSupplierMeasurementSubmissionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Delete.DeleteSupplierMeasurementSubmissionModel"/></param>
            <returns>If success should return newly added DeleteSupplierMeasurementSubmissionResponse <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.Delete.DeleteSupplierMeasurementSubmissionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionController.ApproveReject(System.Int32,QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.ApproveReject.ApproveRejectSupplierMeasurementSubmissionPlanModel)">
            <summary>
            Async PUT Action method to update SupplierMeasurementSubmission configuration
            </summary>
            <param name="id">SupplierMeasurementSubmission Id as input in URL</param>
            <param name="request">Input parameter ApproveRejectSupplierMeasurementSubmissionPlanModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.ApproveReject.ApproveRejectSupplierMeasurementSubmissionPlanModel"/></param>
            <returns>If success should return newly added SupplierMeasurementSubmissionModel <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.SupplierMeasurementSubmissionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionODataController">
            <summary>
            SupplierMeasurementSubmission Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierMeasurementSubmission list
            </summary>
            <returns>An queryable object of SupplierMeasurementSubmissionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.SupplierMeasurementSubmissionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMeasurementSubmissionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierMeasurementSubmissions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierMeasurementSubmissionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMeasurementSubmissionCommand.SupplierMeasurementSubmissionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierMPositionODataController">
            <summary>
            SupplierMPosition Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMPositionODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMPositionODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierMPosition list
            </summary>
            <returns>An queryable object of SupplierMPositionModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMPositionCommand.SupplierMPositionModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierMPositionODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierMPositions that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierMPositionModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierMPositionCommand.SupplierMPositionModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierSamplingPlanODataController">
            <summary>
            SupplierSamplingPlan Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierSamplingPlanODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierSamplingPlanODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierSamplingPlan list
            </summary>
            <returns>An queryable object of SupplierSamplingPlanModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierSamplingPlanCommand.SupplierSamplingPlanModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierSamplingPlanODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierSamplingPlans that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierSamplingPlanModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierSamplingPlanCommand.SupplierSamplingPlanModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierSpcChartODataController">
            <summary>
            SAPPartInspectionPlan Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierSpcChartODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierSpcChartSummaryODataController">
            <summary>
            SAPPartInspectionPlan Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierSpcChartSummaryODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierTestReportODataController">
            <summary>
            SupplierTestReport Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierTestReportODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierTestReportODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SupplierTestReport list
            </summary>
            <returns>An queryable object of SupplierTestReportModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierTestReportCommand.SupplierTestReportModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierTestReportODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SupplierTestReports that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of SupplierTestReportModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierTestReportCommand.SupplierTestReportModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.SupplierVisualInspectionDefectTypeODataController">
            <summary>
            SupplierTestReport Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierVisualInspectionDefectTypeODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.SupplierVisualInspectionDefectTypeODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a CertificateType list
            </summary>
            <returns>An queryable object of CertificateTypeModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierVisualInspectionDefectTypeCommand.SupplierVisualInspectionDefectTypeModel"/></returns>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.Supplier.SupplierController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Supplier.SupplierController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.Supplier.SupplierController},AutoMapper.IMapper,MediatR.IMediator,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of MaterialGroupController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Supplier.SupplierController.Add(QSS.eIQC.Handlers.Commands.SupplierCommand.Add.AddSupplierModel)">
            <summary>
            Async POST Action method to Add new Supplier configuration
            </summary>
            <param name="request">Input parameter AddSupplierModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierCommand.Add.AddSupplierModel"/></param>
            <returns>If success should return newly added SupplierModel <see cref="!:SupplierModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.Supplier.SupplierController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SupplierCommand.Update.UpdateSupplierModel)">
            <summary>
            Async PUT Action method to update Supplier configuration
            </summary>
            <param name="id">Supplier Id as input in URL</param>
            <param name="request">Input parameter UpdateSupplierModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierCommand.Update.UpdateSupplierModel"/></param>
            <returns>If success should return newly added SupplierModel <see cref="!:SupplierModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.TestReportController">
            <summary>
            TestReport Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.TestReportController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.TestReportController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of TestReportController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportController.Add(QSS.eIQC.Handlers.Commands.TestReportCommand.Add.AddTestReportModel)">
            <summary>
            Async POST Action method to Add new TestReport configuration
            </summary>
            <param name="request">Input parameter AddTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.Add.AddTestReportModel"/></param>
            <returns>If success should return newly added TestReportModel <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.TestReportModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportController.Update(System.Int32,QSS.eIQC.Handlers.Commands.TestReportCommand.Update.UpdateTestReportModel)">
            <summary>
            Async PUT Action method to update TestReport configuration
            </summary>
            <param name="id">TestReport Id as input in URL</param>
            <param name="request">Input parameter UpdateTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.Update.UpdateTestReportModel"/></param>
            <returns>If success should return newly added TestReportModel <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.TestReportModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportController.Delete(QSS.eIQC.Handlers.Commands.TestReportCommand.Delete.DeleteTestReportModel)">
            <summary>
            Async DELETE Action method to delete TestReport configuration
            </summary>
            <param name="request">Input parameter DeleteTestReportModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.Delete.DeleteTestReportModel"/></param>
            <returns>If success should return newly added DeleteTestReportResponse <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.Delete.DeleteTestReportResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.TestReportODataController">
            <summary>
            TestReport Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a TestReport list
            </summary>
            <returns>An queryable object of TestReportModel, <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.TestReportModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of TestReports that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of TestReportModel,  <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.TestReportModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.TestReportODataController.GetTestReportByCommodity(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of TestReports that matches with the input
            </summary>
            <param name="commodityId">Takes input commodityId as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of TestReportModel,  <see cref="T:QSS.eIQC.Handlers.Commands.TestReportCommand.TestReportModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.UOMController">
            <summary>
            UOM Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.UOMController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.UOMController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of UOMController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMController.Add(QSS.eIQC.Handlers.Commands.UOMCommand.Add.AddUOMModel)">
            <summary>
            Async POST Action method to Add new UOM configuration
            </summary>
            <param name="request">Input parameter AddUOMModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.Add.AddUOMModel"/></param>
            <returns>If success should return newly added UOMModel <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.UOMModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMController.Update(System.Int32,QSS.eIQC.Handlers.Commands.UOMCommand.Update.UpdateUOMModel)">
            <summary>
            Async PUT Action method to update UOM configuration
            </summary>
            <param name="id">UOM Id as input in URL</param>
            <param name="request">Input parameter UpdateUOMModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.Update.UpdateUOMModel"/></param>
            <returns>If success should return newly added UOMModel <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.UOMModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMController.Delete(QSS.eIQC.Handlers.Commands.UOMCommand.Delete.DeleteUOMModel)">
            <summary>
            Async DELETE Action method to delete UOM configuration
            </summary>
            <param name="request">Input parameter DeleteUOMModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.Delete.DeleteUOMModel"/></param>
            <returns>If success should return newly added DeleteUOMResponse <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.Delete.DeleteUOMResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.UOMODataController">
            <summary>
            UOM Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a UOM list
            </summary>
            <returns>An queryable object of UOMModel, <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.UOMModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.UOMODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of UOMs that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of UOMModel,  <see cref="T:QSS.eIQC.Handlers.Commands.UOMCommand.UOMModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.WarPageODataController">
            <summary>
            WarPage Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WarPageODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WarPageODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a WarPage list
            </summary>
            <returns>An queryable object of WarPageModel, <see cref="T:QSS.eIQC.Handlers.Commands.WarPageCommand.WarPageModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WarPageODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of WarPages that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of WarPageModel,  <see cref="T:QSS.eIQC.Handlers.Commands.WarPageCommand.WarPageModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.WorkCellUserController">
            <summary>
            WorkCellUser Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.WorkCellUserController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.WorkCellUserController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of WorkCellUserController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserController.Add(QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Add.AddWorkCellUserModel)">
            <summary>
            Async POST Action method to Add new WorkCellUser configuration
            </summary>
            <param name="request">Input parameter AddWorkCellUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Add.AddWorkCellUserModel"/></param>
            <returns>If success should return newly added WorkCellUserModel <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.WorkCellUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserController.Update(System.Int32,QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Update.UpdateWorkCellUserModel)">
            <summary>
            Async PUT Action method to update WorkCellUser configuration
            </summary>
            <param name="id">WorkCellUser Id as input in URL</param>
            <param name="request">Input parameter UpdateWorkCellUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Update.UpdateWorkCellUserModel"/></param>
            <returns>If success should return newly added WorkCellUserModel <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.WorkCellUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserController.Delete(QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Delete.DeleteWorkCellUserModel)">
            <summary>
            Async DELETE Action method to delete WorkCellUser configuration
            </summary>
            <param name="request">Input parameter DeleteWorkCellUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Delete.DeleteWorkCellUserModel"/></param>
            <returns>If success should return newly added DeleteWorkCellUserResponse <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.Delete.DeleteWorkCellUserResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Controllers.WorkCellUserODataController">
            <summary>
            WorkCellUser Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a WorkCellUser list
            </summary>
            <returns>An queryable object of WorkCellUserModel, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.WorkCellUserModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCellUserODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of WorkCellUsers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">OdataQueryOptions as input</param>
            <returns>An queryable object of WorkCellUserModel,  <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellUserCommand.WorkCellUserModel"/></returns>
        </member>
        <member name="F:QSS.eIQC.Api.Controllers.WorkCell.WorkCellController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCell.WorkCellController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.eIQC.Api.Controllers.WorkCell.WorkCellController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of WorkCellController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCell.WorkCellController.Add(QSS.eIQC.Handlers.Commands.WorkCellCommand.Add.AddWorkCellModel)">
            <summary>
            Async POST Action method to Add new workcell configuration
            </summary>
            <param name="request">Input parameter AddWorkCellModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.Add.AddWorkCellModel"/></param>
            <returns>If success should return newly added WorkCellModel <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.WorkCellModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCell.WorkCellController.Update(System.Int32,QSS.eIQC.Handlers.Commands.WorkCellCommand.Update.UpdateWorkCellModel)">
            <summary>
            Async PUT Action method to update workcell configuration
            </summary>
            <param name="id">WorkCell Id as input in URL</param>
            <param name="request">Input parameter UpdateWorkCellModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.Update.UpdateWorkCellModel"/></param>
            <returns>If success should return newly added WorkCellModel <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.WorkCellModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Controllers.WorkCell.WorkCellController.Delete(QSS.eIQC.Handlers.Commands.WorkCellCommand.Delete.DeleteWorkCellModel)">
            <summary>
            Async DELETE Action method to delete workcell configuration
            </summary>
            <param name="request">Input parameter DeleteWorkCellModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.Delete.DeleteWorkCellModel"/></param>
            <returns>If success should return newly added DeleteWorkCellResponse <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.Delete.DeleteWorkCellResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.Authentication.ConfigureAuthentication">
            <summary>
            original QSS service to provide authentication
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Authentication.ConfigureAuthentication.ConfigureAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures identity provider
            </summary>
            <param name="services">net service</param>
            <param name="configuration">app configuration</param>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.Authentication.OktaExtension">
            <summary>
            enables Okta service
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Authentication.OktaExtension.ConfigureOkta(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            enables Okta service, this replace original service <see cref="T:QSS.eIQC.Api.Extensions.Authentication.ConfigureAuthentication"/>
            </summary>
            <param name="services">application service <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configuration">application configuration <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.Cors.CorsExtension">
            <summary>
            Extension to setup CORS configuration
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.Cors.CorsExtension.QSSAllowSpecificOrigins">
            <summary>
            Policy cors name
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Cors.CorsExtension.ConfigureCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            CORS configurations
            </summary>
            <param name="services">application service <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configuration">app settings configuration <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.DependencyInjection.DependencyInjectionExtension">
            <summary>
            register all dependencies
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.DependencyInjection.DependencyInjectionExtension.DependencyInyectionConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure all dependency injection
            </summary>
            <param name="services">Application services<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configuration">Application configuration<see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.DependencyInjection.DependencyInjectionExtension.AwsStorageDependency(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            enables AWS storage
            </summary>
            <param name="services">Application services<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension">
            <summary>
            Custom environments extension
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.QualityAssurance">
            <summary>
            Quality assurance environment
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.Local">
            <summary>
            Local environment
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.Test">
            <summary>
            Test environment
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.IsQA(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
             Checks if the current host environment name is quality assurance.
            </summary>
            <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/>.</param>
            <returns>True if the environment name is quality assurance.</returns>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.IsLocal(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
             Checks if the current host environment name is Local.
            </summary>
            <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/>.</param>
            <returns>True if the environment name is local</returns>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.IsTest(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
             Checks if the current host environment name is Local.
            </summary>
            <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/>.</param>
            <returns>True if the environment name is Test</returns>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Environment.HostingEnvironmentExtension.IsDevelopement(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
             Checks if the current host environment name is Developement.
            </summary>
            <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/>.</param>
            <returns>True if the environment name is Developement</returns>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.HealthCheck.CustomHealthCheckExtension">
            <summary>
            Custom health check
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.HealthCheck.CustomHealthCheckExtension._config">
            <summary>
            App settings data DI
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.HealthCheck.CustomHealthCheckExtension.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            custom health check 
            </summary>
            <param name="context">Health check context <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext"/></param>
            <param name="cancellationToken">cancellation token <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="F:QSS.eIQC.Api.Extensions.HealthCheck.HealthCheckDataBaseConnectionExtension._config">
            <summary>
            App settings data DI
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.HealthCheck.HealthCheckDataBaseConnectionExtension.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            database health check 
            </summary>
            <param name="context">Health check context <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext"/></param>
            <param name="cancellationToken">cancellation token <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.OData.ODataExtension">
            <summary>
            OData extension
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.OData.ODataExtension.GetODataModels(System.IServiceProvider)">
            <summary>
            Generates the OData IEdm Models based on the DB Tables/Models
            </summary>
            <param name="serviceProvider"></param>
            <returns><see cref="T:Microsoft.OData.Edm.IEdmModel"/></returns>
            <remarks>
            Just use models from handler to avoid issues. e.g. 
            </remarks>
        </member>
        <member name="T:QSS.eIQC.Api.Extensions.Swagger.SwaggerService">
            <summary>
            Swagger extension
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Swagger.SwaggerService.ConfigureSwaggerExtension(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method to configure the Swagger Services within the Application services interface
            </summary>
            <param name="services">The Service Collection <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="config">The Service Collection <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="M:QSS.eIQC.Api.Extensions.Swagger.SwaggerService.EnableSwaggerPipeline(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Enable Swagger pipeline
            </summary>
            <param name="app">application configuration <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="config">application settings <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.Extensions.AutoMapperExtensions">
            <summary>
            AutoMapper ProjectToExpand
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.AutoMapperExtensions.ProjectToExpand``1(System.Linq.IQueryable,AutoMapper.IConfigurationProvider,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            Extension method for AutoMapper ProjectTo
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source">source</param>
            <param name="configuration">configuration</param>
            <param name="query">query</param>
            <returns></returns>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.DataServiceQueryExtension.AddODataOptions``1(System.Data.Services.Client.DataServiceQuery{``0},Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            Add Odata Options
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="queryOptions"></param>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.ODataQueryExtension.AddODataOptions``1(Microsoft.OData.Client.DataServiceQuery{``0},Microsoft.AspNet.OData.Query.ODataQueryOptions,System.String)">
            <summary>
            Add Odata Options
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="queryOptions"></param>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.Extensions.ODataQueryOptionsExtensions">
            <summary>
            OData Query Options Extensions
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.ODataQueryOptionsExtensions.ToExpandedProperties``1(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            Expanded Properties
            </summary>
            <typeparam name="T">Generic Type</typeparam>
            <param name="queryOptions">queryOptions</param>
            <returns>Returns string array of expanded items</returns>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.Extensions.ServiceCollectionExtensions">
            <summary>
            The Service Collection Extensions
            </summary>
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.ServiceCollectionExtensions.UseSingleTransactionPerRequest(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Data.IsolationLevel)">
            <summary>
            Extension to use a single transaction per HTTP request
            </summary>
            <param name="serviceCollection">the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="level">The <see cref="T:System.Data.IsolationLevel"/> for the transaction</param>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.ServiceCollectionExtensions.UsePostgreSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Set up the Service PostgreSQL DB Context
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="applicationConfigurationConnectionString">The data migration connection string</param>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Extensions.ServiceCollectionExtensions.UseInMemoryPostgreSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Set up the Service InMemory PostgreSQL DB Context
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="database">InMemory database name.</param>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.Filters.EnableQueryFromODataToAWS">
            <summary>
            Custom attribute to pass OData query params to API Gateway
            </summary>
            <remarks>
            BUG: https://github.com/aws/aws-lambda-dotnet/issues/694
            BUG: https://github.com/OData/WebApi/issues/1227
            </remarks>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.Filters.EnableQueryFromODataToAWS.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action executed on request
            </summary>
            <param name="actionExecutedContext">Requested context <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext"/></param>
        </member>
        <member name="P:QSS.eIQC.Api.Helpers.Http.BaseODataController.Context">
            <summary>
            Get the context instance
            </summary>
        </member>
        <member name="P:QSS.eIQC.Api.Helpers.Http.BaseODataController.Mapper">
            <summary>
            Get the mapper instance
            </summary>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.Okta.OktaHelper">
            <summary>
            Okta helper to map configuration from app settings
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Helpers.Okta.OktaHelper.OktaConfiguartion">
            <summary>
            app setting for okta
            </summary>
        </member>
        <member name="P:QSS.eIQC.Api.Helpers.Okta.OktaHelper.Authority">
            <summary>
            origin autority
            </summary>
            <code>https://{replace-with-okta-domain}.okta.com/oauth2/default</code>
        </member>
        <member name="P:QSS.eIQC.Api.Helpers.Okta.OktaHelper.Audience">
            <summary>
            allowed audience
            </summary>
            <code>api://default</code>
        </member>
        <member name="T:QSS.eIQC.Api.Helpers.StringToDateTimeConverter">
            <summary>
            StringToDateTimeConverter
            </summary>
        </member>
        <member name="M:QSS.eIQC.Api.Helpers.StringToDateTimeConverter.Convert(System.String,System.DateTime,AutoMapper.ResolutionContext)">
            <summary>
            convert string to date in automapper
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.eIQC.Api.LambdaEntryPoint.Init(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            The builder has configuration, logging and Amazon API Gateway already configured. The startup class
            needs to be configured in this method using the UseStartup() method.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:QSS.eIQC.Api.LambdaEntryPoint.Init(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Use this override to customize the services registered with the IHostBuilder. 
            
            It is recommended not to call ConfigureWebHostDefaults to configure the IWebHostBuilder inside this method.
            Instead customize the IWebHostBuilder in the Init(IWebHostBuilder) overload.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="F:QSS.eIQC.Api.Services.Implementation.SAPPartService._qssClient">
            <summary>
            Store QSSGatewayAPIClient, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.QSSGatewayAPIClient"/>
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Services.Implementation.SAPPartService._mapper">
            <summary>
            Store IMapper, <see cref="T:AutoMapper.IMapper"/>
            </summary>
        </member>
        <member name="F:QSS.eIQC.Api.Services.Implementation.SAPPartService._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="T:QSS.eIQC.API.Controllers.CountryODataController">
            <summary>
            Country Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.CountryODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.CountryODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a Country list
            </summary>
            <returns>An queryable object of _CountryModel, <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.CountryModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.CountryODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Countrys that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _CountryModel,  <see cref="T:QSS.eIQC.Handlers.Commands.CountryCommand.CountryModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.API.Controllers.SiteUserODataController">
            <summary>
            SiteUser Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SiteUserODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SiteUserODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a SiteUser list
            </summary>
            <returns>An queryable object of SiteUserModel, <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.SiteUserModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SiteUserODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a collection of SiteUsers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of SiteUserModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.SiteUserModel"/></returns>
        </member>
        <member name="T:QSS.eIQC.API.Controllers.SupplierODataController">
            <summary>
            Supplier Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SupplierODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper,QSS.eIQC.SAPHana.Services.Interface.ISAPeHanaClient,QSS.eIQC.SAPSync.Interface.ISyncSAPDataHelper,Microsoft.Extensions.Options.IOptionsSnapshot{QSS.Infrastructure.Core.QSSGatewayAPI.Model.QSSGatewayAPIOptions},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SupplierODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a Country list
            </summary>
            <returns>An queryable object of _SupplierModel, <see cref="T:QSS.eIQC.Handlers.Commands.SupplierCommand.SupplierModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.SupplierODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Suppliers that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _SupplierModel,  <see cref="T:QSS.eIQC.Handlers.Commands.SupplierCommand.SupplierModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.WorkCellODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.WorkCellODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of _WorkCellsModel, <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.WorkCellModel"/></returns>
        </member>
        <member name="M:QSS.eIQC.API.Controllers.WorkCellODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of workcell that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">oDataQueryOptions</param>
            <returns>An queryable object of _WorkCellsModel,  <see cref="T:QSS.eIQC.Handlers.Commands.WorkCellCommand.WorkCellModel"/></returns>
        </member>
        <member name="T:QSS.Controllers.AttachmentController">
            <summary>
            Manage attachment files
            </summary>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.Upload(System.String)">
            <summary>
            This endpoint upload Attachment.
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.Download(QSS.eIQC.Handlers.Commands.AttachmentCommand.DownloadAttachmentModel)">
            <summary>
            This endpoint download Attachment.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.DownloadAllFiles(QSS.eIQC.Handlers.Commands.AttachmentCommand.DownloadAttachmentModel[])">
            <summary>
            This endpoint downloads a compressed zip folder containing attachments.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.DeleteTempFolder(System.String)">
            <summary>
            This endpoint remove temp folder.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.UploadCsv(System.String)">
            <summary>
            POST action method to add a new problem configuration by means of a CSV file
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.DeleteFile(QSS.eIQC.Handlers.Commands.AttachmentCommand.Add.DeleteAttachmentModel)">
            <summary>
            This endpoint remove temp folder.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.ListFiles(System.String)">
            <summary>
            List file in s3 bucket
            </summary>
            <param name="key">key in s3</param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.GetPreSignedUrl(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get presigned url
            </summary>
            <param name="attachmentId">attachment id</param>
            <returns></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.GetAttachmentById(System.Int32)">
            <summary>
            Retrieve Attachment by id
            </summary>
            <param name="id"> Attachment id <see cref="T:System.Int32"/></param>
            <returns>Attachment detail <see cref="T:QSS.eIQC.Handlers.Commands.AttachmentCommand.AttachmentModel"/></returns>
        </member>
        <member name="M:QSS.Controllers.AttachmentController.GetAttachment">
            <summary>
            Retrieve Attachment list with enabled elements
            </summary>
            <returns>Attachment list<see cref="T:QSS.eIQC.Handlers.Commands.AttachmentCommand.AttachmentModel"/></returns>
        </member>
        <member name="T:QSS.Controllers.AuditLogODataController">
            <summary>
            AuditLog Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.Controllers.AuditLogODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of AuditLogODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of ITCCSContext on runtime, <see cref="!:ITCCSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.Controllers.AuditLogODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a AuditLog list
            </summary>
            <returns>An queryable object of AuditLogModel, <see cref="T:QSS.eIQC.Handlers.Commands.AuditLogModel"/></returns>
        </member>
        <member name="M:QSS.Controllers.AuditLogODataController.GetAuditLog(System.String,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a Department matching key 
            </summary>
            <param name="id">Takes input AuditLog Id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of AuditLogModel,  <see cref="T:QSS.eIQC.Handlers.Commands.AuditLogModel"/></returns>
        </member>
        <member name="T:QSS.Controllers.DepartmentController">
            <summary>
            Department Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.Controllers.DepartmentController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.Controllers.DepartmentController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.DepartmentController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DepartmentController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.Controllers.DepartmentController.Add(QSS.eIQC.Handlers.Commands.DepartmentCommand.Add.AddDepartmentModel)">
            <summary>
            Async POST Action method to Add new Department configuration
            </summary>
            <param name="request">Input parameter AddDepartmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.Add.AddDepartmentModel"/></param>
            <returns>If success should return newly added DepartmentModel <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.DepartmentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.DepartmentController.Update(System.Int32,QSS.eIQC.Handlers.Commands.DepartmentCommand.Update.UpdateDepartmentModel)">
            <summary>
            Async PUT Action method to update User configuration
            </summary>
            <param name="id">Department Id as input in URL</param>
            <param name="request">Input parameter UpdateDepartmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.Update.UpdateDepartmentModel"/></param>
            <returns>If success should return newly added DepartmentModel <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.DepartmentModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.DepartmentController.Delete(QSS.eIQC.Handlers.Commands.DepartmentCommand.Delete.DeleteDepartmentModel)">
            <summary>
            Async DELETE Action method to delete Department configuration
            </summary>
            <param name="request">Input parameter DeleteDepartmentModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.Delete.DeleteDepartmentModel"/></param>
            <returns>If success should return newly added DeleteDepartmentResponse <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.Delete.DeleteDepartmentResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.Controllers.RegionController">
            <summary>
            Region Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.Controllers.RegionController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.Controllers.RegionController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.RegionController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of RegionController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.Controllers.RegionController.Add(QSS.eIQC.Handlers.Commands.RegionCommand.Add.AddRegionModel)">
            <summary>
            Async POST Action method to Add new Region configuration
            </summary>
            <param name="request">Input parameter AddRegionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.Add.AddRegionModel"/></param>
            <returns>If success should return newly added RegionModel <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.RegionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.RegionController.Update(System.Int32,QSS.eIQC.Handlers.Commands.RegionCommand.Update.UpdateRegionModel)">
            <summary>
            Async PUT Action method to update User configuration
            </summary>
            <param name="id">Region Id as input in URL</param>
            <param name="request">Input parameter UpdateRegionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.Update.UpdateRegionModel"/></param>
            <returns>If success should return newly added RegionModel <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.RegionModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.RegionController.Delete(QSS.eIQC.Handlers.Commands.RegionCommand.Delete.DeleteRegionModel)">
            <summary>
            Async DELETE Action method to delete Region configuration
            </summary>
            <param name="request">Input parameter DeleteRegionModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.Delete.DeleteRegionModel"/></param>
            <returns>If success should return newly added DeleteRegionResponse <see cref="T:QSS.eIQC.Handlers.Commands.RegionCommand.Delete.DeleteRegionResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.Controllers.RoleController">
            <summary>
            Role Controller provides Add, Update and Delete operations
            </summary>
        </member>
        <member name="M:QSS.Controllers.RoleController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.RoleController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of RoleController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.Controllers.RoleController.Add(QSS.eIQC.Handlers.Commands.RoleCommand.Add.AddRoleModel)">
            <summary>
            Async POST Action method to Add new Role configuration
            </summary>
            <param name="request">Input parameter AddRoleModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.Add.AddRoleModel"/></param>
            <returns>If success should return newly added RoleModel <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.RoleModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.RoleController.Update(System.Int32,QSS.eIQC.Handlers.Commands.RoleCommand.Update.UpdateRoleModel)">
            <summary>
            Async PUT Action method to update Role configuration
            </summary>
            <param name="id">Role Id as input in URL</param>
            <param name="request">Input parameter UpdateRoleModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.Update.UpdateRoleModel"/></param>
            <returns>If success should return newly added RoleModel <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.RoleModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.RoleController.Delete(QSS.eIQC.Handlers.Commands.RoleCommand.Delete.DeleteRoleModel)">
            <summary>
            Async DELETE Action method to delete Role configuration
            </summary>
            <param name="request">Input parameter DeleteRoleModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.Delete.DeleteRoleModel"/></param>
            <returns>If success should return newly added DeleteRoleResponse <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.Delete.DeleteRoleResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.Controllers.RoleODataController">
            <summary>
            Role Configurations OData controller
            </summary>
        </member>
        <member name="M:QSS.Controllers.RoleODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:QSS.Controllers.RoleODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to retrieve a Role list
            </summary>
            <returns>An queryable object of RoleModel, <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.RoleModel"/></returns>
        </member>
        <member name="M:QSS.Controllers.RoleODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData API to return a Role matching key 
            </summary>
            <param name="id">Takes input Role Id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of RoleModel,  <see cref="T:QSS.eIQC.Handlers.Commands.RoleCommand.RoleModel"/></returns>
        </member>
        <member name="T:QSS.Controllers.SiteUserController">
            <summary>
            SiteUser Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.Controllers.SiteUserController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.Controllers.SiteUserController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.SiteUserController},MediatR.IMediator)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SiteUserController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
        </member>
        <member name="M:QSS.Controllers.SiteUserController.Add(QSS.eIQC.Handlers.Commands.SiteUserCommand.Add.AddSiteUserModel)">
            <summary>
            Async POST Action method to Add new SiteUser configuration
            </summary>
            <param name="request">Input parameter AddSiteUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.Add.AddSiteUserModel"/></param>
            <returns>If success should return newly added SiteUserModel <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.SiteUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.SiteUserController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SiteUserCommand.Update.UpdateSiteUserModel)">
            <summary>
            Async PUT Action method to update SiteUser configuration
            </summary>
            <param name="id">SiteUser Id as input in URL</param>
            <param name="request">Input parameter UpdateSiteUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.Update.UpdateSiteUserModel"/></param>
            <returns>If success should return newly added SiteUserModel <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.SiteUserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.SiteUserController.Delete(QSS.eIQC.Handlers.Commands.SiteUserCommand.Delete.DeleteSiteUserModel)">
            <summary>
            Async DELETE Action method to delete SiteUser configuration
            </summary>
            <param name="request">Input parameter DeleteSiteUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.Delete.DeleteSiteUserModel"/></param>
            <returns>If success should return newly added DeleteSiteUserResponse <see cref="T:QSS.eIQC.Handlers.Commands.SiteUserCommand.Delete.DeleteSiteUserResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.Controllers.SiteController">
            <summary>
            Site Controller provides ADD, Update and Delete operations
            </summary>
        </member>
        <member name="F:QSS.Controllers.SiteController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.Controllers.SiteController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.SiteController},MediatR.IMediator,QSS.eIQC.TM1Sync.Interface.ISyncTM1DataHelper,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of SiteController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="syncTM1DataHelper">Sync TM1 Data Helper</param>
        </member>
        <member name="M:QSS.Controllers.SiteController.Add(QSS.eIQC.Handlers.Commands.SiteCommand.Add.AddSiteModel)">
            <summary>
            Async POST Action method to Add new Site configuration
            </summary>
            <param name="request">Input parameter AddSiteModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.Add.AddSiteModel"/></param>
            <returns>If success should return newly added SiteModel <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.SiteModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.SiteController.Update(System.Int32,QSS.eIQC.Handlers.Commands.SiteCommand.Update.UpdateSiteModel)">
            <summary>
            Async PUT Action method to update Site configuration
            </summary>
            <param name="id">Site Id as input in URL</param>
            <param name="request">Input parameter UpdateSiteModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.Update.UpdateSiteModel"/></param>
            <returns>If success should return newly added SiteModel <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.SiteModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.SiteController.Delete(QSS.eIQC.Handlers.Commands.SiteCommand.Delete.DeleteSiteModel)">
            <summary>
            Async DELETE Action method to delete Site configuration
            </summary>
            <param name="request">Input parameter DeleteSiteModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.Delete.DeleteSiteModel"/></param>
            <returns>If success should return newly added DeleteSiteResponse <see cref="T:QSS.eIQC.Handlers.Commands.SiteCommand.Delete.DeleteSiteResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="T:QSS.Controllers.UserController">
            <summary>
            User Controller provides ADD, Update, Delete and SearchAD operations
            </summary>
        </member>
        <member name="F:QSS.Controllers.UserController._logger">
            <summary>
            Store ILogger, <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            </summary>
        </member>
        <member name="M:QSS.Controllers.UserController.#ctor(Microsoft.Extensions.Logging.ILogger{QSS.Controllers.UserController},MediatR.IMediator,QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of UserController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="mediator">Injected instance of mediator on runtime, <see cref="T:MediatR.IMediator"/></param>
            <param name="qssClient">API Gateway, <see cref="T:QSS.Infrastructure.Core.Services.QSSGatewayAPI.IQSSGatewayAPIClient"/></param>
        </member>
        <member name="M:QSS.Controllers.UserController.Add(QSS.eIQC.Handlers.Commands.UserCommand.Add.AddUserModel)">
            <summary>
            Async POST Action method to Add new User configuration
            </summary>
            <param name="request">Input parameter AddUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.Add.AddUserModel"/></param>
            <returns>If success should return newly added UserModel <see cref="!:UserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.UserController.Update(System.Int32,QSS.eIQC.Handlers.Commands.UserCommand.Update.UpdateUserModel)">
            <summary>
            Async PUT Action method to update User configuration
            </summary>
            <param name="id">User Id as input in URL</param>
            <param name="request">Input parameter UpdateUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.Update.UpdateUserModel"/></param>
            <returns>If success should return newly added UserModel <see cref="!:UserModel"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.UserController.Delete(QSS.eIQC.Handlers.Commands.UserCommand.Delete.DeleteUserModel)">
            <summary>
            Async DELETE Action method to delete User configuration
            </summary>
            <param name="request">Input parameter DeleteUserModel in a body, <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.Delete.DeleteUserModel"/></param>
            <returns>If success should return newly added DeleteUserResponse <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.Delete.DeleteUserResponse"/> as IActionResult, <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:QSS.Controllers.UserController.SearchBySamAccountOrName(System.String)">
            <summary>
            Async GET Action method to get user info from ActiveDirectory
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:QSS.Controllers.UserController.SearchByEmail(System.String)">
            <summary>
            Async GET Action method to get user info from ActiveDirectory
            </summary>
            <param name="email"></param>
        </member>
        <member name="T:QSS.Helpers.Filters.CustomODataDocumentFilter">
            <summary>
            CustomODataDocumentFilter: Creates a Filter to extract the OData Controllers Information
            </summary>
        </member>
        <member name="F:QSS.Helpers.Filters.CustomODataDocumentFilter.xmlPath">
            <summary>
            The XML Comments Document Path
            </summary>
        </member>
        <member name="M:QSS.Helpers.Filters.CustomODataDocumentFilter.#ctor(System.String)">
            <summary>
            Creates an Instance of <see cref="T:QSS.Helpers.Filters.CustomODataDocumentFilter"/>
            </summary>
            <param name="xmlCommentsFile">The Path for XMLCommentsFile </param>
        </member>
        <member name="M:QSS.Helpers.Filters.CustomODataDocumentFilter.GetSecurityForOperation(System.Reflection.MemberInfo)">
            <summary>
            The Document Filter <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="odataContoller">The Controller</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="T:QSS.Helpers.Filters.GlobalExceptionFilter">
            <summary>
            The Global Exception Filter
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter" />
        </member>
        <member name="M:QSS.Helpers.Filters.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Called after an action has thrown the exception />.
            </summary>
            <param name="context">The Context.</param>
        </member>
        <member name="T:QSS.Helpers.Filters.UnitOfWorkFilter">
            <summary>
            Unit Of Work Action Filter
            </summary>
        </member>
        <member name="F:QSS.Helpers.Filters.UnitOfWorkFilter._transaction">
            <summary>
            The Injected DBContext Transaction Interface
            </summary>
            <seealso cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction"/>
        </member>
        <member name="M:QSS.Helpers.Filters.UnitOfWorkFilter.#ctor(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)">
            <summary>
            Creates an instace of the <see cref="T:QSS.Helpers.Filters.UnitOfWorkFilter"/>
            </summary>
            <param name="transaction">The <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction"/></param>
        </member>
        <member name="M:QSS.Helpers.Filters.UnitOfWorkFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Execute the HTTP Request action and commits or roll back the transaction
            </summary>
            <param name="context">the <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext"/></param>
            <param name="next">the context <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate"/></param>
            <returns>The Task</returns>
        </member>
        <member name="T:QSS.Helpers.Http.BaseController">
            <summary>
            The Base Controller Class
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase"/>
        </member>
        <member name="F:QSS.Helpers.Http.BaseController._mediatr">
            <summary>
            The Mediatr Interface
            </summary>
        </member>
        <member name="F:QSS.Helpers.Http.BaseController._logger">
            <summary>
            ILogger Interface
            </summary>
        </member>
        <member name="M:QSS.Helpers.Http.BaseController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{QSS.Helpers.Http.BaseController})">
            <summary>
            The Base Controller Contructor
            </summary>
            <param name="mediatr">The <see cref="T:MediatR.IMediator"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
        </member>
        <member name="M:QSS.Helpers.Http.BaseController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{QSS.Helpers.Http.BaseController},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            The Base Controller Contructor
            </summary>
            <param name="mediatr">The <see cref="T:MediatR.IMediator"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="httpContextAccessor">The <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/></param>
        </member>
        <member name="M:QSS.Helpers.Http.BaseController.ExecuteMediatrRequest``1(MediatR.IRequest{``0})">
            <summary>
            Executes a Mediatr Requests and Handles the response or any exceptions may happen
            </summary>
            <typeparam name="T">Class Type</typeparam>
            <param name="request">Request of Type Class</param>
            <returns></returns>
        </member>
        <member name="M:QSS.Helpers.Http.BaseController.ExceptionResponse``1(System.Exception)">
            <summary>
            Exceptions the response.
            </summary>
            <typeparam name="T">T Class</typeparam>
            <param name="ex">The ex.</param>
            <returns>
            The IActionResult
            </returns>
        </member>
        <member name="M:QSS.Helpers.Http.BaseController.CreateResponse``1(System.Exception,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Creates the response.
            </summary>
            <typeparam name="T"> The generic type</typeparam>
            <param name="ex">Exception</param>
            <param name="statusCode">The status code.</param>
            <param name="message">The message.</param>
            <param name="errorcode">The error code.</param>
            <param name="status">The status.</param>
            <returns>
            The ObjectResult
            </returns>
        </member>
        <member name="T:QSS.Http.ErrorCode">
            <summary>
            The Error Code
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.NullReference">
            <summary>
            The null reference
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.NullServiceEndpoint">
            <summary>
            The null service endpoint
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.InternalServerError">
            <summary>
            The internal server error
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.InputValuesNotGood">
            <summary>
            The input values not good
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.BadRequest">
            <summary>
            The bad request
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.InvalidAction">
            <summary>
            The invalid action
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.MaximumBakeCycleReached">
            <summary>
            The maximum bake cycle reached
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.MinimumBakeTime">
            <summary>
            The minimum bake time
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.MaximumBakeTimeReached">
            <summary>
            The maximum bake time reached
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.KeyAlreadyExists">
            <summary>
            The key already exists
            </summary>
        </member>
        <member name="F:QSS.Http.ErrorCode.UnableToDelete">
            <summary>
            Unable to delete as violates ForeignKey rule
            </summary>
        </member>
        <member name="T:QSS.Http.ResponsePayload`1">
            <summary>
            The Response Payload class
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:QSS.Http.ResponsePayload`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:QSS.Http.ResponsePayload`1.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:QSS.Http.ResponsePayload`1.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:QSS.Http.ResponsePayload`1.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="T:QSS.Http.ResponseStatus">
            <summary>
            The Response Status
            </summary>
        </member>
        <member name="F:QSS.Http.ResponseStatus.Success">
            <summary>
            The success
            </summary>
        </member>
        <member name="F:QSS.Http.ResponseStatus.Failed">
            <summary>
            The failed
            </summary>
        </member>
        <member name="F:QSS.Http.ResponseStatus.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="F:QSS.Http.ResponseStatus.BadRequest">
            <summary>
            The bad request
            </summary>
        </member>
        <member name="F:QSS.Http.ResponseStatus.InvalidAction">
            <summary>
            The invalid action
            </summary>
        </member>
        <member name="T:QSS.Security.PermissionHandler">
            <summary>
            Validate user permission to certificate if the user is able to perform specific action
            </summary>
        </member>
        <member name="M:QSS.Security.PermissionHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,QSS.Security.PermissionRequirement)">
            <summary>
            Validate user permission to certificate if the user is able to perform specific action
            </summary>
            <param name="context">database context<see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext"/></param>
            <param name="requirement">requirement to satisfy<see cref="T:QSS.Security.PermissionRequirement"/></param>
            <returns>Validation</returns>
        </member>
        <member name="T:QSS.Startup">
            <summary>
            App configuration
            </summary>
        </member>
        <member name="M:QSS.Startup.ConfigureConfigSettings(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure all options mapped from app settings
            </summary>
            <param name="services">app services</param>
        </member>
        <member name="M:QSS.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
            </summary>
            <param name="app">Application builder DI</param>
            <param name="env">Environment DI</param>
        </member>
        <member name="M:QSS.Startup.SetOutputFormatters(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Set formatter to support JSON/ODATA formats
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:iFactory.DataMigration.API.Controllers.DepartmentODataController">
            <summary>
            Department Configurations OData controller
            </summary>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.DepartmentODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DepartmentODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.DepartmentODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of _DepartmentModel, <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.DepartmentModel"/></returns>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.DepartmentODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of Departments that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of _DepartmentModel,  <see cref="T:QSS.eIQC.Handlers.Commands.DepartmentCommand.DepartmentModel"/></returns>
        </member>
        <member name="T:iFactory.DataMigration.API.Controllers.UserODataController">
            <summary>
            Department Configurations OData controller
            </summary>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.UserODataController.#ctor(QSS.eIQC.DataAccess.DataContext.IQSSContext,AutoMapper.IMapper)">
            <summary>
            Constructor to bootstrap private members
            </summary>
            <param name="logger">Injected instance of ILogger of DepartmentODataController on runtime, <see cref="T:Microsoft.Extensions.Logging.ILogger"/></param>
            <param name="context">Injected instance of IQSSContext on runtime, <see cref="T:QSS.eIQC.DataAccess.DataContext.IQSSContext"/></param>
            <param name="mapper">Injected instance of IMapper on runtime, <see cref="T:AutoMapper.IMapper"/></param>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.UserODataController.Get(Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to retrieve a User list
            </summary>
            <returns>An queryable object of JabilUserModel, <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.JabilUserModel"/></returns>
        </member>
        <member name="M:iFactory.DataMigration.API.Controllers.UserODataController.Get(System.Int32,Microsoft.AspNet.OData.Query.ODataQueryOptions)">
            <summary>
            OData api to return a collection of users that matches with the input
            </summary>
            <param name="id">Takes input id as a key</param>
            <param name="oDataQueryOptions">Takes oDataQueryOptions as filtering options</param>
            <returns>An queryable object of JabilUserModel,  <see cref="T:QSS.eIQC.Handlers.Commands.UserCommand.JabilUserModel"/></returns>
        </member>
    </members>
</doc>
