// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QSS.eIQC.DataAccess.DataContext;

namespace QSS.eIQC.DataAccess.Migrations
{
    [DbContext(typeof(QSSContext))]
    [Migration("20211030065756_SAPInspectionRedefineMigration")]
    partial class SAPInspectionRedefineMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("QSS.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuditLogId")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuditData")
                        .HasColumnType("text");

                    b.Property<byte>("AuditLogType")
                        .HasColumnName("AuditLogTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.AuditLogTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("AuditLogTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AuditLogType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Configuration",
                            Name = "Configuration"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.CommodityCategoryOptionModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("CommodityCategoryOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommodityCategoryOption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Global",
                            IsEnabled = false,
                            Name = "Global"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Site Based",
                            IsEnabled = false,
                            Name = "SiteBased"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.CommodityCategoryTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("CommodityCategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommodityCategoryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electrical",
                            IsEnabled = false,
                            Name = "Electrical"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mechanical",
                            IsEnabled = false,
                            Name = "Mechanical"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.DataTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "CTQ",
                            IsEnabled = false,
                            Name = "CTQ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "NON CTQ",
                            IsEnabled = false,
                            Name = "NON_CTQ"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.ParameterManagementTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ParameterManagementTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ParameterManagementType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Visual Inspection",
                            IsEnabled = false,
                            Name = "VisualInspection"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Function-Attribute",
                            IsEnabled = false,
                            Name = "FunctionAttribute"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dimensional Measurements",
                            IsEnabled = false,
                            Name = "DimensionalMeasurements"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Text-Prepared",
                            IsEnabled = false,
                            Name = "TextPrepared"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Function-Variable",
                            IsEnabled = false,
                            Name = "FunctionVariable"
                        },
                        new
                        {
                            Id = 6,
                            Description = "MicroSection",
                            IsEnabled = false,
                            Name = "MicroSection"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Bow & Twist",
                            IsEnabled = false,
                            Name = "BowAndTwist"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Date Code",
                            IsEnabled = false,
                            Name = "DateCode"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Spec With MMC",
                            IsEnabled = false,
                            Name = "SpecWithMMC"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Spec With LMC",
                            IsEnabled = false,
                            Name = "SpecWithLMC"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.PermissionTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("PermissionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PermissionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin_Can_Access",
                            Name = "AdminCanAccess"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Admin_Role_Can_Access",
                            Name = "AdminRoleCanAccess"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Admin_Role_Can_Create",
                            Name = "AdminRoleCanCreate"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Admin_Role_Can_Update",
                            Name = "AdminRoleCanUpdate"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Admin_Role_Can_Delete",
                            Name = "AdminRoleCanDelete"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Admin_User_Can_Access",
                            Name = "AdminUserCanAccess"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Admin_User_Can_Create",
                            Name = "AdminUserCanCreate"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Admin_User_Can_Update",
                            Name = "AdminUserCanUpdate"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Admin_User_Can_Delete",
                            Name = "AdminUserCanDelete"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Admin_EmailTemplate_Can_Access",
                            Name = "AdminEmailTemplateCanAccess"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Admin_EmailTemplate_Can_Update",
                            Name = "AdminEmailTemplateCanUpdate"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Admin_Department_Can_Access",
                            Name = "AdminDepartmentCanAccess"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Admin_Department_Can_Create",
                            Name = "AdminDepartmentCanCreate"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Admin_Department_Can_Update",
                            Name = "AdminDepartmentCanUpdate"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Admin_Department_Can_Delete",
                            Name = "AdminDepartmentCanDelete"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Admin_WorkCell_Can_Access",
                            Name = "AdminWorkCellCanAccess"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Admin_WorkCell_Can_Create",
                            Name = "AdminWorkCellCanCreate"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Admin_WorkCell_Can_Update",
                            Name = "AdminWorkCellCanUpdate"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Admin_WorkCell_Can_Delete",
                            Name = "AdminWorkCellCanDelete"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Admin_Region_Can_Access",
                            Name = "AdminRegionCanAccess"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Admin_Region_Can_Create",
                            Name = "AdminRegionCanCreate"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Admin_Region_Can_Update",
                            Name = "AdminRegionCanUpdate"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Admin_Region_Can_Delete",
                            Name = "AdminRegionCanDelete"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Admin_Site_Can_Access",
                            Name = "AdminSiteCanAccess"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Admin_Site_Can_Create",
                            Name = "AdminSiteCanCreate"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Admin_Site_Can_Update",
                            Name = "AdminSiteCanUpdate"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Admin_Site_Can_Delete",
                            Name = "AdminSiteCanDelete"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Admin_Country_Can_Access",
                            Name = "AdminCountryCanAccess"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Admin_Country_Can_Create",
                            Name = "AdminCountryCanCreate"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Admin_Country_Can_Update",
                            Name = "AdminCountryCanUpdate"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Admin_Country_Can_Delete",
                            Name = "AdminCountryCanDelete"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Admin_Division_Can_Access",
                            Name = "AdminDivisionCanAccess"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Admin_Division_Can_Create",
                            Name = "AdminDivisionCanCreate"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Admin_Division_Can_Update",
                            Name = "AdminDivisionCanUpdate"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Admin_Division_Can_Delete",
                            Name = "AdminDivisionCanDelete"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Admin_Location_Can_Access",
                            Name = "AdminLocationCanAccess"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Admin_Location_Can_Create",
                            Name = "AdminLocationCanCreate"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Admin_Location_Can_Update",
                            Name = "AdminLocationCanUpdate"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Admin_Location_Can_Delete",
                            Name = "AdminLocationCanDelete"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Admin_SiteUser_Can_Access",
                            Name = "AdminSiteUserCanAccess"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Admin_SiteUser_Can_Create",
                            Name = "AdminSiteUserCanCreate"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Admin_SiteUser_Can_Update",
                            Name = "AdminSiteUserCanUpdate"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Admin_SiteUser_Can_Delete",
                            Name = "AdminSiteUserCanDelete"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Home_Can_Access",
                            Name = "HomeCanAccess"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Admin_AuditLog_Can_Access",
                            Name = "AdminAuditLogCanAccess"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Admin_Buyer_Can_Access",
                            Name = "AdminBuyerCanAccess"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Admin_Buyer_Can_Create",
                            Name = "AdminBuyerCanCreate"
                        },
                        new
                        {
                            Id = 52,
                            Description = "Admin_Buyer_Can_Update",
                            Name = "AdminBuyerCanUpdate"
                        },
                        new
                        {
                            Id = 53,
                            Description = "Admin_Buyer_Can_Delete",
                            Name = "AdminBuyerCanDelete"
                        },
                        new
                        {
                            Id = 54,
                            Description = "Admin_CompletedGRS_Can_Access",
                            Name = "AdminCompletedGRSCanAccess"
                        },
                        new
                        {
                            Id = 55,
                            Description = "Admin_CompletedGRS_Can_Create",
                            Name = "AdminCompletedGRSCanCreate"
                        },
                        new
                        {
                            Id = 56,
                            Description = "Admin_CompletedGRS_Can_Update",
                            Name = "AdminCompletedGRSCanUpdate"
                        },
                        new
                        {
                            Id = 57,
                            Description = "Admin_CompletedGRS_Can_Delete",
                            Name = "AdminCompletedGRSCanDelete"
                        },
                        new
                        {
                            Id = 58,
                            Description = "Admin_Customer_Can_Access",
                            Name = "AdminCustomerCanAccess"
                        },
                        new
                        {
                            Id = 59,
                            Description = "Admin_Customer_Can_Create",
                            Name = "AdminCustomerCanCreate"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Admin_Customer_Can_Update",
                            Name = "AdminCustomerCanUpdate"
                        },
                        new
                        {
                            Id = 61,
                            Description = "Admin_Customer_Can_Delete",
                            Name = "AdminCustomerCanDelete"
                        },
                        new
                        {
                            Id = 62,
                            Description = "Admin_DefectType_Can_Access",
                            Name = "AdminDefectTypeCanAccess"
                        },
                        new
                        {
                            Id = 63,
                            Description = "Admin_DefectType_Can_Create",
                            Name = "AdminDefectTypeCanCreate"
                        },
                        new
                        {
                            Id = 64,
                            Description = "Admin_DefectType_Can_Update",
                            Name = "AdminDefectTypeCanUpdate"
                        },
                        new
                        {
                            Id = 65,
                            Description = "Admin_DefectType_Can_Delete",
                            Name = "AdminDefectTypeCanDelete"
                        },
                        new
                        {
                            Id = 66,
                            Description = "Admin_CTParameter_Can_Access",
                            Name = "AdminCTParameterCanAccess"
                        },
                        new
                        {
                            Id = 67,
                            Description = "Admin_CTParameter_Can_Create",
                            Name = "AdminCTParameterCanCreate"
                        },
                        new
                        {
                            Id = 68,
                            Description = "Admin_CTParameter_Can_Update",
                            Name = "AdminCTParameterCanUpdate"
                        },
                        new
                        {
                            Id = 69,
                            Description = "Admin_CTParameter_Can_Delete",
                            Name = "AdminCTParameterCanDelete"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Admin_UOM_Can_Access",
                            Name = "AdminUOMCanAccess"
                        },
                        new
                        {
                            Id = 71,
                            Description = "Admin_UOM_Can_Create",
                            Name = "AdminUOMCanCreate"
                        },
                        new
                        {
                            Id = 72,
                            Description = "Admin_UOM_Can_Update",
                            Name = "AdminUOMCanUpdate"
                        },
                        new
                        {
                            Id = 73,
                            Description = "Admin_UOM_Can_Delete",
                            Name = "AdminUOMCanDelete"
                        },
                        new
                        {
                            Id = 74,
                            Description = "Admin_GoodsReceiveUser_Can_Access",
                            Name = "AdminGoodsReceiveUserUOMCanAccess"
                        },
                        new
                        {
                            Id = 75,
                            Description = "Admin_GoodsReceiveUser_Can_Create",
                            Name = "AdminGoodsReceiveUserCanCreate"
                        },
                        new
                        {
                            Id = 76,
                            Description = "Admin_GoodsReceiveUser_Can_Update",
                            Name = "AdminGoodsReceiveUserCanUpdate"
                        },
                        new
                        {
                            Id = 77,
                            Description = "Admin_GoodsReceiveUser_Can_Delete",
                            Name = "AdminGoodsReceiveUserCanDelete"
                        },
                        new
                        {
                            Id = 78,
                            Description = "Admin_Group_Can_Access",
                            Name = "AdminGroupCanAccess"
                        },
                        new
                        {
                            Id = 79,
                            Description = "Admin_Group_Can_Create",
                            Name = "AdminGroupCanCreate"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Admin_Group_Can_Update",
                            Name = "AdminGroupCanUpdate"
                        },
                        new
                        {
                            Id = 81,
                            Description = "Admin_Group_Can_Delete",
                            Name = "AdminGroupCanDelete"
                        },
                        new
                        {
                            Id = 82,
                            Description = "Admin_InspectionToolsType_Can_Access",
                            Name = "AdminInspectionToolsTypeCanAccess"
                        },
                        new
                        {
                            Id = 83,
                            Description = "Admin_InspectionToolsType_Can_Create",
                            Name = "AdminInspectionToolsTypeCanCreate"
                        },
                        new
                        {
                            Id = 84,
                            Description = "Admin_InspectionToolsType_Can_Update",
                            Name = "AdminInspectionToolsTypeCanUpdate"
                        },
                        new
                        {
                            Id = 85,
                            Description = "Admin_InspectionToolsType_Can_Delete",
                            Name = "AdminInspectionToolsTypeCanDelete"
                        },
                        new
                        {
                            Id = 86,
                            Description = "Admin_InstrumentType_Can_Access",
                            Name = "AdminInstrumentTypeCanAccess"
                        },
                        new
                        {
                            Id = 87,
                            Description = "Admin_InstrumentType_Can_Create",
                            Name = "AdminInstrumentTypeCanCreate"
                        },
                        new
                        {
                            Id = 88,
                            Description = "Admin_InstrumentType_Can_Update",
                            Name = "AdminInstrumentTypeCanUpdate"
                        },
                        new
                        {
                            Id = 89,
                            Description = "Admin_InstrumentType_Can_Delete",
                            Name = "AdminInstrumentTypeCanDelete"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Admin_GRSSAPResult_Can_Access",
                            Name = "AdminGRSSAPResultCanAccess"
                        },
                        new
                        {
                            Id = 91,
                            Description = "Admin_GRSSAPResult_Can_Create",
                            Name = "AdminGRSSAPResultCanCreate"
                        },
                        new
                        {
                            Id = 92,
                            Description = "Admin_GRSSAPResult_Can_Update",
                            Name = "AdminGRSSAPResultCanUpdate"
                        },
                        new
                        {
                            Id = 93,
                            Description = "Admin_GRSSAPResult_Can_Delete",
                            Name = "AdminGRSSAPResultCanDelete"
                        },
                        new
                        {
                            Id = 94,
                            Description = "Admin_LotInspectionQty_Can_Access",
                            Name = "AdminLotInspectionQtyCanAccess"
                        },
                        new
                        {
                            Id = 95,
                            Description = "Admin_LotInspectionQty_Can_Create",
                            Name = "AdminLotInspectionQtyCanCreate"
                        },
                        new
                        {
                            Id = 96,
                            Description = "Admin_LotInspectionQty_Can_Update",
                            Name = "AdminLotInspectionQtyCanUpdate"
                        },
                        new
                        {
                            Id = 97,
                            Description = "Admin_LotInspectionQty_Can_Delete",
                            Name = "AdminLotInspectionQtyCanDelete"
                        },
                        new
                        {
                            Id = 98,
                            Description = "Admin_ParameterType_Can_Access",
                            Name = "AdminParameterTypeCanAccess"
                        },
                        new
                        {
                            Id = 99,
                            Description = "Admin_ParameterType_Can_Create",
                            Name = "AdminParameterTypeCanCreate"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Admin_ParameterType_Can_Update",
                            Name = "AdminParameterTypeCanUpdate"
                        },
                        new
                        {
                            Id = 101,
                            Description = "Admin_ParameterType_Can_Delete",
                            Name = "AdminParameterTypeCanDelete"
                        },
                        new
                        {
                            Id = 102,
                            Description = "Admin_ParameterCategory_Can_Access",
                            Name = "AdminParameterCategoryCanAccess"
                        },
                        new
                        {
                            Id = 103,
                            Description = "Admin_ParameterCategory_Can_Create",
                            Name = "AdminParameterCategoryCanCreate"
                        },
                        new
                        {
                            Id = 104,
                            Description = "Admin_ParameterCategory_Can_Update",
                            Name = "AdminParameterCategoryCanUpdate"
                        },
                        new
                        {
                            Id = 105,
                            Description = "Admin_ParameterCategory_Can_Delete",
                            Name = "AdminParameterCategoryCanDelete"
                        },
                        new
                        {
                            Id = 106,
                            Description = "Admin_PartCAF_Can_Access",
                            Name = "AdminPartCAFCanAccess"
                        },
                        new
                        {
                            Id = 107,
                            Description = "Admin_PartCAF_Can_Create",
                            Name = "AdminPartCAFCanCreate"
                        },
                        new
                        {
                            Id = 108,
                            Description = "Admin_PartCAF_Can_Update",
                            Name = "AdminPartCAFCanUpdate"
                        },
                        new
                        {
                            Id = 109,
                            Description = "Admin_PartCAF_Can_Delete",
                            Name = "AdminPartCAFCanDelete"
                        },
                        new
                        {
                            Id = 110,
                            Description = "Admin_PCCode_Can_Access",
                            Name = "AdminPCCodeCanAccess"
                        },
                        new
                        {
                            Id = 111,
                            Description = "Admin_PCCode_Can_Create",
                            Name = "AdminPCCodeCanCreate"
                        },
                        new
                        {
                            Id = 112,
                            Description = "Admin_PCCode_Can_Update",
                            Name = "AdminPCCodeCanUpdate"
                        },
                        new
                        {
                            Id = 113,
                            Description = "Admin_PCCode_Can_Delete",
                            Name = "AdminPCCodeCanDelete"
                        },
                        new
                        {
                            Id = 114,
                            Description = "Admin_ReceiveGoodsInfo_Can_Access",
                            Name = "AdminReceiveGoodsInfoCanAccess"
                        },
                        new
                        {
                            Id = 115,
                            Description = "Admin_ReceiveGoodsInfo_Can_Create",
                            Name = "AdminReceiveGoodsInfoCanCreate"
                        },
                        new
                        {
                            Id = 116,
                            Description = "Admin_ReceiveGoodsInfo_Can_Update",
                            Name = "AdminReceiveGoodsInfoCanUpdate"
                        },
                        new
                        {
                            Id = 117,
                            Description = "Admin_ReceiveGoodsInfo_Can_Delete",
                            Name = "AdminReceiveGoodsInfoCanDelete"
                        },
                        new
                        {
                            Id = 118,
                            Description = "Admin_ReceiveGoodsInfoManual_Can_Access",
                            Name = "AdminReceiveGoodsInfoManualCanAccess"
                        },
                        new
                        {
                            Id = 119,
                            Description = "Admin_ReceiveGoodsInfoManual_Can_Create",
                            Name = "AdminReceiveGoodsInfoManualCanCreate"
                        },
                        new
                        {
                            Id = 120,
                            Description = "Admin_ReceiveGoodsInfoManual_Can_Update",
                            Name = "AdminReceiveGoodsInfoManualCanUpdate"
                        },
                        new
                        {
                            Id = 121,
                            Description = "Admin_ReceiveGoodsInfoManual_Can_Delete",
                            Name = "AdminReceiveGoodsInfoManualCanDelete"
                        },
                        new
                        {
                            Id = 122,
                            Description = "Admin_Rosetta_Can_Access",
                            Name = "AdminRosettaCanAccess"
                        },
                        new
                        {
                            Id = 123,
                            Description = "Admin_Rosetta_Can_Create",
                            Name = "AdminRosettaCanCreate"
                        },
                        new
                        {
                            Id = 124,
                            Description = "Admin_Rosetta_Can_Update",
                            Name = "AdminRosettaCanUpdate"
                        },
                        new
                        {
                            Id = 125,
                            Description = "Admin_LotInspectionQty_Can_Delete",
                            Name = "AdminRosettaCanDelete"
                        },
                        new
                        {
                            Id = 126,
                            Description = "Admin_DispositionType_Can_Access",
                            Name = "AdminDispositionTypeCanAccess"
                        },
                        new
                        {
                            Id = 127,
                            Description = "Admin_DispositionType_Can_Create",
                            Name = "AdminDispositionTypeCanCreate"
                        },
                        new
                        {
                            Id = 128,
                            Description = "Admin_DispositionType_Can_Update",
                            Name = "AdminDispositionTypeCanUpdate"
                        },
                        new
                        {
                            Id = 129,
                            Description = "Admin_DispositionType_Can_Delete",
                            Name = "AdminDispositionTypeCanDelete"
                        },
                        new
                        {
                            Id = 130,
                            Description = "Admin_SupplierForm_Can_Access",
                            Name = "AdminSupplierFormCanAccess"
                        },
                        new
                        {
                            Id = 131,
                            Description = "Admin_SupplierForm_Can_Create",
                            Name = "AdminSupplierFormCanCreate"
                        },
                        new
                        {
                            Id = 132,
                            Description = "Admin_SupplierForm_Can_Update",
                            Name = "AdminSupplierFormCanUpdate"
                        },
                        new
                        {
                            Id = 133,
                            Description = "Admin_SupplierForm_Can_Delete",
                            Name = "AdminSupplierFormCanDelete"
                        },
                        new
                        {
                            Id = 134,
                            Description = "Admin_SupplierFormVIS_Can_Access",
                            Name = "AdminSupplierFormVISCanAccess"
                        },
                        new
                        {
                            Id = 135,
                            Description = "Admin_SupplierFormVIS_Can_Create",
                            Name = "AdminSupplierFormVISCanCreate"
                        },
                        new
                        {
                            Id = 136,
                            Description = "Admin_SupplierFormVIS_Can_Update",
                            Name = "AdminSupplierFormVISCanUpdate"
                        },
                        new
                        {
                            Id = 137,
                            Description = "Admin_SupplierFormVIS_Can_Delete",
                            Name = "AdminSupplierFormVISCanDelete"
                        },
                        new
                        {
                            Id = 138,
                            Description = "Admin_SupplierFormCountParameter_Can_Access",
                            Name = "AdminSupplierFormCountParameterCanAccess"
                        },
                        new
                        {
                            Id = 139,
                            Description = "Admin_SupplierFormCountParameter_Can_Create",
                            Name = "AdminSupplierFormCountParameterCanCreate"
                        },
                        new
                        {
                            Id = 140,
                            Description = "Admin_SupplierFormCountParameter_Can_Update",
                            Name = "AdminSupplierFormCountParameterCanUpdate"
                        },
                        new
                        {
                            Id = 141,
                            Description = "Admin_SupplierFormCountParameter_Can_Delete",
                            Name = "AdminSupplierFormCountParameterCanDelete"
                        },
                        new
                        {
                            Id = 142,
                            Description = "Admin_SupplierFormTestReport_Can_Access",
                            Name = "AdminSupplierFormTestReportCanAccess"
                        },
                        new
                        {
                            Id = 143,
                            Description = "Admin_SupplierFormTestReport_Can_Create",
                            Name = "AdminSupplierFormTestReportCanCreate"
                        },
                        new
                        {
                            Id = 144,
                            Description = "Admin_SupplierFormTestReport_Can_Update",
                            Name = "AdminSupplierFormTestReportCanUpdate"
                        },
                        new
                        {
                            Id = 145,
                            Description = "Admin_SupplierFormTestReport_Can_Delete",
                            Name = "AdminSupplierFormTestReportCanDelete"
                        },
                        new
                        {
                            Id = 146,
                            Description = "Admin_SupplierFormSAPParameter_Can_Access",
                            Name = "AdminSupplierFormSAPParameterCanAccess"
                        },
                        new
                        {
                            Id = 147,
                            Description = "Admin_SupplierFormSAPParameter_Can_Create",
                            Name = "AdminSupplierFormSAPParameterCanCreate"
                        },
                        new
                        {
                            Id = 148,
                            Description = "Admin_SupplierFormSAPParameter_Can_Update",
                            Name = "AdminSupplierFormSAPParameterCanUpdate"
                        },
                        new
                        {
                            Id = 149,
                            Description = "Admin_SupplierFormSAPParameter_Can_Delete",
                            Name = "AdminSupplierFormSAPParameterCanDelete"
                        },
                        new
                        {
                            Id = 150,
                            Description = "Admin_SupplierFormBowTwistParameter_Can_Access",
                            Name = "AdminSupplierFormBowTwistParameterCanAccess"
                        },
                        new
                        {
                            Id = 151,
                            Description = "Admin_SupplierFormBowTwistParameter_Can_Create",
                            Name = "AdminSupplierFormBowTwistParameterCanCreate"
                        },
                        new
                        {
                            Id = 152,
                            Description = "Admin_SupplierFormBowTwistParameter_Can_Update",
                            Name = "AdminSupplierFormBowTwistParameterCanUpdate"
                        },
                        new
                        {
                            Id = 153,
                            Description = "Admin_SupplierFormBowTwistParameter_Can_Delete",
                            Name = "AdminSupplierFormBowTwistParameterCanDelete"
                        },
                        new
                        {
                            Id = 154,
                            Description = "Admin_SupplierFormSpecialParameter_Can_Access",
                            Name = "AdminSupplierFormSpecialParameterCanAccess"
                        },
                        new
                        {
                            Id = 155,
                            Description = "Admin_SupplierFormSpecialParameter_Can_Create",
                            Name = "AdminSupplierFormSpecialParameterCanCreate"
                        },
                        new
                        {
                            Id = 156,
                            Description = "Admin_SupplierFormSpecialParameter_Can_Update",
                            Name = "AdminSupplierFormSpecialParameterCanUpdate"
                        },
                        new
                        {
                            Id = 157,
                            Description = "Admin_SupplierFormSpecialParameter_Can_Delete",
                            Name = "AdminSupplierFormSpecialParameterCanDelete"
                        },
                        new
                        {
                            Id = 158,
                            Description = "Admin_SupplierFormResultOrientedParameter_Can_Access",
                            Name = "AdminSupplierFormResultOrientedParameterCanAccess"
                        },
                        new
                        {
                            Id = 159,
                            Description = "Admin_SupplierFormResultOrientedParameter_Can_Create",
                            Name = "AdminSupplierFormResultOrientedParameterCanCreate"
                        },
                        new
                        {
                            Id = 160,
                            Description = "Admin_SupplierFormResultOrientedParameter_Can_Update",
                            Name = "AdminSupplierFormResultOrientedParameterCanUpdate"
                        },
                        new
                        {
                            Id = 161,
                            Description = "Admin_SupplierFormResultOrientedParameter_Can_Delete",
                            Name = "AdminSupplierFormResultOrientedParameterCanDelete"
                        },
                        new
                        {
                            Id = 162,
                            Description = "Admin_SupplierFormPackaging_Can_Access",
                            Name = "AdminSupplierFormPackagingCanAccess"
                        },
                        new
                        {
                            Id = 163,
                            Description = "Admin_SupplierFormPackaging_Can_Create",
                            Name = "AdminSupplierFormPackagingCanCreate"
                        },
                        new
                        {
                            Id = 164,
                            Description = "Admin_SupplierFormPackaging_Can_Update",
                            Name = "AdminSupplierFormPackagingCanUpdate"
                        },
                        new
                        {
                            Id = 165,
                            Description = "Admin_SupplierFormPackaging_Can_Delete",
                            Name = "AdminSupplierFormPackagingCanDelete"
                        },
                        new
                        {
                            Id = 166,
                            Description = "Admin_SupplierFormPartDateCode_Can_Access",
                            Name = "AdminSupplierFormPartDateCodeCanAccess"
                        },
                        new
                        {
                            Id = 167,
                            Description = "Admin_SupplierFormPartDateCode_Can_Create",
                            Name = "AdminSupplierFormPartDateCodeCanCreate"
                        },
                        new
                        {
                            Id = 168,
                            Description = "Admin_SupplierFormPartDateCode_Can_Update",
                            Name = "AdminSupplierFormPartDateCodeCanUpdate"
                        },
                        new
                        {
                            Id = 169,
                            Description = "Admin_SupplierFormPartDateCode_Can_Delete",
                            Name = "AdminSupplierFormPartDateCodeCanDelete"
                        },
                        new
                        {
                            Id = 170,
                            Description = "Admin_SupplierFormBowTwistActual_Can_Access",
                            Name = "AdminSupplierFormBowTwistActualCanAccess"
                        },
                        new
                        {
                            Id = 171,
                            Description = "Admin_SupplierFormBowTwistActual_Can_Create",
                            Name = "AdminSupplierFormBowTwistActualCanCreate"
                        },
                        new
                        {
                            Id = 172,
                            Description = "Admin_SupplierFormBowTwistActual_Can_Update",
                            Name = "AdminSupplierFormBowTwistActualCanUpdate"
                        },
                        new
                        {
                            Id = 173,
                            Description = "Admin_SupplierFormBowTwistActual_Can_Delete",
                            Name = "AdminSupplierFormBowTwistActualCanDelete"
                        },
                        new
                        {
                            Id = 174,
                            Description = "Admin_SupplierFormFunPara_Can_Access",
                            Name = "AdminSupplierFormFunParaCanAccess"
                        },
                        new
                        {
                            Id = 175,
                            Description = "Admin_SupplierFormFunPara_Can_Create",
                            Name = "AdminSupplierFormFunParaCanCreate"
                        },
                        new
                        {
                            Id = 176,
                            Description = "Admin_SupplierFormFunPara_Can_Update",
                            Name = "AdminSupplierFormFunParaCanUpdate"
                        },
                        new
                        {
                            Id = 177,
                            Description = "Admin_SupplierFormFunPara_Can_Delete",
                            Name = "AdminSupplierFormFunParaCanDelete"
                        },
                        new
                        {
                            Id = 178,
                            Description = "Admin_SupplierFormFunParaActual_Can_Access",
                            Name = "AdminSupplierFormFunParaActualCanAccess"
                        },
                        new
                        {
                            Id = 179,
                            Description = "Admin_SupplierFormFunParaActual_Can_Create",
                            Name = "AdminSupplierFormFunParaActualCanCreate"
                        },
                        new
                        {
                            Id = 180,
                            Description = "Admin_SupplierFormFunParaActual_Can_Update",
                            Name = "AdminSupplierFormFunParaActualCanUpdate"
                        },
                        new
                        {
                            Id = 181,
                            Description = "Admin_SupplierFormFunParaActual_Can_Delete",
                            Name = "AdminSupplierFormFunParaActualCanDelete"
                        },
                        new
                        {
                            Id = 182,
                            Description = "Admin_SupplierFormLPosition_Can_Access",
                            Name = "AdminSupplierFormLPositionCanAccess"
                        },
                        new
                        {
                            Id = 183,
                            Description = "Admin_SupplierFormLPosition_Can_Create",
                            Name = "AdminSupplierFormLPositionCanCreate"
                        },
                        new
                        {
                            Id = 184,
                            Description = "Admin_SupplierFormLPosition_Can_Update",
                            Name = "AdminSupplierFormLPositionCanUpdate"
                        },
                        new
                        {
                            Id = 185,
                            Description = "Admin_SupplierFormLPosition_Can_Delete",
                            Name = "AdminSupplierFormLPositionCanDelete"
                        },
                        new
                        {
                            Id = 186,
                            Description = "Admin_SupplierFormLPositionActual_Can_Access",
                            Name = "AdminSupplierFormLPositionActualCanAccess"
                        },
                        new
                        {
                            Id = 187,
                            Description = "Admin_SupplierFormLPositionActual_Can_Create",
                            Name = "AdminSupplierFormLPositionActualCanCreate"
                        },
                        new
                        {
                            Id = 188,
                            Description = "Admin_SupplierFormLPositionActual_Can_Update",
                            Name = "AdminSupplierFormLPositionActualCanUpdate"
                        },
                        new
                        {
                            Id = 189,
                            Description = "Admin_SupplierFormLPositionActual_Can_Delete",
                            Name = "AdminSupplierFormLPositionActualCanDelete"
                        },
                        new
                        {
                            Id = 190,
                            Description = "Admin_SupplierFormMeasurementParameter_Can_Access",
                            Name = "AdminSupplierFormMeasurementParameterCanAccess"
                        },
                        new
                        {
                            Id = 191,
                            Description = "Admin_SupplierFormMeasurementParameter_Can_Create",
                            Name = "AdminSupplierFormMeasurementParameterCanCreate"
                        },
                        new
                        {
                            Id = 192,
                            Description = "Admin_SupplierFormMeasurementParameter_Can_Update",
                            Name = "AdminSupplierFormMeasurementParameterCanUpdate"
                        },
                        new
                        {
                            Id = 193,
                            Description = "Admin_SupplierFormMeasurementParameter_Can_Delete",
                            Name = "AdminSupplierFormMeasurementParameterCanDelete"
                        },
                        new
                        {
                            Id = 194,
                            Description = "Admin_SupplierFormMeasurementParameterActual_Can_Access",
                            Name = "AdminSupplierFormMeasurementParameterActualCanAccess"
                        },
                        new
                        {
                            Id = 195,
                            Description = "Admin_SupplierFormMeasurementParameterActual_Can_Create",
                            Name = "AdminSupplierFormMeasurementParameterActualCanCreate"
                        },
                        new
                        {
                            Id = 196,
                            Description = "Admin_SupplierFormMeasurementParameterActual_Can_Update",
                            Name = "AdminSupplierFormMeasurementParameterActualCanUpdate"
                        },
                        new
                        {
                            Id = 197,
                            Description = "Admin_SupplierFormMeasurementParameterActual_Can_Delete",
                            Name = "AdminSupplierFormMeasurementParameterActualCanDelete"
                        },
                        new
                        {
                            Id = 198,
                            Description = "Admin_SupplierFormMicroSection_Can_Access",
                            Name = "AdminSupplierFormMicroSectionCanAccess"
                        },
                        new
                        {
                            Id = 199,
                            Description = "Admin_SupplierFormMicroSection_Can_Create",
                            Name = "AdminSupplierFormMicroSectionCanCreate"
                        },
                        new
                        {
                            Id = 200,
                            Description = "Admin_SupplierFormMicroSection_Can_Update",
                            Name = "AdminSupplierFormMicroSectionCanUpdate"
                        },
                        new
                        {
                            Id = 201,
                            Description = "Admin_SupplierFormMicroSection_Can_Delete",
                            Name = "AdminSupplierFormMicroSectionCanDelete"
                        },
                        new
                        {
                            Id = 202,
                            Description = "Admin_SupplierFormMicroSectionActual_Can_Access",
                            Name = "AdminSupplierFormMicroSectionActualCanAccess"
                        },
                        new
                        {
                            Id = 203,
                            Description = "Admin_SupplierFormMicroSectionActual_Can_Create",
                            Name = "AdminSupplierFormMicroSectionActualCanCreate"
                        },
                        new
                        {
                            Id = 204,
                            Description = "Admin_SupplierFormMicroSectionActual_Can_Update",
                            Name = "AdminSupplierFormMicroSectionActualCanUpdate"
                        },
                        new
                        {
                            Id = 205,
                            Description = "Admin_SupplierFormMicroSectionActual_Can_Delete",
                            Name = "AdminSupplierFormMicroSectionActualCanDelete"
                        },
                        new
                        {
                            Id = 206,
                            Description = "Admin_SupplierFormMPosition_Can_Access",
                            Name = "AdminSupplierFormMPositionCanAccess"
                        },
                        new
                        {
                            Id = 207,
                            Description = "Admin_SupplierFormMPosition_Can_Create",
                            Name = "AdminSupplierFormMPositionCanCreate"
                        },
                        new
                        {
                            Id = 208,
                            Description = "Admin_SupplierFormMPosition_Can_Update",
                            Name = "AdminSupplierFormMPositionCanUpdate"
                        },
                        new
                        {
                            Id = 209,
                            Description = "Admin_SupplierFormMPosition_Can_Delete",
                            Name = "AdminSupplierFormMPositionCanDelete"
                        },
                        new
                        {
                            Id = 210,
                            Description = "Admin_SupplierFormMPositionActual_Can_Access",
                            Name = "AdminSupplierFormMPositionActualCanAccess"
                        },
                        new
                        {
                            Id = 211,
                            Description = "Admin_SupplierFormMPositionActual_Can_Create",
                            Name = "AdminSupplierFormMPositionActualCanCreate"
                        },
                        new
                        {
                            Id = 212,
                            Description = "Admin_SupplierFormMPositionActual_Can_Update",
                            Name = "AdminSupplierFormMPositionActualCanUpdate"
                        },
                        new
                        {
                            Id = 213,
                            Description = "Admin_SupplierFormMPositionActual_Can_Delete",
                            Name = "AdminSupplierFormMPositionActualCanDelete"
                        },
                        new
                        {
                            Id = 214,
                            Description = "Admin_SupplierAttachment_Can_Access",
                            Name = "AdminSupplierAttachmentCanAccess"
                        },
                        new
                        {
                            Id = 215,
                            Description = "Admin_SupplierAttachment_Can_Create",
                            Name = "AdminSupplierAttachmentCanCreate"
                        },
                        new
                        {
                            Id = 216,
                            Description = "Admin_SupplierAttachment_Can_Update",
                            Name = "AdminSupplierAttachmentCanUpdate"
                        },
                        new
                        {
                            Id = 217,
                            Description = "Admin_SupplierAttachment_Can_Delete",
                            Name = "AdminSupplierAttachmentCanDelete"
                        },
                        new
                        {
                            Id = 218,
                            Description = "Admin_Inspection_Can_Access",
                            Name = "AdminInspectionCanAccess"
                        },
                        new
                        {
                            Id = 219,
                            Description = "Admin_Inspection_Can_Create",
                            Name = "AdminInspectionCanCreate"
                        },
                        new
                        {
                            Id = 220,
                            Description = "Admin_Inspection_Can_Update",
                            Name = "AdminInspectionCanUpdate"
                        },
                        new
                        {
                            Id = 221,
                            Description = "Admin_Inspection_Can_Delete",
                            Name = "AdminInspectionCanDelete"
                        },
                        new
                        {
                            Id = 222,
                            Description = "Admin_InspectionTools_Can_Access",
                            Name = "AdminInspectionToolsCanAccess"
                        },
                        new
                        {
                            Id = 223,
                            Description = "Admin_InspectionTools_Can_Create",
                            Name = "AdminInspectionToolsCanCreate"
                        },
                        new
                        {
                            Id = 224,
                            Description = "Admin_InspectionTools_Can_Update",
                            Name = "AdminInspectionToolsCanUpdate"
                        },
                        new
                        {
                            Id = 225,
                            Description = "Admin_InspectionTools_Can_Delete",
                            Name = "AdminInspectionToolsCanDelete"
                        },
                        new
                        {
                            Id = 226,
                            Description = "Admin_Instrument_Can_Access",
                            Name = "AdminInstrumentCanAccess"
                        },
                        new
                        {
                            Id = 227,
                            Description = "Admin_Instrument_Can_Create",
                            Name = "AdminInstrumentCanCreate"
                        },
                        new
                        {
                            Id = 228,
                            Description = "Admin_Instrument_Can_Update",
                            Name = "AdminInstrumentCanUpdate"
                        },
                        new
                        {
                            Id = 229,
                            Description = "Admin_Instrument_Can_Delete",
                            Name = "AdminInstrumentCanDelete"
                        },
                        new
                        {
                            Id = 230,
                            Description = "Admin_GRS_Can_Access",
                            Name = "AdminGRSCanAccess"
                        },
                        new
                        {
                            Id = 231,
                            Description = "Admin_GRS_Can_Create",
                            Name = "AdminGRSCanCreate"
                        },
                        new
                        {
                            Id = 232,
                            Description = "Admin_GRS_Can_Update",
                            Name = "AdminGRSCanUpdate"
                        },
                        new
                        {
                            Id = 233,
                            Description = "Admin_GRS_Can_Delete",
                            Name = "AdminGRSCanDelete"
                        },
                        new
                        {
                            Id = 234,
                            Description = "Admin_SAPPartInspectionPlan_Can_Access",
                            Name = "AdminSAPPartInspectionPlanCanAccess"
                        },
                        new
                        {
                            Id = 235,
                            Description = "Admin_SAPPartInspectionPlan_Can_Create",
                            Name = "AdminSAPPartInspectionPlanCanCreate"
                        },
                        new
                        {
                            Id = 236,
                            Description = "Admin_SAPPartInspectionPlan_Can_Update",
                            Name = "AdminSAPPartInspectionPlanCanUpdate"
                        },
                        new
                        {
                            Id = 237,
                            Description = "Admin_SAPPartInspectionPlan_Can_Delete",
                            Name = "AdminSAPPartInspectionPlanCanDelete"
                        },
                        new
                        {
                            Id = 238,
                            Description = "Admin_PCCodeInspectionToolsType_Can_Access",
                            Name = "AdminPCCodeInspectionToolsTypeCanAccess"
                        },
                        new
                        {
                            Id = 239,
                            Description = "Admin_PCCodeInspectionToolsType_Can_Create",
                            Name = "AdminPCCodeInspectionToolsTypeCanCreate"
                        },
                        new
                        {
                            Id = 240,
                            Description = "Admin_PCCodeInspectionToolsType_Can_Update",
                            Name = "AdminPCCodeInspectionToolsTypeCanUpdate"
                        },
                        new
                        {
                            Id = 241,
                            Description = "Admin_PCCodeInspectionToolsType_Can_Delete",
                            Name = "AdminPCCodeInspectionToolsTypeCanDelete"
                        },
                        new
                        {
                            Id = 242,
                            Description = "Admin_GRSSupplierForm_Can_Access",
                            Name = "AdminGRSSupplierFormCanAccess"
                        },
                        new
                        {
                            Id = 243,
                            Description = "Admin_GRSSupplierForm_Can_Create",
                            Name = "AdminGRSSupplierFormCanCreate"
                        },
                        new
                        {
                            Id = 244,
                            Description = "Admin_GRSSupplierForm_Can_Update",
                            Name = "AdminGRSSupplierFormCanUpdate"
                        },
                        new
                        {
                            Id = 245,
                            Description = "Admin_GRSSupplierForm_Can_Delete",
                            Name = "AdminGRSSupplierFormCanDelete"
                        },
                        new
                        {
                            Id = 246,
                            Description = "Admin_Part_Can_Access",
                            Name = "AdminPartCanAccess"
                        },
                        new
                        {
                            Id = 247,
                            Description = "Admin_Part_Can_Create",
                            Name = "AdminPartCanCreate"
                        },
                        new
                        {
                            Id = 248,
                            Description = "Admin_Part_Can_Update",
                            Name = "AdminPartCanUpdate"
                        },
                        new
                        {
                            Id = 249,
                            Description = "Admin_Part_Can_Delete",
                            Name = "AdminPartCanDelete"
                        },
                        new
                        {
                            Id = 250,
                            Description = "Admin_PartBowTwistParameter_Can_Access",
                            Name = "AdminPartBowTwistParameterCanAccess"
                        },
                        new
                        {
                            Id = 251,
                            Description = "Admin_PartBowTwistParameter_Can_Create",
                            Name = "AdminPartBowTwistParameterCanCreate"
                        },
                        new
                        {
                            Id = 252,
                            Description = "Admin_PartBowTwistParameter_Can_Update",
                            Name = "AdminPartBowTwistParameterCanUpdate"
                        },
                        new
                        {
                            Id = 253,
                            Description = "Admin_PartBowTwistParameter_Can_Delete",
                            Name = "AdminPartBowTwistParameterCanDelete"
                        },
                        new
                        {
                            Id = 254,
                            Description = "Admin_PartCountParameter_Can_Access",
                            Name = "AdminPartCountParameterCanAccess"
                        },
                        new
                        {
                            Id = 255,
                            Description = "Admin_PartCountParameter_Can_Create",
                            Name = "AdminPartCountParameterCanCreate"
                        },
                        new
                        {
                            Id = 256,
                            Description = "Admin_PartCountParameter_Can_Update",
                            Name = "AdminPartCountParameterCanUpdate"
                        },
                        new
                        {
                            Id = 257,
                            Description = "Admin_PartCountParameter_Can_Delete",
                            Name = "AdminPartCountParameterCanDelete"
                        },
                        new
                        {
                            Id = 258,
                            Description = "Admin_PartDateCode_Can_Access",
                            Name = "AdminPartDateCodeCanAccess"
                        },
                        new
                        {
                            Id = 259,
                            Description = "Admin_PartDateCode_Can_Create",
                            Name = "AdminPartDateCodeCanCreate"
                        },
                        new
                        {
                            Id = 260,
                            Description = "Admin_PartDateCode_Can_Update",
                            Name = "AdminPartDateCodeCanUpdate"
                        },
                        new
                        {
                            Id = 261,
                            Description = "Admin_PartDateCode_Can_Delete",
                            Name = "AdminPartDateCodeCanDelete"
                        },
                        new
                        {
                            Id = 262,
                            Description = "Admin_PartFunParameter_Can_Access",
                            Name = "AdminPartFunParameterCanAccess"
                        },
                        new
                        {
                            Id = 263,
                            Description = "Admin_PartFunParameter_Can_Create",
                            Name = "AdminPartFunParameterCanCreate"
                        },
                        new
                        {
                            Id = 264,
                            Description = "Admin_PartFunParameter_Can_Update",
                            Name = "AdminPartFunParameterCanUpdate"
                        },
                        new
                        {
                            Id = 265,
                            Description = "Admin_PartFunParameter_Can_Delete",
                            Name = "AdminPartFunParameterCanDelete"
                        },
                        new
                        {
                            Id = 266,
                            Description = "Admin_PartLPositionTolerance_Can_Access",
                            Name = "AdminPartLPositionToleranceCanAccess"
                        },
                        new
                        {
                            Id = 267,
                            Description = "Admin_PartLPositionTolerance_Can_Create",
                            Name = "AdminPartLPositionToleranceCanCreate"
                        },
                        new
                        {
                            Id = 268,
                            Description = "Admin_PartLPositionTolerance_Can_Update",
                            Name = "AdminPartLPositionToleranceCanUpdate"
                        },
                        new
                        {
                            Id = 269,
                            Description = "Admin_PartLPositionTolerance_Can_Delete",
                            Name = "AdminPartLPositionToleranceCanDelete"
                        },
                        new
                        {
                            Id = 270,
                            Description = "Admin_PartMeasurementParameter_Can_Access",
                            Name = "AdminPartMeasurementParameterCanAccess"
                        },
                        new
                        {
                            Id = 271,
                            Description = "Admin_PartMeasurementParameter_Can_Create",
                            Name = "AdminPartMeasurementParameterCanCreate"
                        },
                        new
                        {
                            Id = 272,
                            Description = "Admin_PartMeasurementParameter_Can_Update",
                            Name = "AdminPartMeasurementParameterCanUpdate"
                        },
                        new
                        {
                            Id = 273,
                            Description = "Admin_PartMeasurementParameter_Can_Delete",
                            Name = "AdminPartMeasurementParameterCanDelete"
                        },
                        new
                        {
                            Id = 274,
                            Description = "Admin_PartMicrosection_Can_Access",
                            Name = "AdminPartMicrosectionCanAccess"
                        },
                        new
                        {
                            Id = 275,
                            Description = "Admin_PartMicrosection_Can_Create",
                            Name = "AdminPartMicrosectionCanCreate"
                        },
                        new
                        {
                            Id = 276,
                            Description = "Admin_PartMicrosection_Can_Update",
                            Name = "AdminPartMicrosectionCanUpdate"
                        },
                        new
                        {
                            Id = 277,
                            Description = "Admin_PartMicrosection_Can_Delete",
                            Name = "AdminPartMicrosectionCanDelete"
                        },
                        new
                        {
                            Id = 278,
                            Description = "Admin_PartMPositionTolerance_Can_Access",
                            Name = "AdminPartMPositionToleranceCanAccess"
                        },
                        new
                        {
                            Id = 279,
                            Description = "Admin_PartMPositionTolerance_Can_Create",
                            Name = "AdminPartMPositionToleranceCanCreate"
                        },
                        new
                        {
                            Id = 280,
                            Description = "Admin_PartMPositionTolerance_Can_Update",
                            Name = "AdminPartMPositionToleranceCanUpdate"
                        },
                        new
                        {
                            Id = 281,
                            Description = "Admin_PartMPositionTolerance_Can_Delete",
                            Name = "AdminPartMPositionToleranceCanDelete"
                        },
                        new
                        {
                            Id = 282,
                            Description = "Admin_PartResultOrientedParameter_Can_Access",
                            Name = "AdminPartResultOrientedParameterCanAccess"
                        },
                        new
                        {
                            Id = 283,
                            Description = "Admin_PartResultOrientedParameter_Can_Create",
                            Name = "AdminPartResultOrientedParameterCanCreate"
                        },
                        new
                        {
                            Id = 284,
                            Description = "Admin_PartResultOrientedParameter_Can_Update",
                            Name = "AdminPartResultOrientedParameterCanUpdate"
                        },
                        new
                        {
                            Id = 285,
                            Description = "Admin_PartResultOrientedParameter_Can_Delete",
                            Name = "AdminPartResultOrientedParameterCanDelete"
                        },
                        new
                        {
                            Id = 286,
                            Description = "Admin_PartTestReportParameter_Can_Access",
                            Name = "AdminPartTestReportParameterCanAccess"
                        },
                        new
                        {
                            Id = 287,
                            Description = "Admin_PartTestReportParameter_Can_Create",
                            Name = "AdminPartTestReportParameterCanCreate"
                        },
                        new
                        {
                            Id = 288,
                            Description = "Admin_PartTestReportParameter_Can_Update",
                            Name = "AdminPartTestReportParameterCanUpdate"
                        },
                        new
                        {
                            Id = 289,
                            Description = "Admin_PartTestReportParameter_Can_Delete",
                            Name = "AdminPartTestReportParameterCanDelete"
                        },
                        new
                        {
                            Id = 290,
                            Description = "Admin_Form_Can_Access",
                            Name = "AdminFormCanAccess"
                        },
                        new
                        {
                            Id = 291,
                            Description = "Admin_Form_Can_Create",
                            Name = "AdminFormCanCreate"
                        },
                        new
                        {
                            Id = 292,
                            Description = "Admin_Form_Can_Update",
                            Name = "AdminFormCanUpdate"
                        },
                        new
                        {
                            Id = 293,
                            Description = "Admin_Form_Can_Delete",
                            Name = "AdminFormCanDelete"
                        },
                        new
                        {
                            Id = 294,
                            Description = "Admin_FormBowTwistParameter_Can_Access",
                            Name = "AdminFormBowTwistParameterCanAccess"
                        },
                        new
                        {
                            Id = 295,
                            Description = "Admin_FormBowTwistParameter_Can_Create",
                            Name = "AdminFormBowTwistParameterCanCreate"
                        },
                        new
                        {
                            Id = 296,
                            Description = "Admin_FormBowTwistParameter_Can_Update",
                            Name = "AdminFormBowTwistParameterCanUpdate"
                        },
                        new
                        {
                            Id = 297,
                            Description = "Admin_FormBowTwistParameter_Can_Delete",
                            Name = "AdminFormBowTwistParameterCanDelete"
                        },
                        new
                        {
                            Id = 298,
                            Description = "Admin_FormCountParameter_Can_Access",
                            Name = "AdminFormCountParameterCanAccess"
                        },
                        new
                        {
                            Id = 299,
                            Description = "Admin_FormCountParameter_Can_Create",
                            Name = "AdminFormCountParameterCanCreate"
                        },
                        new
                        {
                            Id = 300,
                            Description = "Admin_FormCountParameter_Can_Update",
                            Name = "AdminFormCountParameterCanUpdate"
                        },
                        new
                        {
                            Id = 301,
                            Description = "Admin_FormCountParameter_Can_Delete",
                            Name = "AdminFormCountParameterCanDelete"
                        },
                        new
                        {
                            Id = 302,
                            Description = "Admin_FormFunPara_Can_Access",
                            Name = "AdminFormFunParaCanAccess"
                        },
                        new
                        {
                            Id = 303,
                            Description = "Admin_FormFunPara_Can_Create",
                            Name = "AdminFormFunParaCanCreate"
                        },
                        new
                        {
                            Id = 304,
                            Description = "Admin_FormFunPara_Can_Update",
                            Name = "AdminFormFunParaCanUpdate"
                        },
                        new
                        {
                            Id = 305,
                            Description = "Admin_FormFunPara_Can_Delete",
                            Name = "AdminFormFunParaCanDelete"
                        },
                        new
                        {
                            Id = 306,
                            Description = "Admin_FormFunParaActual_Can_Access",
                            Name = "AdminFormFunParaActualCanAccess"
                        },
                        new
                        {
                            Id = 307,
                            Description = "Admin_FormFunParaActual_Can_Create",
                            Name = "AdminFormFunParaActualCanCreate"
                        },
                        new
                        {
                            Id = 308,
                            Description = "Admin_FormFunParaActual_Can_Update",
                            Name = "AdminFormFunParaActualCanUpdate"
                        },
                        new
                        {
                            Id = 309,
                            Description = "Admin_FormFunParaActual_Can_Delete",
                            Name = "AdminFormFunParaActualCanDelete"
                        },
                        new
                        {
                            Id = 310,
                            Description = "Admin_FormLPosition_Can_Access",
                            Name = "AdminFormLPositionCanAccess"
                        },
                        new
                        {
                            Id = 311,
                            Description = "Admin_FormLPosition_Can_Create",
                            Name = "AdminFormLPositionCanCreate"
                        },
                        new
                        {
                            Id = 312,
                            Description = "Admin_FormLPosition_Can_Update",
                            Name = "AdminFormLPositionCanUpdate"
                        },
                        new
                        {
                            Id = 313,
                            Description = "Admin_FormLPosition_Can_Delete",
                            Name = "AdminFormLPositionCanDelete"
                        },
                        new
                        {
                            Id = 314,
                            Description = "Admin_FormLPositionActual_Can_Access",
                            Name = "AdminFormLPositionActualCanAccess"
                        },
                        new
                        {
                            Id = 315,
                            Description = "Admin_FormLPositionActual_Can_Create",
                            Name = "AdminFormLPositionActualCanCreate"
                        },
                        new
                        {
                            Id = 316,
                            Description = "Admin_FormLPositionActual_Can_Update",
                            Name = "AdminFormLPositionActualCanUpdate"
                        },
                        new
                        {
                            Id = 317,
                            Description = "Admin_FormLPositionActual_Can_Delete",
                            Name = "AdminFormLPositionActualCanDelete"
                        },
                        new
                        {
                            Id = 318,
                            Description = "Admin_FormMeasurementParameter_Can_Access",
                            Name = "AdminFormMeasurementParameterCanAccess"
                        },
                        new
                        {
                            Id = 319,
                            Description = "Admin_FormMeasurementParameter_Can_Create",
                            Name = "AdminFormMeasurementParameterCanCreate"
                        },
                        new
                        {
                            Id = 320,
                            Description = "Admin_FormMeasurementParameter_Can_Update",
                            Name = "AdminFormMeasurementParameterCanUpdate"
                        },
                        new
                        {
                            Id = 321,
                            Description = "Admin_FormMeasurementParameter_Can_Delete",
                            Name = "AdminFormMeasurementParameterCanDelete"
                        },
                        new
                        {
                            Id = 322,
                            Description = "Admin_FormMeasurementParameterActual_Can_Access",
                            Name = "AdminFormMeasurementParameterActualCanAccess"
                        },
                        new
                        {
                            Id = 323,
                            Description = "Admin_FormMeasurementParameterActual_Can_Create",
                            Name = "AdminFormMeasurementParameterActualCanCreate"
                        },
                        new
                        {
                            Id = 324,
                            Description = "Admin_FormMeasurementParameterActual_Can_Update",
                            Name = "AdminFormMeasurementParameterActualCanUpdate"
                        },
                        new
                        {
                            Id = 325,
                            Description = "Admin_FormMeasurementParameterActual_Can_Delete",
                            Name = "AdminFormMeasurementParameterActualCanDelete"
                        },
                        new
                        {
                            Id = 326,
                            Description = "Admin_FormBowTwistActual_Can_Access",
                            Name = "AdminFormBowTwistActualCanAccess"
                        },
                        new
                        {
                            Id = 327,
                            Description = "Admin_FormBowTwistActual_Can_Create",
                            Name = "AdminFormBowTwistActualCanCreate"
                        },
                        new
                        {
                            Id = 328,
                            Description = "Admin_FormBowTwistActual_Can_Update",
                            Name = "AdminFormBowTwistActualCanUpdate"
                        },
                        new
                        {
                            Id = 329,
                            Description = "Admin_FormBowTwistActual_Can_Delete",
                            Name = "AdminFormBowTwistActualCanDelete"
                        },
                        new
                        {
                            Id = 330,
                            Description = "Admin_FormMicroSection_Can_Access",
                            Name = "AdminFormMicroSectionCanAccess"
                        },
                        new
                        {
                            Id = 331,
                            Description = "Admin_FormMicroSection_Can_Create",
                            Name = "AdminFormMicroSectionCanCreate"
                        },
                        new
                        {
                            Id = 332,
                            Description = "Admin_FormMicroSection_Can_Update",
                            Name = "AdminFormMicroSectionCanUpdate"
                        },
                        new
                        {
                            Id = 333,
                            Description = "Admin_FormMicroSection_Can_Delete",
                            Name = "AdminFormMicroSectionCanDelete"
                        },
                        new
                        {
                            Id = 334,
                            Description = "Admin_FormMicroSectionActual_Can_Access",
                            Name = "AdminFormMicroSectionActualCanAccess"
                        },
                        new
                        {
                            Id = 335,
                            Description = "Admin_FormMicroSectionActual_Can_Create",
                            Name = "AdminFormMicroSectionActualCanCreate"
                        },
                        new
                        {
                            Id = 336,
                            Description = "Admin_FormMicroSectionActual_Can_Update",
                            Name = "AdminFormMicroSectionActualCanUpdate"
                        },
                        new
                        {
                            Id = 337,
                            Description = "Admin_FormMicroSectionActual_Can_Delete",
                            Name = "AdminFormMicroSectionActualCanDelete"
                        },
                        new
                        {
                            Id = 338,
                            Description = "Admin_FormMPosition_Can_Access",
                            Name = "AdminFormMPositionCanAccess"
                        },
                        new
                        {
                            Id = 339,
                            Description = "Admin_FormMPosition_Can_Create",
                            Name = "AdminFormMPositionCanCreate"
                        },
                        new
                        {
                            Id = 340,
                            Description = "Admin_FormMPosition_Can_Update",
                            Name = "AdminFormMPositionCanUpdate"
                        },
                        new
                        {
                            Id = 341,
                            Description = "Admin_FormMPosition_Can_Delete",
                            Name = "AdminFormMPositionCanDelete"
                        },
                        new
                        {
                            Id = 342,
                            Description = "Admin_FormMPositionActual_Can_Access",
                            Name = "AdminFormMPositionActualCanAccess"
                        },
                        new
                        {
                            Id = 343,
                            Description = "Admin_FormMPositionActual_Can_Create",
                            Name = "AdminFormMPositionActualCanCreate"
                        },
                        new
                        {
                            Id = 344,
                            Description = "Admin_FormMPositionActual_Can_Update",
                            Name = "AdminFormMPositionActualCanUpdate"
                        },
                        new
                        {
                            Id = 345,
                            Description = "Admin_FormMPositionActual_Can_Delete",
                            Name = "AdminFormMPositionActualCanDelete"
                        },
                        new
                        {
                            Id = 346,
                            Description = "Admin_FormPackaging_Can_Access",
                            Name = "AdminFormPackagingCanAccess"
                        },
                        new
                        {
                            Id = 347,
                            Description = "Admin_FormPackaging_Can_Create",
                            Name = "AdminFormPackagingCanCreate"
                        },
                        new
                        {
                            Id = 348,
                            Description = "Admin_FormPackaging_Can_Update",
                            Name = "AdminFormPackagingCanUpdate"
                        },
                        new
                        {
                            Id = 349,
                            Description = "Admin_FormPackaging_Can_Delete",
                            Name = "AdminFormPackagingCanDelete"
                        },
                        new
                        {
                            Id = 350,
                            Description = "Admin_FormPartDateCode_Can_Access",
                            Name = "AdminFormPartDateCodeCanAccess"
                        },
                        new
                        {
                            Id = 351,
                            Description = "Admin_FormPartDateCode_Can_Create",
                            Name = "AdminFormPartDateCodeCanCreate"
                        },
                        new
                        {
                            Id = 352,
                            Description = "Admin_FormPartDateCode_Can_Update",
                            Name = "AdminFormPartDateCodeCanUpdate"
                        },
                        new
                        {
                            Id = 353,
                            Description = "Admin_FormPartDateCode_Can_Delete",
                            Name = "AdminFormPartDateCodeCanDelete"
                        },
                        new
                        {
                            Id = 354,
                            Description = "Admin_FormPartSAPFailedQty_Can_Access",
                            Name = "AdminFormPartSAPFailedQtyCanAccess"
                        },
                        new
                        {
                            Id = 355,
                            Description = "Admin_FormPartSAPFailedQty_Can_Create",
                            Name = "AdminFormPartSAPFailedQtyCanCreate"
                        },
                        new
                        {
                            Id = 356,
                            Description = "Admin_FormPartSAPFailedQty_Can_Update",
                            Name = "AdminFormPartSAPFailedQtyCanUpdate"
                        },
                        new
                        {
                            Id = 357,
                            Description = "Admin_FormPartSAPFailedQty_Can_Delete",
                            Name = "AdminFormPartSAPFailedQtyCanDelete"
                        },
                        new
                        {
                            Id = 358,
                            Description = "Admin_FormResultOrientedParameter_Can_Access",
                            Name = "AdminFormResultOrientedParameterCanAccess"
                        },
                        new
                        {
                            Id = 359,
                            Description = "Admin_FormResultOrientedParameter_Can_Create",
                            Name = "AdminFormResultOrientedParameterCanCreate"
                        },
                        new
                        {
                            Id = 360,
                            Description = "Admin_FormResultOrientedParameter_Can_Update",
                            Name = "AdminFormResultOrientedParameterCanUpdate"
                        },
                        new
                        {
                            Id = 361,
                            Description = "Admin_FormResultOrientedParameter_Can_Delete",
                            Name = "AdminFormResultOrientedParameterCanDelete"
                        },
                        new
                        {
                            Id = 362,
                            Description = "Admin_FormSAPParameter_Can_Access",
                            Name = "AdminFormSAPParameterCanAccess"
                        },
                        new
                        {
                            Id = 363,
                            Description = "Admin_FormSAPParameter_Can_Create",
                            Name = "AdminFormSAPParameterCanCreate"
                        },
                        new
                        {
                            Id = 364,
                            Description = "Admin_FormSAPParameter_Can_Update",
                            Name = "AdminFormSAPParameterCanUpdate"
                        },
                        new
                        {
                            Id = 365,
                            Description = "Admin_FormSAPParameter_Can_Delete",
                            Name = "AdminFormSAPParameterCanDelete"
                        },
                        new
                        {
                            Id = 366,
                            Description = "Admin_FormSpecialParameter_Can_Access",
                            Name = "AdminFormSpecialParameterCanAccess"
                        },
                        new
                        {
                            Id = 367,
                            Description = "Admin_FormSpecialParameter_Can_Create",
                            Name = "AdminFormSpecialParameterCanCreate"
                        },
                        new
                        {
                            Id = 368,
                            Description = "Admin_FormSpecialParameter_Can_Update",
                            Name = "AdminFormSpecialParameterCanUpdate"
                        },
                        new
                        {
                            Id = 369,
                            Description = "Admin_FormSpecialParameter_Can_Delete",
                            Name = "AdminFormSpecialParameterCanDelete"
                        },
                        new
                        {
                            Id = 370,
                            Description = "Admin_FormStatus_Can_Access",
                            Name = "AdminFormStatusCanAccess"
                        },
                        new
                        {
                            Id = 371,
                            Description = "Admin_FormStatus_Can_Create",
                            Name = "AdminFormStatusCanCreate"
                        },
                        new
                        {
                            Id = 372,
                            Description = "Admin_FormStatus_Can_Update",
                            Name = "AdminFormStatusCanUpdate"
                        },
                        new
                        {
                            Id = 373,
                            Description = "Admin_FormStatus_Can_Delete",
                            Name = "AdminFormStatusCanDelete"
                        },
                        new
                        {
                            Id = 374,
                            Description = "Admin_FormTestReport_Can_Access",
                            Name = "AdminFormTestReportCanAccess"
                        },
                        new
                        {
                            Id = 375,
                            Description = "Admin_FormTestReport_Can_Create",
                            Name = "AdminFormTestReportCanCreate"
                        },
                        new
                        {
                            Id = 376,
                            Description = "Admin_FormTestReport_Can_Update",
                            Name = "AdminFormTestReportCanUpdate"
                        },
                        new
                        {
                            Id = 377,
                            Description = "Admin_FormTestReport_Can_Delete",
                            Name = "AdminFormTestReportCanDelete"
                        },
                        new
                        {
                            Id = 378,
                            Description = "Admin_FormVIS_Can_Access",
                            Name = "AdminFormVISCanAccess"
                        },
                        new
                        {
                            Id = 379,
                            Description = "Admin_FormVIS_Can_Create",
                            Name = "AdminFormVISCanCreate"
                        },
                        new
                        {
                            Id = 380,
                            Description = "Admin_FormVIS_Can_Update",
                            Name = "AdminFormVISCanUpdate"
                        },
                        new
                        {
                            Id = 381,
                            Description = "Admin_FormVIS_Can_Delete",
                            Name = "AdminFormVISCanDelete"
                        },
                        new
                        {
                            Id = 382,
                            Description = "Admin_FormType_Can_Access",
                            Name = "AdminFormTypeCanAccess"
                        },
                        new
                        {
                            Id = 383,
                            Description = "Admin_FormType_Can_Create",
                            Name = "AdminFormTypeCanCreate"
                        },
                        new
                        {
                            Id = 384,
                            Description = "Admin_FormType_Can_Update",
                            Name = "AdminFormTypeCanUpdate"
                        },
                        new
                        {
                            Id = 385,
                            Description = "Admin_FormType_Can_Delete",
                            Name = "AdminFormTypeCanDelete"
                        },
                        new
                        {
                            Id = 386,
                            Description = "Admin_Commodity_Can_Access",
                            Name = "AdminCommodityCanAccess"
                        },
                        new
                        {
                            Id = 387,
                            Description = "Admin_Commodity_Can_Create",
                            Name = "AdminCommodityCanCreate"
                        },
                        new
                        {
                            Id = 388,
                            Description = "Admin_Commodity_Can_Update",
                            Name = "AdminCommodityCanUpdate"
                        },
                        new
                        {
                            Id = 389,
                            Description = "Admin_Commodity_Can_Delete",
                            Name = "AdminCommodityCanDelete"
                        },
                        new
                        {
                            Id = 390,
                            Description = "Admin_Certification_Can_Access",
                            Name = "AdminCertificationCanAccess"
                        },
                        new
                        {
                            Id = 391,
                            Description = "Admin_Certification_Can_Create",
                            Name = "AdminCertificationCanCreate"
                        },
                        new
                        {
                            Id = 392,
                            Description = "Admin_Certification_Can_Update",
                            Name = "AdminCertificationCanUpdate"
                        },
                        new
                        {
                            Id = 393,
                            Description = "Admin_Certification_Can_Delete",
                            Name = "AdminCertificationCanDelete"
                        },
                        new
                        {
                            Id = 394,
                            Description = "Admin_MaterialGroup_Can_Access",
                            Name = "AdminMaterialGroupCanAccess"
                        },
                        new
                        {
                            Id = 395,
                            Description = "Admin_MaterialGroup_Can_Create",
                            Name = "AdminMaterialGroupCanCreate"
                        },
                        new
                        {
                            Id = 396,
                            Description = "Admin_MaterialGroup_Can_Update",
                            Name = "AdminMaterialGroupCanUpdate"
                        },
                        new
                        {
                            Id = 397,
                            Description = "Admin_MaterialGroup_Can_Delete",
                            Name = "AdminMaterialGroupCanDelete"
                        },
                        new
                        {
                            Id = 398,
                            Description = "Admin_ParameterManagement_Can_Access",
                            Name = "AdminParameterManagementCanAccess"
                        },
                        new
                        {
                            Id = 399,
                            Description = "Admin_ParameterManagement_Can_Create",
                            Name = "AdminParameterManagementCanCreate"
                        },
                        new
                        {
                            Id = 400,
                            Description = "Admin_ParameterManagement_Can_Update",
                            Name = "AdminParameterManagementCanUpdate"
                        },
                        new
                        {
                            Id = 401,
                            Description = "Admin_ParameterManagement_Can_Delete",
                            Name = "AdminParameterManagementCanDelete"
                        },
                        new
                        {
                            Id = 402,
                            Description = "Admin_TestReport_Can_Access",
                            Name = "AdminTestReportCanAccess"
                        },
                        new
                        {
                            Id = 403,
                            Description = "Admin_TestReport_Can_Create",
                            Name = "AdminTestReportCanCreate"
                        },
                        new
                        {
                            Id = 404,
                            Description = "Admin_TestReport_Can_Update",
                            Name = "AdminTestReportCanUpdate"
                        },
                        new
                        {
                            Id = 405,
                            Description = "Admin_TestReport_Can_Delete",
                            Name = "AdminTestReportCanDelete"
                        },
                        new
                        {
                            Id = 406,
                            Description = "Admin_ParameterTypeCode_Can_Access",
                            Name = "AdminParameterTypeCodeCanAccess"
                        },
                        new
                        {
                            Id = 407,
                            Description = "Admin_ParameterTypeCode_Can_Create",
                            Name = "AdminParameterTypeCodeCanCreate"
                        },
                        new
                        {
                            Id = 408,
                            Description = "Admin_ParameterTypeCode_Can_Update",
                            Name = "AdminParameterTypeCodeCanUpdate"
                        },
                        new
                        {
                            Id = 409,
                            Description = "Admin_ParameterTypeCode_Can_Delete",
                            Name = "AdminParameterTypeCodeCanDelete"
                        },
                        new
                        {
                            Id = 414,
                            Description = "Admin_WorkCellUser_Can_Access",
                            Name = "AdminWorkCellUserCanAccess"
                        },
                        new
                        {
                            Id = 415,
                            Description = "Admin_WorkCellUser_Can_Create",
                            Name = "AdminWorkCellUserCanCreate"
                        },
                        new
                        {
                            Id = 416,
                            Description = "Admin_WorkCellUser_Can_Update",
                            Name = "AdminWorkCellUserCanUpdate"
                        },
                        new
                        {
                            Id = 417,
                            Description = "Admin_WorkCellUser_Can_Delete",
                            Name = "AdminWorkCellUserCanDelete"
                        },
                        new
                        {
                            Id = 418,
                            Description = "Admin_PartDimension_Can_Access",
                            Name = "AdminPartDimensionCanAccess"
                        },
                        new
                        {
                            Id = 419,
                            Description = "Admin_PartDimension_Can_Create",
                            Name = "AdminPartDimensionCanCreate"
                        },
                        new
                        {
                            Id = 420,
                            Description = "Admin_PartDimension_Can_Update",
                            Name = "AdminPartDimensionCanUpdate"
                        },
                        new
                        {
                            Id = 421,
                            Description = "Admin_PartDimension_Can_Delete",
                            Name = "AdminPartDimensionCanDelete"
                        },
                        new
                        {
                            Id = 422,
                            Description = "Admin_BowTwistFormula_Can_Access",
                            Name = "AdminBowTwistFormulaCanAccess"
                        },
                        new
                        {
                            Id = 423,
                            Description = "Admin_BowTwistFormula_Can_Create",
                            Name = "AdminBowTwistFormulaCanCreate"
                        },
                        new
                        {
                            Id = 424,
                            Description = "Admin_BowTwistFormula_Can_Update",
                            Name = "AdminBowTwistFormulaCanUpdate"
                        },
                        new
                        {
                            Id = 425,
                            Description = "Admin_BowTwistFormula_Can_Delete",
                            Name = "AdminBowTwistFormulaCanDelete"
                        },
                        new
                        {
                            Id = 426,
                            Description = "Admin_DCCConfiguration_Can_Access",
                            Name = "AdminDCCConfigurationCanAccess"
                        },
                        new
                        {
                            Id = 427,
                            Description = "Admin_DCCConfiguration_Can_Create",
                            Name = "AdminDCCConfigurationCanCreate"
                        },
                        new
                        {
                            Id = 428,
                            Description = "Admin_DCCConfiguration_Can_Update",
                            Name = "AdminDCCConfigurationCanUpdate"
                        },
                        new
                        {
                            Id = 429,
                            Description = "Admin_DCCConfiguration_Can_Delete",
                            Name = "AdminDCCConfigurationCanDelete"
                        },
                        new
                        {
                            Id = 430,
                            Description = "Admin_CommodityCategory_Can_Access",
                            Name = "AdminCommodityCategoryCanAccess"
                        },
                        new
                        {
                            Id = 431,
                            Description = "Admin_CommodityCategory_Can_Create",
                            Name = "AdminCommodityCategoryCanCreate"
                        },
                        new
                        {
                            Id = 432,
                            Description = "Admin_CommodityCategory_Can_Update",
                            Name = "AdminCommodityCategoryCanUpdate"
                        },
                        new
                        {
                            Id = 433,
                            Description = "Admin_CommodityCategory_Can_Delete",
                            Name = "AdminCommodityCategoryCanDelete"
                        },
                        new
                        {
                            Id = 434,
                            Description = "Admin_Supplier_Can_Access",
                            Name = "AdminSupplierCanAccess"
                        },
                        new
                        {
                            Id = 435,
                            Description = "Admin_Supplier_Can_Create",
                            Name = "AdminSupplierCanCreate"
                        },
                        new
                        {
                            Id = 436,
                            Description = "Admin_Supplier_Can_Update",
                            Name = "AdminSupplierCanUpdate"
                        },
                        new
                        {
                            Id = 437,
                            Description = "Admin_Supplier_Can_Delete",
                            Name = "AdminSupplierCanDelete"
                        },
                        new
                        {
                            Id = 438,
                            Description = "Admin_NonJabilUser_Can_Access",
                            Name = "AdminNonJabilUserCanAccess"
                        },
                        new
                        {
                            Id = 439,
                            Description = "Admin_NonJabilUser_Can_Create",
                            Name = "AdminNonJabilUserCanCreate"
                        },
                        new
                        {
                            Id = 440,
                            Description = "Admin_NonJabilUser_Can_Update",
                            Name = "AdminNonJabilUserCanUpdate"
                        },
                        new
                        {
                            Id = 441,
                            Description = "Admin_NonJabilUser_Can_Delete",
                            Name = "AdminNonJabilUserCanDelete"
                        },
                        new
                        {
                            Id = 442,
                            Description = "Admin_SAPPartInspectionPlanComment_Can_Access",
                            Name = "AdminSAPPartInspectionPlanCommentCanAccess"
                        },
                        new
                        {
                            Id = 443,
                            Description = "Admin_SAPPartInspectionPlanComment_Can_Create",
                            Name = "AdminSAPPartInspectionPlanCommentCanCreate"
                        },
                        new
                        {
                            Id = 444,
                            Description = "Admin_SAPPartInspectionPlanComment_Can_Update",
                            Name = "AdminSAPPartInspectionPlanCommentCanUpdate"
                        },
                        new
                        {
                            Id = 445,
                            Description = "Admin_SAPPartInspectionPlanComment_Can_Delete",
                            Name = "AdminSAPPartInspectionPlanCommentCanDelete"
                        },
                        new
                        {
                            Id = 446,
                            Description = "Admin_PurchaseOrder_Can_Access",
                            Name = "AdminPurchaseOrderCanAccess"
                        },
                        new
                        {
                            Id = 447,
                            Description = "Admin_PurchaseOrder_Can_Create",
                            Name = "AdminPurchaseOrderCanCreate"
                        },
                        new
                        {
                            Id = 448,
                            Description = "Admin_PurchaseOrder_Can_Update",
                            Name = "AdminPurchaseOrderCanUpdate"
                        },
                        new
                        {
                            Id = 449,
                            Description = "Admin_PurchaseOrder_Can_Delete",
                            Name = "AdminPurchaseOrderCanDelete"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.ProductLifeCycleStageModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ProductLifeCycleStageId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductLifeCycleStage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Prototype",
                            IsEnabled = false,
                            Name = "Prototype"
                        },
                        new
                        {
                            Id = 2,
                            Description = "NPI",
                            IsEnabled = false,
                            Name = "NPI"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Product Part Qualification",
                            IsEnabled = false,
                            Name = "Product_Part_Qualification"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Production Ramp Up",
                            IsEnabled = false,
                            Name = "Production_Ramp_Up"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Mass Production",
                            IsEnabled = false,
                            Name = "Mass_Production"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Product_Phase_Out",
                            IsEnabled = false,
                            Name = "Product_Phase_Out"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Other",
                            IsEnabled = false,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.StateTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("StateTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StateType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Draft",
                            IsEnabled = false,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New Inspection Plan Submission Required By Supplier",
                            IsEnabled = false,
                            Name = "New_Inspection_Plan_Submission_Required_By_Supplier"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pending Approval By Jabil",
                            IsEnabled = false,
                            Name = "Pending_Approval_By_Jabil"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Approved By SQE",
                            IsEnabled = false,
                            Name = "Approved_By_SQE"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Rejected By SQE",
                            IsEnabled = false,
                            Name = "Rejected_By_SQE"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Deactivated By SQE",
                            IsEnabled = false,
                            Name = "Deactivated_By_SQE"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Redefined By SQE",
                            IsEnabled = false,
                            Name = "Redefined_By_SQE"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Approved By DCC",
                            IsEnabled = false,
                            Name = "Approved_By_DCC"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Rejected By DCC",
                            IsEnabled = false,
                            Name = "Rejected_By_DCC"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.StatusTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StatusType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Active",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Inactive",
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.SyncSAPDataTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("SyncSAPDataTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SyncSAPDataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Last-Sync-Material-Group",
                            Name = "Last_Sync_MaterialGroup"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Last-Sync-Part",
                            Name = "Last_Sync_Part"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Last-Sync-Commodity",
                            Name = "Last_Sync_Commodity"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Last-Sync-Supplier",
                            Name = "Last_Sync_Supplier"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Last-Sync-PurchaseOrder",
                            Name = "Last_Sync_PurchaseOrder"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.SyncTM1DataTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("SyncTM1DataTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SyncTM1DataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Last-Sync-TM1-Division",
                            Name = "Last_Sync_Division"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Last-Sync-TM1-Site",
                            Name = "Last_Sync_Site"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.UserTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("UserTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Supplier",
                            IsEnabled = false,
                            Name = "Supplier"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Customer",
                            IsEnabled = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Description = "User",
                            IsEnabled = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.EnumModels.WarPageModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("WarPageId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WarPage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bow L",
                            IsEnabled = false,
                            Name = "Bow_L"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bow W",
                            IsEnabled = false,
                            Name = "Bow_W"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Twist",
                            IsEnabled = false,
                            Name = "Twist"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Specific Warpage L",
                            IsEnabled = false,
                            Name = "Specific_Warpage_L"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Specific Warpage W",
                            IsEnabled = false,
                            Name = "Specific_Warpage_W"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Specific Twist",
                            IsEnabled = false,
                            Name = "Specific_Twist"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.AdminCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdminCertificationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssessmentBodyId")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("AssessmentBodyName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("CertificateEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("((CURRENT_TIMESTAMP))");

                    b.Property<DateTimeOffset>("CertificateStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("((CURRENT_TIMESTAMP))");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("AdminCertification");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.AdminCertificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdminCertificationAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdminCertificateId")
                        .HasColumnType("integer");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("AdminCertificateId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("AdminCertificationAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SavePath")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("TempSavePath")
                        .HasColumnType("text");

                    b.Property<string>("Template")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.BowTwistFormula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BowTwistFormulaId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Equation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("WarPageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("WarPageId");

                    b.ToTable("BowTwistFormula");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BuyerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BuyerCode")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerMail")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CTParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CTParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("CTParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommodityId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppearanceInspectionItem")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("CommodityCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommodityCategoryOptionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CommodityValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CommodityValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("FunctionTestItem")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SAPCommodityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CommodityCategoryId");

                    b.HasIndex("CommodityCategoryOptionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CommodityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommodityCategoryId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CommodityCategoryOptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommodityCategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CommodityCategoryOptionId");

                    b.HasIndex("CommodityCategoryTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("CommodityCategory");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CommodityPartNumberSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommodityPartNumberSiteId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SiteNo")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("CommodityPartNumberSite");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CompletedGRS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompletedGRSId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("GRSNo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PartNo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UDCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("CompletedGRS");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("RegionId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackupSavePath")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CAFPath")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CAFTempPath")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DCCSavePath")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DCCConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DCCConfigurationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DeptCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DocLevel")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteNo")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.ToTable("DCCConfiguration");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DefectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DefectTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("DefectType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Description = "Information Technology",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "Information Technology",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DispositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DispositionTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("DispositionType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivisionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailTemplateId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Subject")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchDC")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("BowTwistDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("BuyerID")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DANo")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("DCRequirement")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<int?>("DIMDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("DPID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DateCode")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("DateCodeActual")
                        .HasColumnType("boolean");

                    b.Property<int?>("DateCodeDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<int?>("FUNDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<bool?>("FinalResult")
                        .HasColumnType("boolean");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("FunMeasureTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("FunParaDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("GRSId")
                        .HasColumnType("integer");

                    b.Property<string>("GRSNoType")
                        .HasColumnType("text");

                    b.Property<string>("IPVersion")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LPositionDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("LastFormID")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("LockFlag")
                        .HasColumnType("integer");

                    b.Property<string>("LockUser")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("MPositionDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("MicroDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("OddQtyPerBox")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PackQty")
                        .HasColumnType("integer");

                    b.Property<int?>("PackSampleQty")
                        .HasColumnType("integer");

                    b.Property<string>("QN")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("QNSoftcopy")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("QtyPerBox")
                        .HasColumnType("double precision");

                    b.Property<string>("ReceivingInfo")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("RefDoc")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("RequireStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("SAPDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("SampleQTY")
                        .HasColumnType("integer");

                    b.Property<string>("SpecDefectType")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("StorageLoc")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("TestReportDefectTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("VISDefectTypeID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("GRSId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormBowTwistActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormBowTwistActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SAPParameterActual")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SAPParameterExpected")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormBowTwistActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormBowTwistParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormBowTwistParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Length")
                        .HasColumnType("character varying(53)")
                        .HasMaxLength(53);

                    b.Property<string>("Spec")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UpperLimit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("WarpType")
                        .HasColumnType("integer");

                    b.Property<string>("Width")
                        .HasColumnType("character varying(53)")
                        .HasMaxLength(53);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormBowTwistParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormCountParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormCountParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("FailedQTYActual")
                        .HasColumnType("integer");

                    b.Property<int?>("FailedQTYExpected")
                        .HasColumnType("integer");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionDetails")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<int?>("InspectionToolsId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("InspectionToolsId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormCountParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormFunPara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormFunParaId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UOM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormFunPara");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormFunParaActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormFunParaActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormFunParaActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormLPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormLPositionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("ITCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ITCode1")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode2")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode3")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit3")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Spec")
                        .HasColumnType("double precision");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("UpperLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit3")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormLPosition");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormLPositionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormLPositionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("Base1Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base2Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base3Actual")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID1")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID2")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID3")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<double?>("PositionActual")
                        .HasColumnType("double precision");

                    b.Property<double?>("PositionCalcul")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormLPositionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMPositionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("ITCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ITCode1")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode2")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode3")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit3")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Spec")
                        .HasColumnType("double precision");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("UpperLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit3")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMPosition");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMPositionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMPositionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("Base1Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base2Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base3Actual")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID1")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID2")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID3")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<double?>("PositionActual")
                        .HasColumnType("double precision");

                    b.Property<double?>("PositionCalcul")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMPositionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMeasurementParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMeasurementParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("UpperLimit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMeasurementParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMeasurementParameterActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMeasurementParameterActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMeasurementParameterActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMicroSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMicroSectionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UOM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMicroSection");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMicroSectionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormMicroSectionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormMicroSectionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPackaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormPackagingId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("Result")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultDesc")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormPackaging");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPartDateCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormPartDateCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MFGDate")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Requirement")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Result")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SupplierDC")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormPartDateCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPartSAPFailedQty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormPartSAPFailedQtyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("FailedQty")
                        .HasColumnType("integer");

                    b.Property<int?>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("GRSNo")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PCCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormPartSAPFailedQty");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormResultOrientedParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormResultOrientedParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("ResultActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("ResultExpected")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("TestCondition")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormResultOrientedParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormSAPParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormSAPParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SAPParameterActual")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SAPParameterExpected")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormSAPParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormSpecialParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormSpecialParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool?>("Result")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultDesc")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormSpecialParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormStatusId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusID")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormStatus");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormTestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormTestReportId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("ResultActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("ResultExpected")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("TestCondition")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormTestReport");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormVIS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormVISId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AcceptanceQTY")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("TotalFailedQTY")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("FormVIS");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GRSId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("GRSNo")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("GRSNoType")
                        .HasColumnType("text");

                    b.Property<int?>("InspectQty")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionResult")
                        .HasColumnType("character varying(8000)")
                        .HasMaxLength(8000);

                    b.Property<string>("InspectorName")
                        .HasColumnType("character varying(8000)")
                        .HasMaxLength(8000);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LotNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MFG")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MPN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MaterialName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MatlGroup")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MedialCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PO")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("RejectionQty")
                        .HasColumnType("integer");

                    b.Property<string>("SkipIQC")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("VendorCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VendorName1")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GRSNo")
                        .IsUnique()
                        .HasName("UK_GRS");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartNo");

                    b.ToTable("GRS");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRSSAPResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GRSSAPResultId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Error")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("GRSNO")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ISOK")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("NTID")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PayLoad")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("GRSSAPResult");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRSSupplierForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GRSSupplierFormId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("GRSId")
                        .HasColumnType("integer");

                    b.Property<string>("GRSNo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("SubmitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubmitUser")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GRSId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("GRSSupplierForm");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GoodsReceiveUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GoodsReceiveUserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LeaderMail")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SAPUser")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SupervisorMail")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("WareHouse")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("GoodsReceiveUser");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("WareHouse")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionResult")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Inspector")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ReportFullName")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionToolsId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("InspectionToolsTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("ValidDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InspectionToolsTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("InspectionTools");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionToolsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionToolsTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("UK_InspectionToolsType_Type");

                    b.ToTable("InspectionToolsType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionToolsTypePcCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionToolsTypePcCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("InspectionToolsTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PCCodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InspectionToolsTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PCCodeId");

                    b.ToTable("InspectionToolsTypePcCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InstrumentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InstrumentNo")
                        .HasColumnType("text");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("ValidDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstrumentNo")
                        .IsUnique()
                        .HasName("UK_Instrument_InstrumentNo");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InstrumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InstrumentTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UK_InstrumentType_Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("InstrumentType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.LotInspectionQty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LotInspectionQtyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("INspectQty")
                        .HasColumnType("integer");

                    b.Property<string>("InspStg")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LotNo")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Material")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MstrChar")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("LotInspectionQty");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Manager");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "Mario Munoz",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "JengHow Tan",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "Katalin Darlaczi",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.MaterialGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaterialGroupId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MaterialGroupName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("MaterialGroup");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PCCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UK_PCCode_Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("PCCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PCCodeInspectionToolsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCCodeInspectionToolsTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("InspectionToolsTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PCCodeId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InspectionToolsTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PCCodeId");

                    b.ToTable("PCCodeInspectionToolsType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterCategoryId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("MultiSampling")
                        .HasColumnType("integer");

                    b.Property<int?>("PCCodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PCCodeId");

                    b.ToTable("ParameterCategory");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterManagementId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ParameterTypeCodeId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterTypeCodeId");

                    b.ToTable("ParameterManagement");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterManagementCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterManagementCommodityId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.ToTable("ParameterManagementCommodity");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ComparationMethodDescription")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("ParameterType");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterTypeCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterTypeCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ParameterManagementTypeId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementTypeId");

                    b.ToTable("ParameterTypeCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterTypePcCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParameterTypePcCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PCCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("ParameterTypeCodeId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PCCodeId");

                    b.HasIndex("ParameterTypeCodeId");

                    b.ToTable("ParameterTypePcCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Commodity")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MPNMaterial")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("MaskedMPN")
                        .HasColumnType("text");

                    b.Property<string>("Mediacode")
                        .HasColumnType("text");

                    b.Property<string>("PartDescription")
                        .HasColumnType("text");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartNo")
                        .IsUnique()
                        .HasName("UK_Part_PartNo");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartCAF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartCAFId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Hyperlink")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("PartCAF");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartCountParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartCountParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DetailsDefine")
                        .HasColumnType("text");

                    b.Property<int?>("InspectionToolsTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int?>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InspectionToolsTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("PartCountParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartDateCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartDateCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DateCodeDetails")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("ManufactureDCWeeks")
                        .HasColumnType("integer");

                    b.Property<int?>("ManufactureDCYears")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ManufactureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ShelfLifeMonths")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTimeOffset?>("SurfaceFinishingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("PartDateCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartDimensionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("PartDimension");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartFunParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartFunParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerTolerance")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("UOMId")
                        .HasColumnType("integer");

                    b.Property<double?>("UpperTolerance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UOMId");

                    b.ToTable("PartFunParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionBowTwistParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartBowTwistParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BowTwistFormulaId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric")
                        .HasMaxLength(50);

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Spec")
                        .HasColumnType("numeric")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasMaxLength(50);

                    b.Property<decimal>("UpperLimit")
                        .HasColumnType("numeric")
                        .HasMaxLength(50);

                    b.Property<int?>("WarPageTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BowTwistFormulaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("PartInspectionBowTwistParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionCertificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionCertificationAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("PartInspectionCertificationAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionDrawing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionDrawingId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DrawingDescription")
                        .HasColumnType("text");

                    b.Property<string>("DrawingNumber")
                        .HasColumnType("text");

                    b.Property<string>("DrawingRevisionNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("PartInspectionDrawing");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionDrawingAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionDrawingAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("PartInspectionDrawingId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartInspectionDrawingId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("PartInspectionDrawingAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionManufacturePartNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionManufacturePartNumberId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PartManufacturePartNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartManufacturePartNumberId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("PartInspectionManufacturePartNumber");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionSpecAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionSpecAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("PartInspectionSpecificationId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartInspectionSpecificationId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("PartInspectionSpecAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartInspectionSpecificationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("SpecDescription")
                        .HasColumnType("text");

                    b.Property<string>("SpecNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecRevisionNumber")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("PartInspectionSpecification");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartLPositionTolerance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartLPositionToleranceId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("PartDimensionId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<int?>("Spec")
                        .HasColumnType("integer");

                    b.Property<double?>("SpecLimitAtLMC")
                        .HasColumnType("double precision");

                    b.Property<double?>("SpecLimitAtMMC")
                        .HasColumnType("double precision");

                    b.Property<int>("UOMId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("PartDimensionId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UOMId");

                    b.ToTable("PartLPositionTolerance");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMPositionTolerance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartMPositionToleranceId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("PartDimensionId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<int?>("Spec")
                        .HasColumnType("integer");

                    b.Property<double?>("SpecLimitAtLMC")
                        .HasColumnType("double precision");

                    b.Property<double?>("SpecLimitAtMMC")
                        .HasColumnType("double precision");

                    b.Property<int>("UOMId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("PartDimensionId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UOMId");

                    b.ToTable("PartMPositionTolerance");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartManufacturePartNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartManufacturePartNumberId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MPN")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PartId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartId");

                    b.ToTable("PartManufacturePartNumber");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMeasurementParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartMeasurementParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerTolerance")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("UOMId")
                        .HasColumnType("integer");

                    b.Property<double?>("UpperTolerance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UOMId");

                    b.ToTable("PartMeasurementParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMicrosection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartMicrosectionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerTolerance")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("UOMId")
                        .HasColumnType("integer");

                    b.Property<double?>("UpperTolerance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("UOMId");

                    b.ToTable("PartMicrosection");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartResultOrientedParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartResultOrientedParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InspectionDetails")
                        .HasColumnType("text");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ParameterManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("ResultId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("TestRequirement")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ParameterManagementId");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("PartResultOrientedParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartTestReportAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartTestReportAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PartTestReportParameterId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartTestReportParameterId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("PartTestReportAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartTestReportParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartTestReportParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InspectionDetails")
                        .HasColumnType("text");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ResultId")
                        .HasColumnType("integer");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("TestReportId")
                        .HasColumnType("integer");

                    b.Property<string>("TestRequirement")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("TestReportId");

                    b.ToTable("PartTestReportParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("Deleted")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedDate")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MPNMaterial")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerPartNo")
                        .HasColumnType("text");

                    b.Property<string>("PartNo")
                        .HasColumnType("text");

                    b.Property<string>("PurchaseOrderLineNo")
                        .HasColumnType("text");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("text");

                    b.Property<string>("PurchaseOrderStatus")
                        .HasColumnType("text");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("QuantityDelivered")
                        .HasColumnType("numeric");

                    b.Property<string>("SAPPurchaseOrderId")
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("VendorCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ReceiveGoodsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReceiveGoodsInfoId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Batch")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Material")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MatlGroup")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MocDoc")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MvmtType")
                        .HasColumnType("text");

                    b.Property<string>("Plant")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReceivedDateTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("((CURRENT_TIMESTAMP))");

                    b.Property<string>("Reference")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SpecStock")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("StorLoc")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("User")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Vendor")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("ReceiveGoodsInfo");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ReceiveGoodsInfoManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReceiveGoodsInfoManualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Batch")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Material")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MatlGroup")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MocDoc")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MvmtType")
                        .HasColumnType("text");

                    b.Property<string>("Plant")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReceivedDateTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("((CURRENT_TIMESTAMP))");

                    b.Property<string>("Reference")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SpecStock")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("StorLoc")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("User")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Vendor")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("ReceiveGoodsInfoManual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RegionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "Admin",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            Name = "DefaultAccess",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RolePermissionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'47', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PermissionType")
                        .HasColumnName("PermissionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 19,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 26,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 31,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 32,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 32,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 33,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 33,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 34,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 34,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 35,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 35,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 36,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 36,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 37,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 37,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 38,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 38,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 39,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 39,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 44,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 44,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 45,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 44,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 46,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 45,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 386,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 776,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 387,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 777,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 388,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 778,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 389,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 779,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 390,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 780,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 391,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 781,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 392,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 782,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 393,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 783,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 394,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 784,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 395,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 785,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 396,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 786,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 397,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 787,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 788,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 398,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 789,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 399,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 790,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 400,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 791,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 401,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 796,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 406,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 797,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 407,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 798,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 408,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 799,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            PermissionType = 409,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Rosetta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RosettaId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("EN_US")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("ZH_CN")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Rosetta");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPDataSyncDetails", b =>
                {
                    b.Property<int>("SAPDataSyncDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("LastSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("SAPDataSyncDetailsId");

                    b.ToTable("SAPDataSyncDetails");

                    b.HasData(
                        new
                        {
                            SAPDataSyncDetailsId = 1,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "1"
                        },
                        new
                        {
                            SAPDataSyncDetailsId = 2,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "2"
                        },
                        new
                        {
                            SAPDataSyncDetailsId = 3,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "3"
                        },
                        new
                        {
                            SAPDataSyncDetailsId = 4,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "4"
                        },
                        new
                        {
                            SAPDataSyncDetailsId = 5,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "5"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAPPartInspectionPlanId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("ApproveRejectedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApproveRejectedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignToUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CAFNo")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("DivisionModelNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GenWI")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("IPSerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("IPVersion")
                        .HasColumnType("text");

                    b.Property<bool>("IsMPNMatched")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSafePart")
                        .HasColumnType("boolean");

                    b.Property<string>("JabilOwnerContact")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MPNMaterialHERS")
                        .HasColumnType("text");

                    b.Property<string>("MPNReason")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<int?>("PartDateCodeId")
                        .HasColumnType("integer");

                    b.Property<string>("PartDescription")
                        .HasColumnType("text");

                    b.Property<int?>("PartId")
                        .HasColumnType("integer");

                    b.Property<string>("PartNo")
                        .HasColumnType("text");

                    b.Property<int?>("ProductLifeCycleStageId")
                        .HasColumnType("integer");

                    b.Property<string>("RefDoc")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ReferenceSAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteIP")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("SiteIPSerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SiteIPVersion")
                        .HasColumnType("text");

                    b.Property<int>("SpecTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("StateTypeId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SubmittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SupplierContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkCellId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApproveRejectedId");

                    b.HasIndex("AssignToUserId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("PartDateCodeId");

                    b.HasIndex("PartId");

                    b.HasIndex("ProductLifeCycleStageId");

                    b.HasIndex("StateTypeId");

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("SupplierContactId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WorkCellId");

                    b.ToTable("SAPPartInspectionPlan");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanAdminCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAPPartInspectionPlanAdminCertificationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdminCertificationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminCertificationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("SAPPartInspectionPlanAdminCertification");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAPPartInspectionPlanCommentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("SubmittedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("SAPPartInspectionPlanComment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanSamplingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAPPartInspectionPlanSamplingPlanId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MstrChar")
                        .HasColumnType("text");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("SmplProc")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("SAPPartInspectionPlanSamplingPlan");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAPPartInspectionPlanSupplierId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("SAPPartInspectionPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SAPPartInspectionPlanId");

                    b.ToTable("SAPPartInspectionPlanSupplier");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("LocationId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteDepartmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteDepartment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteDivisionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("SiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteDivision");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteUserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("SiteUser");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteWorkCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteWorkCellId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkCellId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkCellId");

                    b.ToTable("SiteWorkCell");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ChangedOn")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FaxNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SAPSupplierModel_ID")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SearchTerm")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("StreetNo")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SupplierStatus")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierAttachmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ATType")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierAttachment");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("ApproveTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApproveUser")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("DateCode")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("DateCodeActual")
                        .HasColumnType("boolean");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("ImportError")
                        .IsRequired()
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("ImportStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MO")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MovedPath")
                        .IsRequired()
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("PONo")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PartNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SampleQty")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalQty")
                        .HasColumnType("integer");

                    b.Property<string>("Verify")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("SupplierForm");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormBowTwistActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormBowTwistActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.Property<int>("WarpType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormBowTwistActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormBowTwistParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormBowTwistParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Length")
                        .HasColumnType("character varying(53)")
                        .HasMaxLength(53);

                    b.Property<string>("Spec")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UpperLimit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("WarpType")
                        .HasColumnType("integer");

                    b.Property<string>("Width")
                        .HasColumnType("character varying(53)")
                        .HasMaxLength(53);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormBowTwistParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormCountParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormCountParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("FailedQTYActual")
                        .HasColumnType("integer");

                    b.Property<int?>("FailedQTYExpected")
                        .HasColumnType("integer");

                    b.Property<int?>("IToolsID")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormCountParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormFunPara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormFunParaId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ITCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormFunPara");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormFunParaActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormFunParaActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueActual")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormFunParaActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormLPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormLPositionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ITCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ITCode1")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode2")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode3")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("LowerLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit3")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Spec")
                        .HasColumnType("double precision");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit3")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormLPosition");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormLPositionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormLPositionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("Base1Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base2Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base3Actual")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID1")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID2")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID3")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<double?>("PositionActual")
                        .HasColumnType("double precision");

                    b.Property<double?>("PositionCalcul")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormLPositionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMPositionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ITCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ITCode1")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode2")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ITCode3")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("LowerLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerLimit3")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Spec")
                        .HasColumnType("double precision");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit1")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit2")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperLimit3")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMPosition");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMPositionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMPositionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("Base1Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base2Actual")
                        .HasColumnType("double precision");

                    b.Property<double?>("Base3Actual")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID1")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID2")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("InstrumentID3")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LineNo")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<double?>("PositionActual")
                        .HasColumnType("double precision");

                    b.Property<double?>("PositionCalcul")
                        .HasColumnType("double precision");

                    b.Property<int?>("PositionType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMPositionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMeasurementParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMeasurementParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("InstrumentTypeID")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMeasurementParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMeasurementParameterActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMeasurementParameterActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMeasurementParameterActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMicroSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMicroSectionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ITCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("InstrumentID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<double?>("LowerLimit")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormalValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SampleSize")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("UpperLimit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMicroSection");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMicroSectionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormMicroSectionActualId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<double>("ValueActual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormMicroSectionActual");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormPackaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormPackagingId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultDesc")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormPackaging");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormPartDateCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormPartDateCodeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MFGDate")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SupplierDC")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormPartDateCode");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormResultOrientedParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormResultOrientedParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("InspectionDetails")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("ResultActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("ResultExpected")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("TestCondition")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormResultOrientedParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormSAPParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormSAPParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SAPParameterActual")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SAPParameterExpected")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormSAPParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormSpecialParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormSpecialParameterId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultDesc")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormSpecialParameter");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormTestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormTestReportId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("ResultActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("ResultExpected")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<string>("TestCondition")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormTestReport");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormVIS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierFormVISId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcceptanceQTY")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierFormId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFailedQTY")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SupplierFormId");

                    b.ToTable("SupplierFormVIS");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.TM1DataSyncDetails", b =>
                {
                    b.Property<int>("TM1DataSyncDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("LastSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TM1DataSyncDetailsId");

                    b.ToTable("TM1DataSyncDetails");

                    b.HasData(
                        new
                        {
                            TM1DataSyncDetailsId = 1,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "1"
                        },
                        new
                        {
                            TM1DataSyncDetailsId = 2,
                            LastSyncDate = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 462, DateTimeKind.Unspecified).AddTicks(9590), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "2"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.TestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestReportId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("TestReport");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.TestReportCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestReportCommodityId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("TestReportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("TestReportId");

                    b.ToTable("TestReportCommodity");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UOMId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("UOM");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'8', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AllowNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SiteId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SupplierId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "system_user@jabil.com",
                            EmployeeId = "0",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 1,
                            Name = "System User",
                            Status = (byte)0,
                            UserName = "0"
                        },
                        new
                        {
                            Id = 2,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "sandip_patil2@jabil.com",
                            EmployeeId = "1232922",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 1,
                            Name = "Sandip Patil",
                            Status = (byte)0,
                            UserName = "1232922"
                        },
                        new
                        {
                            Id = 3,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "NurShazwani_Md.Akhir@Jabil.com",
                            EmployeeId = "2925872",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 2,
                            Name = "NurShazwani Md.Akhir",
                            Status = (byte)0,
                            UserName = "2925872"
                        },
                        new
                        {
                            Id = 4,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "viknes_rajinran@jabil.com",
                            EmployeeId = "2932913",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 2,
                            Name = "Viknes Rajinran",
                            Status = (byte)0,
                            UserName = "2932913"
                        },
                        new
                        {
                            Id = 5,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "Amol_Gaikwad@Jabil.com",
                            EmployeeId = "2930217",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 1,
                            Name = "Amol Gaikwad",
                            Status = (byte)0,
                            UserName = "2930217"
                        },
                        new
                        {
                            Id = 6,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "Prashanth_Madakatte@jabil.com",
                            EmployeeId = "2978245",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 3,
                            Name = "Prashanth Madakatte",
                            Status = (byte)0,
                            UserName = "2978245"
                        },
                        new
                        {
                            Id = 7,
                            AllowNotification = false,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            DepartmentId = 1,
                            Email = "alok_saste@jabil.com",
                            EmployeeId = "2930215",
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            ManagerId = 1,
                            Name = "Alok Saste",
                            Status = (byte)0,
                            UserName = "2930215"
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UserCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserCustomerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserCustomer");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRoleId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'8', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            LastUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = 0,
                            RoleId = 1,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkCellId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("WorkCell");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellDccUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkCellDccUserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkCellUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkCellUserId");

                    b.ToTable("WorkCellDccUser");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellJabilUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkCellJabilUserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkCellUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkCellUserId");

                    b.ToTable("WorkCellJabilUser");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkCellSiteId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkCellId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkCellId");

                    b.ToTable("WorkCellSite");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkCellUserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("IsDccApproval")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusTypeId")
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("WorkCellId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkCellId");

                    b.ToTable("WorkCellUser");
                });

            modelBuilder.Entity("QSS.Models.AuditLog", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.AdminCertification", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.AdminCertificationAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.AdminCertification", "AdminCertification")
                        .WithMany("AdminCertificationAttachments")
                        .HasForeignKey("AdminCertificateId")
                        .HasConstraintName("FK_AdminCertification_AdminCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Attachment", "Attachment")
                        .WithMany("AdminCertificationAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Attachment_AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Attachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.BowTwistFormula", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.WarPageModel", "WarPage")
                        .WithMany()
                        .HasForeignKey("WarPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Buyer", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CTParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Commodity", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.CommodityCategory", "CommodityCategory")
                        .WithMany("Commodities")
                        .HasForeignKey("CommodityCategoryId")
                        .HasConstraintName("FK_Commodity_CommodityCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.EnumModels.CommodityCategoryOptionModel", "CommodityCategoryOption")
                        .WithMany("Commodities")
                        .HasForeignKey("CommodityCategoryOptionId")
                        .HasConstraintName("FK_Commodity_CommodityCategoryOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CommodityCategory", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.EnumModels.CommodityCategoryOptionModel", "CommodityCategoryOption")
                        .WithMany("CommodityCategorys")
                        .HasForeignKey("CommodityCategoryOptionId")
                        .HasConstraintName("FK_CommodityCategory_CommodityCategoryOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.EnumModels.CommodityCategoryTypeModel", "CommodityCategoryType")
                        .WithMany("CommodityCategorys")
                        .HasForeignKey("CommodityCategoryTypeId")
                        .HasConstraintName("FK_CommodityCategory_CommodityCategoryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CommodityPartNumberSite", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Commodity", "Commodity")
                        .WithMany("CommodityPartNumberSites")
                        .HasForeignKey("CommodityId")
                        .HasConstraintName("FK_Commodity_CommodityPartNumberSiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.CompletedGRS", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Country", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Region", "Region")
                        .WithMany("Country")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Country_RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Customer", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DCCConfiguration", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany("DCCConfigurations")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_DCCConfiguration_DCCConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DefectType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Department", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.DispositionType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Division", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.EmailTemplate", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Form", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.GRS", "GRS")
                        .WithMany()
                        .HasForeignKey("GRSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormBowTwistActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormBowTwistActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormBowTwistActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormBowTwistParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormBowTwistParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormBowTwistParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormCountParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormCountParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormCountParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InspectionTools", "InspectionTools")
                        .WithMany()
                        .HasForeignKey("InspectionToolsId");

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormFunPara", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormFunPara")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormFunPara_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormFunParaActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormFunParaActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormFunParaActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormLPosition", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormLPosition")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormLPosition_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormLPositionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormLPositionActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormLPositionActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMPosition", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMPosition")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMPosition_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMPositionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMPositionActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMPositionActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMeasurementParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMeasurementParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMeasurementParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMeasurementParameterActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMeasurementParameterActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMeasurementParameterActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMicroSection", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMicroSection")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMicroSection_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormMicroSectionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormMicroSectionActual")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormMicroSectionActual_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPackaging", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormPackaging")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormPackaging_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPartDateCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormPartDateCode")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormPartDateCode_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormPartSAPFailedQty", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", null)
                        .WithMany("FormPartSAPFailedQty")
                        .HasForeignKey("FormId");

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormResultOrientedParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormResultOrientedParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormResultOrientedParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormSAPParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormSAPParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormSAPParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormSpecialParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormSpecialParameter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormSpecialParameter_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormStatus", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormStatus")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormStatus_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormTestReport", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormTestReport")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormTestReport_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.FormVIS", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("FormVIS")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_FormVIS_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRS", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Part", "Part")
                        .WithMany("GRS")
                        .HasForeignKey("PartNo")
                        .HasConstraintName("FK_GRS_PartNo")
                        .HasPrincipalKey("PartNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRSSAPResult", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GRSSupplierForm", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.GRS", "GRS")
                        .WithMany()
                        .HasForeignKey("GRSId");

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("GRSSupplierForm")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_GRSSupplierForm_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.GoodsReceiveUser", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Group", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Inspection", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Form", "Form")
                        .WithMany("Inspection")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_Inspection_FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionTools", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InspectionToolsType", "InspectionToolsType")
                        .WithMany("InspectionTools")
                        .HasForeignKey("InspectionToolsTypeId")
                        .HasConstraintName("FK_InspectionTools_InspectionToolsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionToolsType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InspectionToolsTypePcCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InspectionToolsType", "InspectionToolsType")
                        .WithMany("InspectionToolsTypePcCodes")
                        .HasForeignKey("InspectionToolsTypeId")
                        .HasConstraintName("FK_InspectionToolsTypePcCode_InspectionToolsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PCCode", "PCCode")
                        .WithMany("InspectionToolsTypePcCodes")
                        .HasForeignKey("PCCodeId")
                        .HasConstraintName("FK_InspectionToolsTypePcCode_PCCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Instrument", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("Instrument")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_Instrument_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.InstrumentType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Location", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Country", "Country")
                        .WithMany("Location")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Location_CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.LotInspectionQty", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Manager", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.MaterialGroup", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PCCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PCCodeInspectionToolsType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InspectionToolsType", "InspectionToolsType")
                        .WithMany()
                        .HasForeignKey("InspectionToolsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PCCode", "PCCode")
                        .WithMany()
                        .HasForeignKey("PCCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterCategory", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PCCode", "PCCode")
                        .WithMany()
                        .HasForeignKey("PCCodeId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterManagement", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterTypeCode", "ParameterTypeCode")
                        .WithMany()
                        .HasForeignKey("ParameterTypeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterManagementCommodity", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Commodity", "Commodity")
                        .WithMany("ParameterManagementCommodity")
                        .HasForeignKey("CommodityId")
                        .HasConstraintName("FK_ParameterManagementCommodity_CommodityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("ParameterManagementCommodity")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_ParameterManagementCommodity_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterType", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterTypeCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.ParameterManagementTypeModel", "ParameterManagementType")
                        .WithMany()
                        .HasForeignKey("ParameterManagementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ParameterTypePcCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PCCode", "PCCode")
                        .WithMany("ParameterTypePcCodes")
                        .HasForeignKey("PCCodeId")
                        .HasConstraintName("FK_ParameterTypePcCode_PCCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterTypeCode", "ParameterTypeCode")
                        .WithMany("ParameterTypePcCodes")
                        .HasForeignKey("ParameterTypeCodeId")
                        .HasConstraintName("FK_ParameterTypeCode_ParameterTypeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Part", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartCAF", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartCountParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InspectionToolsType", "InspectionToolsType")
                        .WithMany("PartCountParameters")
                        .HasForeignKey("InspectionToolsTypeId")
                        .HasConstraintName("FK_PartCountParameter_InspectionToolsTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartCountParameters")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartCountParameter_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartCountParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartCountParameter_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartDateCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartDimension", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartFunParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.DataTypeModel", "DataType")
                        .WithMany("PartFunParameters")
                        .HasForeignKey("DataTypeId")
                        .HasConstraintName("FK_PartFunParameter_DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("PartFunParameters")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_PartFunParameter_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartFunParameters")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartFunParameter_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartFunParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartFunParameter_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.UOM", "UOM")
                        .WithMany("PartFunParameters")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_PartFunParameter_UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionBowTwistParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.BowTwistFormula", "BowTwistFormula")
                        .WithMany("PartInspectionBowTwistParameters")
                        .HasForeignKey("BowTwistFormulaId")
                        .HasConstraintName("FK_PIBowTwist_BowTwistFormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartInspectionBowTwistParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PIBowTwist_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionCertificationAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Attachment", "Attachment")
                        .WithMany("PartInspectionCertificationAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Attachment_AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartInspectionCertificationAttachments")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartInspectionCertificationAttachment_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionDrawing", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartInspectionDrawings")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionDrawingAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Attachment", "Attachment")
                        .WithMany("PartInspectionDrawingAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Attachment_AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartInspectionDrawing", "PartInspectionDrawing")
                        .WithMany("PartInspectionDrawingAttachments")
                        .HasForeignKey("PartInspectionDrawingId")
                        .HasConstraintName("FK_PartInspectionDrawing_PartInspectionDrawingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionManufacturePartNumber", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartManufacturePartNumber", "PartManufacturePartNumber")
                        .WithMany("PartInspectionManufacturePartNumbers")
                        .HasForeignKey("PartManufacturePartNumberId")
                        .HasConstraintName("FK_SAPMPN_PMPNId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartInspectionManufacturePartNumbers")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_SAPMPN_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionSpecAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Attachment", "Attachment")
                        .WithMany("PartInspectionSpecAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Attachment_AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartInspectionSpecification", "PartInspectionSpecification")
                        .WithMany("PartInspectionSpecAttachments")
                        .HasForeignKey("PartInspectionSpecificationId")
                        .HasConstraintName("FK_PartInspectionSpecification_PartInspectionSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartInspectionSpecification", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartInspectionSpecifications")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartLPositionTolerance", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.DataTypeModel", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("PartLPositionTolerances")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_PartLPositionTolerance_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartLPositionTolerances")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartLPositionTolerance_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartDimension", "PartDimension")
                        .WithMany("PartLPositionTolerances")
                        .HasForeignKey("PartDimensionId")
                        .HasConstraintName("FK_PartLPositionTolerance_PartDimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartLPositionTolerances")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartLPositionTolerance_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.UOM", "UOM")
                        .WithMany("PartLPositionTolerances")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_PartLPositionTolerance_UOMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMPositionTolerance", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.DataTypeModel", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("PartMPositionTolerances")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_PartMPositionTolerance_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartMPositionTolerances")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartMPositionTolerance_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartDimension", "PartDimension")
                        .WithMany("PartMPositionTolerances")
                        .HasForeignKey("PartDimensionId")
                        .HasConstraintName("FK_PartMPositionTolerance_PartDimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartMPositionTolerances")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartMPositionTolerance_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.UOM", "UOM")
                        .WithMany("PartMPositionTolerances")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_PartMPositionTolerance_UOMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartManufacturePartNumber", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Part", "Part")
                        .WithMany("PartManufacturePartNumbers")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK_PartManufacturePartNumber_PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMeasurementParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.DataTypeModel", "DataType")
                        .WithMany("PartMeasurementParameters")
                        .HasForeignKey("DataTypeId")
                        .HasConstraintName("FK_PartMeasurementParameter_DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("PartMeasurementParameters")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_PartMeasurementParameter_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartMeasurementParameters")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartMeasurementParameter_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartMeasurementParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartMeasurementParameter_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.UOM", "UOM")
                        .WithMany("PartMeasurementParameters")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_PartMeasurementParameter_UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartMicrosection", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.EnumModels.DataTypeModel", "DataType")
                        .WithMany("PartMicrosectionParameters")
                        .HasForeignKey("DataTypeId")
                        .HasConstraintName("FK_PartMicrosection_DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.InstrumentType", "InstrumentType")
                        .WithMany("PartMicrosectionParameters")
                        .HasForeignKey("InstrumentTypeId")
                        .HasConstraintName("FK_PartMicrosection_InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartMicrosectionParameters")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartMicrosection_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartMicrosectionParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartMicrosection_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.UOM", "UOM")
                        .WithMany("PartMicrosectionParameters")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_PartMicrosection_UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartResultOrientedParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.ParameterManagement", "ParameterManagement")
                        .WithMany("PartResultOrientedParameters")
                        .HasForeignKey("ParameterManagementId")
                        .HasConstraintName("FK_PartResultOrientedParameter_ParameterManagementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartResultOrientedParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_PartResultOrientedParameter_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartTestReportAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Attachment", "Attachment")
                        .WithMany("PartTestReportAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Attachment_AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartTestReportParameter", "PartTestReportParameter")
                        .WithMany("PartTestReportAttachments")
                        .HasForeignKey("PartTestReportParameterId")
                        .HasConstraintName("FK_PartTestReport_PartTestReportParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId");
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PartTestReportParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("PartTestReportParameters")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.TestReport", "TestReport")
                        .WithMany()
                        .HasForeignKey("TestReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.PurchaseOrder", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ReceiveGoodsInfo", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.ReceiveGoodsInfoManual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Region", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Role", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermission_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Rosetta", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "ApproveRejected")
                        .WithMany("SAPPartInspectionPlanApproveRejectedUsers")
                        .HasForeignKey("ApproveRejectedId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_ApproveRejectedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "AssignTo")
                        .WithMany("SAPPartInspectionPlanAssignToUsers")
                        .HasForeignKey("AssignToUserId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_AssignToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.Commodity", "Commodity")
                        .WithMany("SAPPartInspectionPlans")
                        .HasForeignKey("CommodityId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_CommodityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.PartDateCode", "PartDateCode")
                        .WithMany("SAPPartInspectionPlans")
                        .HasForeignKey("PartDateCodeId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_PartDateCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("QSS.eIQC.Domain.EnumModels.ProductLifeCycleStageModel", "ProductLifeCycleStage")
                        .WithMany("SAPPartInspectionPlans")
                        .HasForeignKey("ProductLifeCycleStageId")
                        .HasConstraintName("FK_ProductLifeCycleStage_ProductLifeCycleStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.EnumModels.StateTypeModel", "StateType")
                        .WithMany()
                        .HasForeignKey("StateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "SubmittedBy")
                        .WithMany("SAPPartInspectionPlanSubmittedUsers")
                        .HasForeignKey("SubmittedByUserId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "SupplierContact")
                        .WithMany("SAPPartInspectionPlanSupplierContactUsers")
                        .HasForeignKey("SupplierContactId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_SupplierContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.Supplier", "Supplier")
                        .WithMany("SAPPartInspectionPlan")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCell", "WorkCell")
                        .WithMany("SAPPartInspectionPlans")
                        .HasForeignKey("WorkCellId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_WorkCellId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanAdminCertification", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.AdminCertification", "AdminCertification")
                        .WithMany("SAPPartInspectionPlanAdminCertifications")
                        .HasForeignKey("AdminCertificationId")
                        .HasConstraintName("FK_SP_AdminCertificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("SAPPartInspectionPlanAdminCertifications")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_SP_SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanComment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", null)
                        .WithMany("PartComments")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanSamplingPlan", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("SAPPartInspectionPlanSamplingPlans")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_SAPPartInspectionPlanSamplingPlan_SAPPartInspectionPlanSamplingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SAPPartInspectionPlanSupplier", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SAPPartInspectionPlan", "SAPPartInspectionPlan")
                        .WithMany("SAPPartInspectionPlanSuppliers")
                        .HasForeignKey("SAPPartInspectionPlanId")
                        .HasConstraintName("FK_SAPPartInspectionPlan_SAPPartInspectionPlanSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Site", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Location", "Location")
                        .WithMany("Site")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Site_LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteDepartment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteDivision", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Division", "Division")
                        .WithMany("SiteDivisions")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_SiteDivision_DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany("SiteDivisions")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_SiteDivision_SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteUser", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany("SiteUsers")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_SiteUser_SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "User")
                        .WithMany("SiteUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SiteUser_UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SiteWorkCell", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCell", "WorkCell")
                        .WithMany()
                        .HasForeignKey("WorkCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.Supplier", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierAttachment", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany()
                        .HasForeignKey("SupplierFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierForm", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormBowTwistActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormBowTwistActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormBowTwistActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormBowTwistParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormBowTwistParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormBowTwistParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormCountParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormCountParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormCountParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormFunPara", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormFunPara")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormFunPara_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormFunParaActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormFunParaActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormFunParaActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormLPosition", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormLPosition")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormLPosition_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormLPositionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormLPositionActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormLPositionActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMPosition", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMPosition")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMPosition_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMPositionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMPositionActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMPositionActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMeasurementParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMeasurementParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMeasurementParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMeasurementParameterActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMeasurementParameterActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMeasurementParameterActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMicroSection", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMicroSection")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMicroSection_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormMicroSectionActual", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormMicroSectionActual")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormMicroSectionActual_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormPackaging", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormPackaging")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormPackaging_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormPartDateCode", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormPartDateCode")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormPartDateCode_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormResultOrientedParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormResultOrientedParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormResultOrientedParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormSAPParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormSAPParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormSAPParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormSpecialParameter", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormSpecialParameter")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormSpecialParameter_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormTestReport", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormTestReport")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormTestReport_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.SupplierFormVIS", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.SupplierForm", "SupplierForm")
                        .WithMany("SupplierFormVIS")
                        .HasForeignKey("SupplierFormId")
                        .HasConstraintName("FK_SupplierFormVIS_SupplierFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.TestReport", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.TestReportCommodity", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.Commodity", "Commodity")
                        .WithMany("TestReportCommodities")
                        .HasForeignKey("CommodityId")
                        .HasConstraintName("FK_TestReportCommodity_CommodityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.TestReport", "TestReport")
                        .WithMany("TestReportCommodities")
                        .HasForeignKey("TestReportId")
                        .HasConstraintName("FK_TestReportCommodity_TestReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UOM", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.User", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Department", "Department")
                        .WithMany("User")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_User_DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Manager", "Manager")
                        .WithMany("User")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_User_ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany("Users")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_User_SiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QSS.eIQC.Domain.Models.Supplier", "Supplier")
                        .WithMany("User")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_User_SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UserCustomer", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Customer", "Customer")
                        .WithMany("UserCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_UserCustomer_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "User")
                        .WithMany("UserCustomers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCustomer_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.UserRole", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCell", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellDccUser", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "User")
                        .WithMany("WorkCellDccUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WorkCellDccUser_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCellUser", "WorkCellUser")
                        .WithMany("WorkCellDccUsers")
                        .HasForeignKey("WorkCellUserId")
                        .HasConstraintName("FK_WorkCellDccUser_WorkCellUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellJabilUser", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "User")
                        .WithMany("WorkCellJabilUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WorkCellJabilUser_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCellUser", "WorkCellUser")
                        .WithMany("WorkCellJabilUsers")
                        .HasForeignKey("WorkCellUserId")
                        .HasConstraintName("FK_WorkCellJabilUser_WorkCellUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellSite", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany("WorkCellSites")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_WorkCellSite_SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCell", "WorkCell")
                        .WithMany("WorkCellSites")
                        .HasForeignKey("WorkCellId")
                        .HasConstraintName("FK_WorkCellSite_WorkCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QSS.eIQC.Domain.Models.WorkCellUser", b =>
                {
                    b.HasOne("QSS.eIQC.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QSS.eIQC.Domain.Models.WorkCell", "WorkCell")
                        .WithMany()
                        .HasForeignKey("WorkCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
